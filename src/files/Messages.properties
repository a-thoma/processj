# Created by Ben Cisneros
# Fall 2018
# --
# This file contains a list of error messages for the ProcessJ compiler

# -----------------------------------------------------------------------------
# BASIC ERROR - 1000

BASIC_ERROR_1000 = \
    no input file(s)

# -----------------------------------------------------------------------------
# NAME CHECKER (TOP LEVEL) - 2100

NAME_CHECKER_2100 = \
    Type with name <arg1> already declared in this scope

NAME_CHECKER_2101 = \
    Non-procedure type with name <arg1> already declared in this scope

NAME_CHECKER_2102 = \
    Type with name <arg1> already declared in this scope

NAME_CHECKER_2103 = \
    Type with name <arg1> already declared in this scope

NAME_CHECKER_2104 = \
    File not found: <arg1>

NAME_CHECKER_2105 = \
    Something went wrong while trying to parser <arg1>

NAME_CHECKER_2106 = \
    Package <arg1> does not exist

NAME_CHECKER_2107 = \
    File <arg1> does not exists

NAME_CHECKER_2108 = \
    File <arg1> not found in package <arg2>

NAME_CHECKER_2109 = \
    Mobile procedure <arg1> must have a void return type

NAME_CHECKER_2110 = \
    Only one declaration of mobile procedure <arg1> may exists

NAME_CHECKER_2111 = \
    Type with name <arg1> already declared in this scope

# -----------------------------------------------------------------------------
# NAME TYPE RESOLUTION - 2150

NAME_TYPE_RESOLUTION_2150 = \
    Cannot resolve <arg1> as local file or library

# -----------------------------------------------------------------------------
# TYPE CHECKING - 3000

TYPE_RESOLUTION_3001 = \
    Array access index must be of integral type

TYPE_RESOLUTION_3002 = \
    Array literal with the keyword 'new'

TYPE_RESOLUTION_3003 = \
    Cannot assign value of type <arg1> to variable of type <arg2>

TYPE_RESOLUTION_3004 = \
    Cannot assign value of type <arg1> to variable of type <arg2>

TYPE_RESOLUTION_3005 = \
    Right hand side operand of operator <arg1> must be of numeric type

TYPE_RESOLUTION_3006 = \
    Left hand side operand of operator <arg1> must be of numeric type

TYPE_RESOLUTION_3007 = \
    Left hand side operand of operator <arg1> must be of integral type

TYPE_RESOLUTION_3008 = \
    Right hand side operand of operator <arg1> must be of integral type

TYPE_RESOLUTION_3009 = \
    Both right and left-hand side operands of operator <arg1> must be of boolean or integral type

TYPE_RESOLUTION_3010 = \
    Operator <arg1> requires operands of numeric type

TYPE_RESOLUTION_3011 = \
    Void type cannot be used here

TYPE_RESOLUTION_3012 = \
    Operator <arg1> requires operands of the same type

TYPE_RESOLUTION_3013 = \
    Operator <arg1> requires operands of boolean type

TYPE_RESOLUTION_3014 = \
    Operator <arg1> requires both operands of either integral or boolean type

TYPE_RESOLUTION_3015 = \
    Operator <arg1> requires of numeric type or string/boolean, string/numeric, or string/string type

TYPE_RESOLUTION_3016 = \
    Operator <arg1> requires left operand of integral type

TYPE_RESOLUTION_3017 = \
    Operator <arg1> requires right operand of integral type

TYPE_RESOLUTION_3018 = \
    Unknown Operator <arg1>

TYPE_RESOLUTION_3019 = \
    Channel end expression requires channel type

TYPE_RESOLUTION_3020 = \
    Unknown sharing status for channel and expression

TYPE_RESOLUTION_3021 = \
    Channel or Time type required in channel/time read

TYPE_RESOLUTION_3022 = \
    Timer read cannot have extended rendez-vous block

TYPE_RESOLUTION_3023 = \
    Cannot write to a non-channel end

TYPE_RESOLUTION_3024 = \
    Non boolean Expression found as test in do-statement

TYPE_RESOLUTION_3025 = \
    Barrier type expected, found <arg1>

TYPE_RESOLUTION_3026 = \
    Non-boolean expression found in for-statement

TYPE_RESOLUTION_3027 = \
    Non-boolean expression found as test in if-statement

TYPE_RESOLUTION_3028 = \
    Undefined named type <arg1>

TYPE_RESOLUTION_3029 = \
    Unknown name expression

TYPE_RESOLUTION_3030 = \
    Cannot assign value <arg1> to type <arg2>

TYPE_RESOLUTION_3031 = \
    Array dimension must be of integral type

TYPE_RESOLUTION_3032 = \
    Array initializer is not compatible with <arg1>

TYPE_RESOLUTION_3033 = \
    Incorrect number of expression in protocol literal <arg1>

TYPE_RESOLUTION_3034 = \
    Cannot assign value of type <arg1> to protocol field <arg2> of type <arg3>

TYPE_RESOLUTION_3036 = \
    Left hand side of assignment not assignable

TYPE_RESOLUTION_3037 = \
    No suitable procedure found

TYPE_RESOLUTION_3038 = \
    Found more than once candidate - cannot chose between them!

TYPE_RESOLUTION_3039 = \
    Cannot assign non-array to array type <arg1>

TYPE_RESOLUTION_3040 = \
    Procedure return type is void; return statement cannot return a value

TYPE_RESOLUTION_3041 = \
    Procedure return type is <arg1> but procedure return type is void

TYPE_RESOLUTION_3042 = \
    Incompatible type in return statement

TYPE_RESOLUTION_3043 = \
    Non-mobile procedure cannot suspend

TYPE_RESOLUTION_3044 = \
    Switch labels must be of type int or protocol tag

TYPE_RESOLUTION_3045 = \
    Switch labels must be constants

TYPE_RESOLUTION_3046 = \
    Duplicate default label

TYPE_RESOLUTION_3047 = \
    Duplicate case label

TYPE_RESOLUTION_3048 = \
    Non-barrier type in sync statement

TYPE_RESOLUTION_3060 = \
    Protocol tag <arg1> not found in protocol <arg2>

TYPE_RESOLUTION_3061 = \
    Request for member <arg1> in something not a record or protocol type

TYPE_RESOLUTION_3062 = \
    Switch statement expects value of type int or protocol tag

TYPE_RESOLUTION_3063 = \
    Nested switch statements on the same protocol type is not allowed

TYPE_RESOLUTION_3064 = \
    Fall-through cases in protocol switch statement not allowed

TYPE_RESOLUTION_3065 = \
    Default case not allowed in protocol switch

TYPE_RESOLUTION_3066 = \
    Switch label must be of integer type

TYPE_RESOLUTION_3067 = \
    Switch label must be a protocol case name

TYPE_RESOLUTION_3069 = \
    Fall-through cases in protocol switch statement not allowed

TYPE_RESOLUTION_3070 = \
    Non-boolean Expression found as test in ternary expression

TYPE_RESOLUTION_3071 = \
    Both branches of a ternary expression must be of assignment compatible types

TYPE_RESOLUTION_3072 = \
    Both branches of a ternary expression must be of assignment compatible types

TYPE_RESOLUTION_3073 = \
    Unknown field reference <arg1> in protocol tag <arg2> in protocol <arg3>

# -----------------------------------------------------------------------------
# NAME RESOLUTION - 2202

NAME_RESOLUTION_2202 = \
    <arg1> already declared in this scope

NAME_RESOLUTION_2203 = \
    Symbol <arg1> not found

NAME_RESOLUTION_2206 = \
    <arg1> already declared in this scope

NAME_RESOLUTION_2207 = \
    Procedure <arg1> not found

NAME_RESOLUTION_2208 = \
    Cannot invoke non-procedure <arg1>

NAME_RESOLUTION_2210 = \
    Symbol <arg1> not found

NAME_RESOLUTION_2211 = \
    Symbol <arg1> not found

# -----------------------------------------------------------------------------
# PARALLEL USAGE CHECKING - 5100
    
PARALLEL_USAGE_CHECKING_5100 = \
    Parallel read and write access to record member <arg1> illegal

PARALLEL_USAGE_CHECKING_5101 = \
    Parallel read and write access to array member <arg1> illegal

PARALLEL_USAGE_CHECKING_5102 = \
    Parallel usage checking is not fully implemented for array access

PARALLEL_USAGE_CHECKING_5103 = \
    Parallel write access to variable <arg1> illegal

PARALLEL_USAGE_CHECKING_5104 = \
    Parallel write access to record member <arg1> illegal

PARALLEL_USAGE_CHECKING_5105 = \
    Parallel write access to array member <arg1> illegal

PARALLEL_USAGE_CHECKING_5106 = \
    Parallel usage checking is not fully implemented for array access

PARALLEL_USAGE_CHECKING_5107 = \
    Parallel read and write access to variable <arg1> illegal

PARALLEL_USAGE_CHECKING_5108 = \
    Parallel write access to variable <arg1> illegal

PARALLEL_USAGE_CHECKING_5109 = \
    Parallel write access to record member <arg1> illegal

PARALLEL_USAGE_CHECKING_5110 = \
    Parallel write access to array member <arg1> illegal

PARALLEL_USAGE_CHECKING_5111 = \
    Parallel usage checking is not fully implemented for array access

PARALLEL_USAGE_CHECKING_5112 = \
    Parallel write access to variable <arg1> illegal

PARALLEL_USAGE_CHECKING_5113 = \
    Parallel write access to record member <arg1> illegal

PARALLEL_USAGE_CHECKING_5114 = \
    Parallel write access to array member <arg1> illegal

PARALLEL_USAGE_CHECKING_5115 = \
    Parallel usage checking is not fully implemented for array access
