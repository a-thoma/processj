package utilities;

import java.io.File;
import java.util.Iterator;
import java.util.Stack;

import org.stringtemplate.v4.ST;

/**
 * The class {@link CompilerMessageManager} is used to
 * track down various types of error/warning messages
 * generated by the ProcessJ compiler at compile-time
 * or run-time.
 * 
 * @author Ben
 * @version 21/10/2018
 * @since 1.2
 */
public enum CompilerMessageManager {
    
    INSTANCE
    ;
    
    /**
     * Number of errors/warning messages generated by the compiler.
     */
    private int errorCount;
    
    /**
     * List of errors/warning messages.
     */
    private Stack<CompilerMessage> stackTrace;
    
    /**
     * Input file that contains error/warning messages.
     */
    public String fileName = "";
    
    /**
     * Namespace for input file.
     */
    public String packageName = "";
    
    CompilerMessageManager() {
        errorCount = 0;
        stackTrace = new Stack<>();
    }
    
    public void add(CompilerMessage errorMessage) {
        ErrorSeverity severity = errorMessage.getMessageNumber().getErrorSeverity();
        switch (severity) {
        case INFO:
        case WARNING:
            break;
        case ERROR:
            ++errorCount;
            break;
        }
        stackTrace.push(errorMessage);
    }
    
    public void printAndContinue(CompilerMessage errorMessage) {
        ST msg = errorMessage.getST();
        System.out.println(msg.render());
        add(errorMessage);
    }
    
    public void dontPrintJustContinue(CompilerMessage errorMessage) {
        add(errorMessage);
    }
    
    public void printAndStop(CompilerMessage errorMessage) {
        add(errorMessage);
        ST msg = errorMessage.getST();
        System.out.println(msg.render());
        System.exit(0);
    }
    
    public int getErrorCount() {
        return errorCount;
    }
    
    public Stack<CompilerMessage> getTrace() {
        return stackTrace;
    }
    
    public void printTrace(String source) {
        System.out.println("=============== E R R O R   R E P O R T ===============");
        System.out.println(String.format("%d error(s) in '%s'", errorCount, source));
        Iterator<CompilerMessage> it = stackTrace.iterator();
        while (it.hasNext()) {
            System.out.println(it.next().renderMessage());
            if (it.hasNext())
                System.out.println("+------------------------------------------------------");
        }
    }
    
    public void setPackageName(String name) {
        // First strip the `.pj' part
        String str = name.replaceAll("\\.pj$", "");
        // Now remove the absolute path
        String absPath = new File("").getAbsolutePath() + "/";
        str = str.replaceAll(absPath, "");
        // replace all `/' with .
        str = str.replaceAll("/", "\\.");
        packageName = str;
    }
    
    public void setFileName(String name) {
        // remove all double `//:'
        String str = name.replaceAll("//","/");
        // Now remove the absolute path
        String absPath = new File("").getAbsolutePath() + "/";
        str = str.replaceAll(absPath,"");
        fileName = str;
    }
}
