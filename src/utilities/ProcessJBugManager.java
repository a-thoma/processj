package utilities;

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileOutputStream;
import java.io.OutputStreamWriter;
import java.io.Writer;
import java.util.Iterator;
import java.util.Stack;

/**
 * This class is used to track down various kind of error/warning
 * messages produced by the ProcessJ compiler at compile-time or
 * runtime.
 * 
 * @author ben
 * @version 21/10/2018
 * @since 1.2
 */
public enum ProcessJBugManager {
    
    INSTANCE
    ;
    
    /* Number of errors/warning messages generated by the compiler */
    private int d_errorCount;
    
    /* Last registered message */
    private ProcessJBugMessage d_postPonedMessage = null;
    
    /* List of errors/warning messages */
    private Stack<ProcessJBugMessage> d_stackTrace;
    
    /* Input file that contains error/warning messages */
    public String fileName = "";
    
    /* Location of input file */
    public String packageName = "";
    
    ProcessJBugManager() {
        d_errorCount = 0;
        d_stackTrace = new Stack<ProcessJBugMessage>();
    }
    
    public void addMessageAndExit(ProcessJBugMessage cm, MessageNumber msg) {
        ErrorSeverity severity = msg.getErrorSeverity();
        switch (severity) {
        case INFO:
        case WARNING:
            break;
        case ERROR:
            ++d_errorCount;
            break;
        }
        d_stackTrace.push(cm);
        d_postPonedMessage = cm;
    }
    
    public void reportMessageAndExit(ProcessJBugMessage cm, MessageType mt) {
        cm = Assert.nonNull(cm, "Compiler message cannot be null.");
        boolean stop = false;
        addMessageAndExit(cm, cm.messageNumber());
        
        switch(mt) {
        case PRINT_STOP:
            stop = true;
        case PRINT_CONTINUE:
            /* Throw the first error that occurred */
            if (d_postPonedMessage == null)
                d_postPonedMessage = cm;
            System.out.println(cm.renderMessage());
            if (stop)
                System.exit(1);
        case DONT_PRINT_CONTINUE:
            break;
        }
    }
    
    public void reportMessage(ProcessJBugMessage cm) {
        reportMessageAndExit(cm, cm.messageNumber().getMessageType());
    }
    
    public int getErrorCount() {
        return d_errorCount;
    }
    
    public Stack<ProcessJBugMessage> trace() {
        return d_stackTrace;
    }
    
    public ProcessJBugMessage postPonedMessage() {
        return d_postPonedMessage;
    }
    
    public void printTrace(String src) {
        System.out.println("****************************************");
        System.out.println("*         S T A C K  T R A C E         *");
        System.out.println("****************************************");
        System.out.print(d_errorCount + " error(s) in '" + src + "'");
        Iterator<ProcessJBugMessage> it = d_stackTrace.iterator();
        while (it.hasNext()) {
            System.out.println(it.next().renderMessage());
            if (it.hasNext())
                System.out.println("=======================================================");
        }
    }
    
    public void setPackageName(String name) {
        /* First strip the 'Xxx.pj' part */
        String str = name.replaceAll("\\.pj$", "");
        /* Now remove the absolute path */
        String absPath = new File("").getAbsolutePath() + "/";
        str = str.replaceAll(absPath, "");
        /* Replace all '/' with */
        str = str.replaceAll("/", "\\.");
        packageName = str;
    }
    
    public void setFileName(String name) {
        /* Remove all double '//:' */
        String str = name.replaceAll("//","/");
        /* Now remove the absolute path */
        String absPath = new File("").getAbsolutePath() + "/";
        str = str.replaceAll(absPath,"");
        fileName = str;
    }
    
    public void writeErrorToFile(String outputFile) {
        /* TODO: Should the error file be written to the source directory? */
        String javafile = "/Users/Ben/Documents/" + outputFile + ".txt";
        StringBuilder stringBuilder = new StringBuilder();
        for (ProcessJBugMessage cm : d_stackTrace)
            stringBuilder.append(cm.messageNumber().getNumber()).append("\n");
        Writer writer = null;
        try {
            writer = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(javafile), "utf-8"));
            writer.write(stringBuilder.toString());
            writer.close();
        } catch (Exception e) {
            System.out.println(e);
        }
    }
}
