
//----------------------------------------------------
// The following code was generated by CUP v0.10j
// Fri Sep 28 17:03:39 PDT 2018
//----------------------------------------------------

package parser;

import scanner.Scanner;
import ast.*;
import utilities.Error;
import parser.*;

/** CUP v0.10j generated parser.
  * @version Fri Sep 28 17:03:39 PDT 2018
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\u017b\000\002\002\004\000\002\003\003\000\002\004" +
    "\003\000\002\004\002\000\002\005\004\000\002\005\003" +
    "\000\002\006\003\000\002\006\003\000\002\006\003\000" +
    "\002\006\003\000\002\006\005\000\002\007\003\000\002" +
    "\007\005\000\002\010\014\000\002\010\014\000\002\021" +
    "\005\000\002\021\002\000\002\022\003\000\002\022\005" +
    "\000\002\023\005\000\002\023\005\000\002\023\005\000" +
    "\002\023\005\000\002\023\005\000\002\023\005\000\002" +
    "\011\003\000\002\011\003\000\002\012\004\000\002\012" +
    "\002\000\002\013\005\000\002\013\003\000\002\020\003" +
    "\000\002\020\005\000\002\017\003\000\002\017\005\000" +
    "\002\014\003\000\002\014\002\000\002\015\005\000\002" +
    "\015\003\000\002\016\004\000\002\016\005\000\002\024" +
    "\010\000\002\024\010\000\002\025\004\000\002\025\002" +
    "\000\002\026\005\000\002\027\004\000\002\027\003\000" +
    "\002\030\005\000\002\031\003\000\002\031\004\000\002" +
    "\032\010\000\002\033\005\000\002\034\004\000\002\034" +
    "\003\000\002\035\005\000\002\036\005\000\002\036\003" +
    "\000\002\037\003\000\002\040\003\000\002\040\003\000" +
    "\002\040\003\000\002\040\003\000\002\041\003\000\002" +
    "\041\003\000\002\041\003\000\002\041\003\000\002\041" +
    "\003\000\002\041\003\000\002\041\003\000\002\041\003" +
    "\000\002\041\003\000\002\041\003\000\002\041\003\000" +
    "\002\234\002\000\002\042\007\000\002\043\004\000\002" +
    "\043\004\000\002\043\004\000\002\043\006\000\002\044" +
    "\010\000\002\044\010\000\002\044\007\000\002\044\006" +
    "\000\002\044\010\000\002\044\010\000\002\044\011\000" +
    "\002\044\011\000\002\045\006\000\002\050\003\000\002" +
    "\050\002\000\002\051\003\000\002\051\004\000\002\052" +
    "\006\000\002\052\005\000\002\046\003\000\002\046\002" +
    "\000\002\047\005\000\002\053\003\000\002\053\002\000" +
    "\002\054\004\000\002\054\003\000\002\055\005\000\002" +
    "\055\007\000\002\056\003\000\002\056\002\000\002\057" +
    "\004\000\002\057\003\000\002\060\003\000\002\060\003" +
    "\000\002\060\003\000\002\060\003\000\002\060\003\000" +
    "\002\060\003\000\002\061\006\000\002\062\005\000\002" +
    "\062\003\000\002\063\005\000\002\063\003\000\002\064" +
    "\005\000\002\064\003\000\002\065\003\000\002\065\005" +
    "\000\002\066\003\000\002\066\005\000\002\067\003\000" +
    "\002\067\003\000\002\070\005\000\002\071\003\000\002" +
    "\071\002\000\002\072\005\000\002\072\003\000\002\073" +
    "\003\000\002\073\002\000\002\074\005\000\002\075\003" +
    "\000\002\075\002\000\002\076\004\000\002\076\003\000" +
    "\002\077\004\000\002\077\010\000\002\100\005\000\002" +
    "\100\003\000\002\101\004\000\002\101\003\000\002\102" +
    "\005\000\002\102\004\000\002\102\005\000\002\103\003" +
    "\000\002\103\003\000\002\103\003\000\002\103\003\000" +
    "\002\103\003\000\002\103\003\000\002\103\003\000\002" +
    "\104\003\000\002\104\003\000\002\104\003\000\002\104" +
    "\003\000\002\104\003\000\002\105\003\000\002\105\003" +
    "\000\002\105\003\000\002\105\003\000\002\105\003\000" +
    "\002\105\004\000\002\105\004\000\002\105\003\000\002" +
    "\105\003\000\002\105\003\000\002\105\003\000\002\105" +
    "\003\000\002\105\003\000\002\105\003\000\002\105\003" +
    "\000\002\105\011\000\002\105\011\000\002\105\003\000" +
    "\002\106\007\000\002\107\011\000\002\110\011\000\002" +
    "\111\007\000\002\112\007\000\002\113\013\000\002\113" +
    "\020\000\002\113\014\000\002\114\013\000\002\114\020" +
    "\000\002\114\014\000\002\115\003\000\002\115\002\000" +
    "\002\116\003\000\002\116\003\000\002\117\003\000\002" +
    "\117\002\000\002\120\003\000\002\121\003\000\002\121" +
    "\005\000\002\123\010\000\002\124\007\000\002\125\007" +
    "\000\002\126\005\000\002\126\003\000\002\127\003\000" +
    "\002\127\006\000\002\127\003\000\002\130\003\000\002" +
    "\131\005\000\002\132\010\000\002\132\010\000\002\133" +
    "\011\000\002\134\004\000\002\135\003\000\002\135\003" +
    "\000\002\135\003\000\002\135\003\000\002\135\003\000" +
    "\002\135\003\000\002\135\010\000\002\135\010\000\002" +
    "\136\005\000\002\137\005\000\002\140\005\000\002\141" +
    "\003\000\002\141\002\000\002\142\005\000\002\143\007" +
    "\000\002\144\005\000\002\145\003\000\002\145\002\000" +
    "\002\146\003\000\002\146\004\000\002\147\004\000\002" +
    "\150\003\000\002\150\004\000\002\151\005\000\002\151" +
    "\004\000\002\152\004\000\002\153\004\000\002\154\007" +
    "\000\002\154\016\000\002\154\006\000\002\154\015\000" +
    "\002\155\004\000\002\155\003\000\002\156\011\000\002" +
    "\156\005\000\002\157\005\000\002\157\003\000\002\157" +
    "\003\000\002\160\003\000\002\160\003\000\002\160\003" +
    "\000\002\160\003\000\002\160\003\000\002\160\005\000" +
    "\002\160\005\000\002\161\003\000\002\161\005\000\002" +
    "\161\003\000\002\161\003\000\002\161\003\000\002\162" +
    "\006\000\002\162\006\000\002\162\006\000\002\162\006" +
    "\000\002\162\006\000\002\162\006\000\002\163\003\000" +
    "\002\163\004\000\002\164\005\000\002\165\003\000\002" +
    "\165\002\000\002\166\005\000\002\166\004\000\002\167" +
    "\007\000\002\170\005\000\002\170\005\000\002\170\005" +
    "\000\002\170\005\000\002\171\010\000\002\171\010\000" +
    "\002\172\005\000\002\172\005\000\002\173\006\000\002" +
    "\173\006\000\002\174\006\000\002\174\010\000\002\174" +
    "\010\000\002\174\010\000\002\174\010\000\002\175\003" +
    "\000\002\175\002\000\002\176\003\000\002\176\005\000" +
    "\002\177\003\000\002\177\003\000\002\177\003\000\002" +
    "\177\003\000\002\200\004\000\002\201\004\000\002\202" +
    "\003\000\002\202\003\000\002\202\004\000\002\202\004" +
    "\000\002\202\003\000\002\203\004\000\002\204\004\000" +
    "\002\205\003\000\002\205\004\000\002\205\004\000\002" +
    "\205\003\000\002\206\006\000\002\206\006\000\002\207" +
    "\003\000\002\207\005\000\002\207\005\000\002\207\005" +
    "\000\002\210\003\000\002\210\005\000\002\210\005\000" +
    "\002\211\003\000\002\211\005\000\002\211\005\000\002" +
    "\211\005\000\002\212\003\000\002\212\005\000\002\212" +
    "\005\000\002\212\005\000\002\212\005\000\002\213\003" +
    "\000\002\213\005\000\002\213\005\000\002\214\003\000" +
    "\002\214\005\000\002\215\003\000\002\215\005\000\002" +
    "\216\003\000\002\216\005\000\002\217\003\000\002\217" +
    "\005\000\002\220\003\000\002\220\005\000\002\221\003" +
    "\000\002\221\007\000\002\222\003\000\002\222\003\000" +
    "\002\223\005\000\002\224\003\000\002\224\003\000\002" +
    "\224\003\000\002\224\003\000\002\224\003\000\002\224" +
    "\003\000\002\224\003\000\002\224\003\000\002\224\003" +
    "\000\002\224\003\000\002\224\003\000\002\224\003\000" +
    "\002\225\003\000\002\225\003\000\002\225\003\000\002" +
    "\226\003\000\002\226\002\000\002\227\003\000\002\230" +
    "\003\000\002\231\003\000\002\231\003\000\002\231\003" +
    "\000\002\231\003\000\002\231\003\000\002\231\003\000" +
    "\002\231\003\000\002\231\003\000\002\231\003\000\002" +
    "\231\003\000\002\232\007\000\002\233\011" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u02e4\000\116\002\uffa7\004\uffa7\005\uffa7\006\uffa7\007" +
    "\uffa7\010\uffa7\011\uffa7\012\uffa7\013\uffa7\014\uffa7\016\uffa7" +
    "\021\uffa7\023\uffa7\026\uffa7\051\uffa7\055\uffa7\056\uffa7\057" +
    "\uffa7\062\uffa7\063\uffa7\064\uffa7\065\uffa7\066\uffa7\067\uffa7" +
    "\070\uffa7\071\uffa7\072\uffa7\073\uffa7\074\uffa7\075\004\076" +
    "\uffa7\155\uffa7\156\uffa7\157\uffa7\160\uffa7\161\uffa7\162\uffa7" +
    "\163\uffa7\001\002\000\004\163\u02e3\001\002\000\116\002" +
    "\uffa6\004\uffa6\005\uffa6\006\uffa6\007\uffa6\010\uffa6\011\uffa6" +
    "\012\uffa6\013\uffa6\014\uffa6\016\uffa6\021\uffa6\023\uffa6\026" +
    "\uffa6\051\uffa6\055\uffa6\056\uffa6\057\uffa6\062\uffa6\063\uffa6" +
    "\064\uffa6\065\uffa6\066\uffa6\067\uffa6\070\uffa6\071\uffa6\072" +
    "\uffa6\073\uffa6\074\uffa6\075\uffa6\076\uffa6\155\uffa6\156\uffa6" +
    "\157\uffa6\160\uffa6\161\uffa6\162\uffa6\163\uffa6\001\002\000" +
    "\114\002\uffa1\004\uffa1\005\uffa1\006\uffa1\007\uffa1\010\uffa1" +
    "\011\uffa1\012\uffa1\013\uffa1\014\uffa1\016\uffa1\021\uffa1\023" +
    "\uffa1\026\uffa1\051\uffa1\055\uffa1\056\uffa1\057\uffa1\062\015" +
    "\063\uffa1\064\uffa1\065\uffa1\066\uffa1\067\uffa1\070\uffa1\071" +
    "\uffa1\072\uffa1\073\uffa1\074\uffa1\076\uffa1\155\uffa1\156\uffa1" +
    "\157\uffa1\160\uffa1\161\uffa1\162\uffa1\163\uffa1\001\002\000" +
    "\004\002\013\001\002\000\004\002\000\001\002\000\116" +
    "\002\uffa8\004\uffa8\005\uffa8\006\uffa8\007\uffa8\010\uffa8\011" +
    "\uffa8\012\uffa8\013\uffa8\014\uffa8\016\uffa8\021\uffa8\023\uffa8" +
    "\026\uffa8\051\uffa8\055\uffa8\056\uffa8\057\uffa8\062\uffa8\063" +
    "\uffa8\064\uffa8\065\uffa8\066\uffa8\067\uffa8\070\uffa8\071\uffa8" +
    "\072\uffa8\073\uffa8\074\uffa8\075\004\076\uffa8\155\uffa8\156" +
    "\uffa8\157\uffa8\160\uffa8\161\uffa8\162\uffa8\163\uffa8\001\002" +
    "\000\116\002\uffa5\004\uffa5\005\uffa5\006\uffa5\007\uffa5\010" +
    "\uffa5\011\uffa5\012\uffa5\013\uffa5\014\uffa5\016\uffa5\021\uffa5" +
    "\023\uffa5\026\uffa5\051\uffa5\055\uffa5\056\uffa5\057\uffa5\062" +
    "\uffa5\063\uffa5\064\uffa5\065\uffa5\066\uffa5\067\uffa5\070\uffa5" +
    "\071\uffa5\072\uffa5\073\uffa5\074\uffa5\075\uffa5\076\uffa5\155" +
    "\uffa5\156\uffa5\157\uffa5\160\uffa5\161\uffa5\162\uffa5\163\uffa5" +
    "\001\002\000\004\002\001\001\002\000\112\002\uff9e\004" +
    "\uff9e\005\uff9e\006\uff9e\007\uff9e\010\uff9e\011\uff9e\012\uff9e" +
    "\013\uff9e\014\uff9e\016\uff9e\021\uff9e\023\uff9e\026\uff9e\051" +
    "\uff9e\055\uff9e\056\uff9e\057\uff9e\063\024\064\uff9e\065\uff9e" +
    "\066\uff9e\067\uff9e\070\uff9e\071\uff9e\072\uff9e\073\uff9e\074" +
    "\uff9e\076\uff9e\155\uff9e\156\uff9e\157\uff9e\160\uff9e\161\uff9e" +
    "\162\uff9e\163\uff9e\001\002\000\004\163\017\001\002\000" +
    "\112\002\uffa2\004\uffa2\005\uffa2\006\uffa2\007\uffa2\010\uffa2" +
    "\011\uffa2\012\uffa2\013\uffa2\014\uffa2\016\uffa2\021\uffa2\023" +
    "\uffa2\026\uffa2\051\uffa2\055\uffa2\056\uffa2\057\uffa2\063\uffa2" +
    "\064\uffa2\065\uffa2\066\uffa2\067\uffa2\070\uffa2\071\uffa2\072" +
    "\uffa2\073\uffa2\074\uffa2\076\uffa2\155\uffa2\156\uffa2\157\uffa2" +
    "\160\uffa2\161\uffa2\162\uffa2\163\uffa2\001\002\000\010\104" +
    "\uffe0\153\uffe0\154\uffe0\001\002\000\006\104\021\154\022" +
    "\001\002\000\112\002\uffa0\004\uffa0\005\uffa0\006\uffa0\007" +
    "\uffa0\010\uffa0\011\uffa0\012\uffa0\013\uffa0\014\uffa0\016\uffa0" +
    "\021\uffa0\023\uffa0\026\uffa0\051\uffa0\055\uffa0\056\uffa0\057" +
    "\uffa0\063\uffa0\064\uffa0\065\uffa0\066\uffa0\067\uffa0\070\uffa0" +
    "\071\uffa0\072\uffa0\073\uffa0\074\uffa0\076\uffa0\155\uffa0\156" +
    "\uffa0\157\uffa0\160\uffa0\161\uffa0\162\uffa0\163\uffa0\001\002" +
    "\000\004\163\023\001\002\000\010\104\uffdf\153\uffdf\154" +
    "\uffdf\001\002\000\004\163\017\001\002\000\112\002\uff9c" +
    "\004\uff9c\005\uff9c\006\uff9c\007\uff9c\010\uff9c\011\uff9c\012" +
    "\uff9c\013\uff9c\014\uff9c\016\uff9c\021\uff9c\023\uff9c\026\uff9c" +
    "\051\uff9c\055\uff9c\056\uff9c\057\uff9c\063\uff9c\064\uff9c\065" +
    "\uff9c\066\uff9c\067\uff9c\070\uff9c\071\uff9c\072\uff9c\073\uff9c" +
    "\074\uff9c\076\uff9c\155\uff9c\156\uff9c\157\uff9c\160\uff9c\161" +
    "\uff9c\162\uff9c\163\uff9c\001\002\000\112\002\uff9f\004\uff9f" +
    "\005\uff9f\006\uff9f\007\uff9f\010\uff9f\011\uff9f\012\uff9f\013" +
    "\uff9f\014\uff9f\016\uff9f\021\uff9f\023\uff9f\026\uff9f\051\uff9f" +
    "\055\uff9f\056\uff9f\057\uff9f\063\024\064\uff9f\065\uff9f\066" +
    "\uff9f\067\uff9f\070\uff9f\071\uff9f\072\uff9f\073\uff9f\074\uff9f" +
    "\076\uff9f\155\uff9f\156\uff9f\157\uff9f\160\uff9f\161\uff9f\162" +
    "\uff9f\163\uff9f\001\002\000\110\002\ufffe\004\uff98\005\uff98" +
    "\006\uff98\007\uff98\010\uff98\011\uff98\012\uff98\013\uff98\014" +
    "\uff98\016\uff98\021\uff98\023\uff98\026\uff98\051\uff98\055\uff98" +
    "\056\uff98\057\uff98\064\030\065\037\066\034\067\043\070" +
    "\040\071\050\072\041\073\uff98\074\uff98\076\uff98\155\uff98" +
    "\156\uff98\157\uff98\160\uff98\161\uff98\162\uff98\163\uff98\001" +
    "\002\000\104\004\uff95\005\uff95\006\uff95\007\uff95\010\uff95" +
    "\011\uff95\012\uff95\013\uff95\014\uff95\016\uff95\021\uff95\023" +
    "\uff95\026\uff95\051\uff95\055\uff95\056\uff95\057\uff95\064\uff95" +
    "\065\uff95\066\uff95\067\uff95\070\uff95\071\uff95\073\uff95\074" +
    "\uff95\076\uff95\155\uff95\156\uff95\157\uff95\160\uff95\161\uff95" +
    "\162\uff95\163\uff95\001\002\000\110\002\ufffa\004\ufffa\005" +
    "\ufffa\006\ufffa\007\ufffa\010\ufffa\011\ufffa\012\ufffa\013\ufffa" +
    "\014\ufffa\016\ufffa\021\ufffa\023\ufffa\026\ufffa\051\ufffa\055" +
    "\ufffa\056\ufffa\057\ufffa\064\ufffa\065\ufffa\066\ufffa\067\ufffa" +
    "\070\ufffa\071\ufffa\072\ufffa\073\ufffa\074\ufffa\076\ufffa\155" +
    "\ufffa\156\ufffa\157\ufffa\160\ufffa\161\ufffa\162\ufffa\163\ufffa" +
    "\001\002\000\110\002\uffff\004\uff98\005\uff98\006\uff98\007" +
    "\uff98\010\uff98\011\uff98\012\uff98\013\uff98\014\uff98\016\uff98" +
    "\021\uff98\023\uff98\026\uff98\051\uff98\055\uff98\056\uff98\057" +
    "\uff98\064\030\065\037\066\034\067\043\070\040\071\050" +
    "\072\041\073\uff98\074\uff98\076\uff98\155\uff98\156\uff98\157" +
    "\uff98\160\uff98\161\uff98\162\uff98\163\uff98\001\002\000\110" +
    "\002\ufff9\004\ufff9\005\ufff9\006\ufff9\007\ufff9\010\ufff9\011" +
    "\ufff9\012\ufff9\013\ufff9\014\ufff9\016\ufff9\021\ufff9\023\ufff9" +
    "\026\ufff9\051\ufff9\055\ufff9\056\ufff9\057\ufff9\064\ufff9\065" +
    "\ufff9\066\ufff9\067\ufff9\070\ufff9\071\ufff9\072\ufff9\073\ufff9" +
    "\074\ufff9\076\ufff9\155\ufff9\156\ufff9\157\ufff9\160\ufff9\161" +
    "\ufff9\162\ufff9\163\ufff9\001\002\000\104\004\uff92\005\uff92" +
    "\006\uff92\007\uff92\010\uff92\011\uff92\012\uff92\013\uff92\014" +
    "\uff92\016\uff92\021\uff92\023\uff92\026\uff92\051\uff92\055\uff92" +
    "\056\uff92\057\uff92\064\uff92\065\uff92\066\uff92\067\uff92\070" +
    "\uff92\071\uff92\073\uff92\074\uff92\076\uff92\155\uff92\156\uff92" +
    "\157\uff92\160\uff92\161\uff92\162\uff92\163\uff92\001\002\000" +
    "\104\004\uff96\005\uff96\006\uff96\007\uff96\010\uff96\011\uff96" +
    "\012\uff96\013\uff96\014\uff96\016\uff96\021\uff96\023\uff96\026" +
    "\uff96\051\uff96\055\uff96\056\uff96\057\uff96\064\uff96\065\uff96" +
    "\066\uff96\067\uff96\070\uff96\071\uff96\073\uff96\074\uff96\076" +
    "\uff96\155\uff96\156\uff96\157\uff96\160\uff96\161\uff96\162\uff96" +
    "\163\uff96\001\002\000\110\002\ufff8\004\ufff8\005\ufff8\006" +
    "\ufff8\007\ufff8\010\ufff8\011\ufff8\012\ufff8\013\ufff8\014\ufff8" +
    "\016\ufff8\021\ufff8\023\ufff8\026\ufff8\051\ufff8\055\ufff8\056" +
    "\ufff8\057\ufff8\064\ufff8\065\ufff8\066\ufff8\067\ufff8\070\ufff8" +
    "\071\ufff8\072\ufff8\073\ufff8\074\ufff8\076\ufff8\155\ufff8\156" +
    "\ufff8\157\ufff8\160\ufff8\161\ufff8\162\ufff8\163\ufff8\001\002" +
    "\000\104\004\uff93\005\uff93\006\uff93\007\uff93\010\uff93\011" +
    "\uff93\012\uff93\013\uff93\014\uff93\016\uff93\021\uff93\023\uff93" +
    "\026\uff93\051\uff93\055\uff93\056\uff93\057\uff93\064\uff93\065" +
    "\uff93\066\uff93\067\uff93\070\uff93\071\uff93\073\uff93\074\uff93" +
    "\076\uff93\155\uff93\156\uff93\157\uff93\160\uff93\161\uff93\162" +
    "\uff93\163\uff93\001\002\000\104\004\uff90\005\uff90\006\uff90" +
    "\007\uff90\010\uff90\011\uff90\012\uff90\013\uff90\014\uff90\016" +
    "\uff90\021\uff90\023\uff90\026\uff90\051\uff90\055\uff90\056\uff90" +
    "\057\uff90\064\uff90\065\uff90\066\uff90\067\uff90\070\uff90\071" +
    "\uff90\073\uff90\074\uff90\076\uff90\155\uff90\156\uff90\157\uff90" +
    "\160\uff90\161\uff90\162\uff90\163\uff90\001\002\000\004\163" +
    "\u02d7\001\002\000\110\002\ufffc\004\ufffc\005\ufffc\006\ufffc" +
    "\007\ufffc\010\ufffc\011\ufffc\012\ufffc\013\ufffc\014\ufffc\016" +
    "\ufffc\021\ufffc\023\ufffc\026\ufffc\051\ufffc\055\ufffc\056\ufffc" +
    "\057\ufffc\064\ufffc\065\ufffc\066\ufffc\067\ufffc\070\ufffc\071" +
    "\ufffc\072\ufffc\073\ufffc\074\ufffc\076\ufffc\155\ufffc\156\ufffc" +
    "\157\ufffc\160\ufffc\161\ufffc\162\ufffc\163\ufffc\001\002\000" +
    "\104\004\uff91\005\uff91\006\uff91\007\uff91\010\uff91\011\uff91" +
    "\012\uff91\013\uff91\014\uff91\016\uff91\021\uff91\023\uff91\026" +
    "\uff91\051\uff91\055\uff91\056\uff91\057\uff91\064\uff91\065\uff91" +
    "\066\uff91\067\uff91\070\uff91\071\uff91\073\uff91\074\uff91\076" +
    "\uff91\155\uff91\156\uff91\157\uff91\160\uff91\161\uff91\162\uff91" +
    "\163\uff91\001\002\000\104\004\uff99\005\uff99\006\uff99\007" +
    "\uff99\010\uff99\011\uff99\012\uff99\013\uff99\014\uff99\016\uff99" +
    "\021\uff99\023\uff99\026\uff99\051\uff99\055\uff99\056\uff99\057" +
    "\uff99\064\030\065\037\066\034\067\043\070\040\071\050" +
    "\073\uff99\074\uff99\076\uff99\155\uff99\156\uff99\157\uff99\160" +
    "\uff99\161\uff99\162\uff99\163\uff99\001\002\000\004\002\uffa9" +
    "\001\002\000\070\004\100\005\105\006\053\007\065\010" +
    "\113\011\111\012\060\013\055\014\115\016\057\021\054" +
    "\023\056\026\107\051\101\055\114\056\072\057\071\073" +
    "\066\074\077\076\061\155\122\156\051\157\120\160\117" +
    "\161\052\162\067\163\123\001\002\000\110\002\ufffb\004" +
    "\ufffb\005\ufffb\006\ufffb\007\ufffb\010\ufffb\011\ufffb\012\ufffb" +
    "\013\ufffb\014\ufffb\016\ufffb\021\ufffb\023\ufffb\026\ufffb\051" +
    "\ufffb\055\ufffb\056\ufffb\057\ufffb\064\ufffb\065\ufffb\066\ufffb" +
    "\067\ufffb\070\ufffb\071\ufffb\072\ufffb\073\ufffb\074\ufffb\076" +
    "\ufffb\155\ufffb\156\ufffb\157\ufffb\160\ufffb\161\ufffb\162\ufffb" +
    "\163\ufffb\001\002\000\104\004\uff94\005\uff94\006\uff94\007" +
    "\uff94\010\uff94\011\uff94\012\uff94\013\uff94\014\uff94\016\uff94" +
    "\021\uff94\023\uff94\026\uff94\051\uff94\055\uff94\056\uff94\057" +
    "\uff94\064\uff94\065\uff94\066\uff94\067\uff94\070\uff94\071\uff94" +
    "\073\uff94\074\uff94\076\uff94\155\uff94\156\uff94\157\uff94\160" +
    "\uff94\161\uff94\162\uff94\163\uff94\001\002\000\100\077\ufe91" +
    "\101\ufe91\102\ufe91\103\ufe91\104\ufe91\105\ufe91\122\ufe91\123" +
    "\ufe91\124\ufe91\125\ufe91\126\ufe91\127\ufe91\130\ufe91\131\ufe91" +
    "\132\ufe91\133\ufe91\134\ufe91\135\ufe91\136\ufe91\137\ufe91\140" +
    "\ufe91\141\ufe91\142\ufe91\143\ufe91\144\ufe91\147\ufe91\150\ufe91" +
    "\151\ufe91\152\ufe91\153\ufe91\154\ufe91\001\002\000\100\077" +
    "\ufe8d\101\ufe8d\102\ufe8d\103\ufe8d\104\ufe8d\105\ufe8d\122\ufe8d" +
    "\123\ufe8d\124\ufe8d\125\ufe8d\126\ufe8d\127\ufe8d\130\ufe8d\131" +
    "\ufe8d\132\ufe8d\133\ufe8d\134\ufe8d\135\ufe8d\136\ufe8d\137\ufe8d" +
    "\140\ufe8d\141\ufe8d\142\ufe8d\143\ufe8d\144\ufe8d\147\ufe8d\150" +
    "\ufe8d\151\ufe8d\152\ufe8d\153\ufe8d\154\ufe8d\001\002\000\012" +
    "\077\uffbf\102\uffbf\122\uffbf\163\uffbf\001\002\000\010\016" +
    "\u02c6\017\u02c5\020\u02c7\001\002\000\012\077\uffc1\102\uffc1" +
    "\122\uffc1\163\uffc1\001\002\000\012\077\uffb9\102\uffb9\122" +
    "\uffb9\163\uffb9\001\002\000\004\123\u02bf\001\002\000\012" +
    "\077\uffbb\102\uffbb\122\uffbb\163\uffbb\001\002\000\044\051" +
    "\101\073\066\074\077\076\141\135\153\136\142\145\143" +
    "\146\150\147\134\150\156\155\122\156\051\157\120\160" +
    "\117\161\052\162\067\163\200\001\002\000\076\077\uff05" +
    "\101\uff05\103\uff05\104\uff05\105\uff05\122\uff05\123\uff05\124" +
    "\uff05\125\uff05\126\uff05\127\uff05\130\uff05\131\uff05\132\uff05" +
    "\133\uff05\134\uff05\135\uff05\136\uff05\137\uff05\140\uff05\141" +
    "\uff05\142\uff05\143\uff05\144\uff05\147\uff05\150\uff05\151\uff05" +
    "\152\uff05\153\uff05\154\uff05\001\002\000\100\077\uff00\101" +
    "\uff00\102\uff00\103\uff00\104\uff00\105\uff00\122\uff00\123\uff00" +
    "\124\uff00\125\uff00\126\uff00\127\uff00\130\uff00\131\uff00\132" +
    "\uff00\133\uff00\134\uff00\135\uff00\136\uff00\137\uff00\140\uff00" +
    "\141\uff00\142\uff00\143\uff00\144\uff00\147\uff00\150\uff00\151" +
    "\uff00\152\uff00\153\uff00\154\uff00\001\002\000\076\077\uff06" +
    "\101\uff06\103\uff06\104\uff06\105\uff06\122\uff06\123\uff06\124" +
    "\uff06\125\uff06\126\uff06\127\uff06\130\uff06\131\uff06\132\uff06" +
    "\133\uff06\134\uff06\135\uff06\136\uff06\137\uff06\140\uff06\141" +
    "\uff06\142\uff06\143\uff06\144\uff06\147\uff06\150\uff06\151\uff06" +
    "\152\uff06\153\uff06\154\uff06\001\002\000\012\077\uffbe\102" +
    "\uffbe\122\uffbe\163\uffbe\001\002\000\100\077\ufe8e\101\ufe8e" +
    "\102\ufe8e\103\ufe8e\104\ufe8e\105\ufe8e\122\ufe8e\123\ufe8e\124" +
    "\ufe8e\125\ufe8e\126\ufe8e\127\ufe8e\130\ufe8e\131\ufe8e\132\ufe8e" +
    "\133\ufe8e\134\ufe8e\135\ufe8e\136\ufe8e\137\ufe8e\140\ufe8e\141" +
    "\ufe8e\142\ufe8e\143\ufe8e\144\ufe8e\147\ufe8e\150\ufe8e\151\ufe8e" +
    "\152\ufe8e\153\ufe8e\154\ufe8e\001\002\000\100\077\ufe8c\101" +
    "\ufe8c\102\ufe8c\103\ufe8c\104\ufe8c\105\ufe8c\122\ufe8c\123\ufe8c" +
    "\124\ufe8c\125\ufe8c\126\ufe8c\127\ufe8c\130\ufe8c\131\ufe8c\132" +
    "\ufe8c\133\ufe8c\134\ufe8c\135\ufe8c\136\ufe8c\137\ufe8c\140\ufe8c" +
    "\141\ufe8c\142\ufe8c\143\ufe8c\144\ufe8c\147\ufe8c\150\ufe8c\151" +
    "\ufe8c\152\ufe8c\153\ufe8c\154\ufe8c\001\002\000\006\122\uffc5" +
    "\163\uffc5\001\002\000\004\163\u02b8\001\002\000\004\163" +
    "\u029b\001\002\000\010\102\u0144\122\uffc4\163\uffc4\001\002" +
    "\000\100\077\ufe8a\101\ufe8a\102\ufe8a\103\ufe8a\104\ufe8a\105" +
    "\ufe8a\122\ufe8a\123\ufe8a\124\ufe8a\125\ufe8a\126\ufe8a\127\ufe8a" +
    "\130\ufe8a\131\ufe8a\132\ufe8a\133\ufe8a\134\ufe8a\135\ufe8a\136" +
    "\ufe8a\137\ufe8a\140\ufe8a\141\ufe8a\142\ufe8a\143\ufe8a\144\ufe8a" +
    "\147\ufe8a\150\ufe8a\151\ufe8a\152\ufe8a\153\ufe8a\154\ufe8a\001" +
    "\002\000\006\153\u0142\154\u0141\001\002\000\100\077\ufefe" +
    "\101\ufefe\102\ufefe\103\ufefe\104\ufefe\105\ufefe\122\ufefe\123" +
    "\ufefe\124\ufefe\125\ufefe\126\ufefe\127\ufefe\130\ufefe\131\ufefe" +
    "\132\ufefe\133\ufefe\134\ufefe\135\ufefe\136\ufefe\137\ufefe\140" +
    "\ufefe\141\ufefe\142\ufefe\143\ufefe\144\ufefe\147\ufefe\150\ufefe" +
    "\151\ufefe\152\ufefe\153\ufefe\154\ufefe\001\002\000\100\077" +
    "\ufe89\101\ufe89\102\ufe89\103\ufe89\104\ufe89\105\ufe89\122\ufe89" +
    "\123\ufe89\124\ufe89\125\ufe89\126\ufe89\127\ufe89\130\ufe89\131" +
    "\ufe89\132\ufe89\133\ufe89\134\ufe89\135\ufe89\136\ufe89\137\ufe89" +
    "\140\ufe89\141\ufe89\142\ufe89\143\ufe89\144\ufe89\147\ufe89\150" +
    "\ufe89\151\ufe89\152\ufe89\153\ufe89\154\ufe89\001\002\000\012" +
    "\077\uffc2\102\uffc2\122\uffc2\163\uffc2\001\002\000\040\004" +
    "\100\005\105\006\053\007\065\010\113\011\111\012\060" +
    "\013\055\014\115\016\057\021\054\023\056\026\107\064" +
    "\u027c\163\u0279\001\002\000\006\122\uffc3\163\uffc3\001\002" +
    "\000\076\077\uff03\101\uff03\103\uff03\104\uff03\105\uff03\122" +
    "\uff03\123\uff03\124\uff03\125\uff03\126\uff03\127\uff03\130\uff03" +
    "\131\uff03\132\uff03\133\uff03\134\uff03\135\uff03\136\uff03\137" +
    "\uff03\140\uff03\141\uff03\142\uff03\143\uff03\144\uff03\147\uff03" +
    "\150\uff03\151\uff03\152\uff03\153\uff03\154\uff03\001\002\000" +
    "\010\102\u0144\122\uffc6\163\uffc6\001\002\000\012\077\uffc0" +
    "\102\uffc0\122\uffc0\163\uffc0\001\002\000\100\077\ufe8b\101" +
    "\ufe8b\102\ufe8b\103\ufe8b\104\ufe8b\105\ufe8b\122\ufe8b\123\ufe8b" +
    "\124\ufe8b\125\ufe8b\126\ufe8b\127\ufe8b\130\ufe8b\131\ufe8b\132" +
    "\ufe8b\133\ufe8b\134\ufe8b\135\ufe8b\136\ufe8b\137\ufe8b\140\ufe8b" +
    "\141\ufe8b\142\ufe8b\143\ufe8b\144\ufe8b\147\ufe8b\150\ufe8b\151" +
    "\ufe8b\152\ufe8b\153\ufe8b\154\ufe8b\001\002\000\012\077\uffb8" +
    "\102\uffb8\122\uffb8\163\uffb8\001\002\000\076\077\uff04\101" +
    "\uff04\103\uff04\104\uff04\105\uff04\122\uff04\123\uff04\124\uff04" +
    "\125\uff04\126\uff04\127\uff04\130\uff04\131\uff04\132\uff04\133" +
    "\uff04\134\uff04\135\uff04\136\uff04\137\uff04\140\uff04\141\uff04" +
    "\142\uff04\143\uff04\144\uff04\147\uff04\150\uff04\151\uff04\152" +
    "\uff04\153\uff04\154\uff04\001\002\000\012\077\uffbc\102\uffbc" +
    "\122\uffbc\163\uffbc\001\002\000\100\077\ufefd\101\ufefd\102" +
    "\ufefd\103\ufefd\104\ufefd\105\ufefd\122\ufefd\123\ufefd\124\ufefd" +
    "\125\ufefd\126\ufefd\127\ufefd\130\ufefd\131\ufefd\132\ufefd\133" +
    "\ufefd\134\ufefd\135\ufefd\136\ufefd\137\ufefd\140\ufefd\141\ufefd" +
    "\142\ufefd\143\ufefd\144\ufefd\147\ufefd\150\ufefd\151\ufefd\152" +
    "\ufefd\153\ufefd\154\ufefd\001\002\000\012\077\uffbd\102\uffbd" +
    "\122\uffbd\163\uffbd\001\002\000\064\004\100\005\105\006" +
    "\053\007\065\010\113\011\111\012\060\013\055\014\115" +
    "\015\u024e\016\057\021\054\023\056\026\107\051\101\073" +
    "\066\074\077\076\061\155\122\156\051\157\120\160\117" +
    "\161\052\162\067\163\123\001\002\000\012\077\uffba\102" +
    "\uffba\122\uffba\163\uffba\001\002\000\100\077\uff07\101\uff07" +
    "\102\u018f\103\uff07\104\uff07\105\uff07\122\uff07\123\uff07\124" +
    "\uff07\125\uff07\126\uff07\127\uff07\130\uff07\131\uff07\132\uff07" +
    "\133\uff07\134\uff07\135\uff07\136\uff07\137\uff07\140\uff07\141" +
    "\uff07\142\uff07\143\uff07\144\uff07\147\uff07\150\uff07\151\uff07" +
    "\152\uff07\153\uff07\154\uff07\001\002\000\100\077\ufe8f\101" +
    "\ufe8f\102\ufe8f\103\ufe8f\104\ufe8f\105\ufe8f\122\ufe8f\123\ufe8f" +
    "\124\ufe8f\125\ufe8f\126\ufe8f\127\ufe8f\130\ufe8f\131\ufe8f\132" +
    "\ufe8f\133\ufe8f\134\ufe8f\135\ufe8f\136\ufe8f\137\ufe8f\140\ufe8f" +
    "\141\ufe8f\142\ufe8f\143\ufe8f\144\ufe8f\147\ufe8f\150\ufe8f\151" +
    "\ufe8f\152\ufe8f\153\ufe8f\154\ufe8f\001\002\000\100\077\ufe90" +
    "\101\ufe90\102\ufe90\103\ufe90\104\ufe90\105\ufe90\122\ufe90\123" +
    "\ufe90\124\ufe90\125\ufe90\126\ufe90\127\ufe90\130\ufe90\131\ufe90" +
    "\132\ufe90\133\ufe90\134\ufe90\135\ufe90\136\ufe90\137\ufe90\140" +
    "\ufe90\141\ufe90\142\ufe90\143\ufe90\144\ufe90\147\ufe90\150\ufe90" +
    "\151\ufe90\152\ufe90\153\ufe90\154\ufe90\001\002\000\100\077" +
    "\ufefc\101\ufefc\102\ufefc\103\ufefc\104\ufefc\105\ufefc\122\ufefc" +
    "\123\ufefc\124\ufefc\125\ufefc\126\ufefc\127\ufefc\130\ufefc\131" +
    "\ufefc\132\ufefc\133\ufefc\134\ufefc\135\ufefc\136\ufefc\137\ufefc" +
    "\140\ufefc\141\ufefc\142\ufefc\143\ufefc\144\ufefc\147\ufefc\150" +
    "\ufefc\151\ufefc\152\ufefc\153\ufefc\154\ufefc\001\002\000\100" +
    "\077\ufe92\101\ufe92\102\ufe92\103\ufe92\104\ufe92\105\ufe92\122" +
    "\ufe92\123\ufe92\124\ufe92\125\ufe92\126\ufe92\127\ufe92\130\ufe92" +
    "\131\ufe92\132\ufe92\133\ufe92\134\ufe92\135\ufe92\136\ufe92\137" +
    "\ufe92\140\ufe92\141\ufe92\142\ufe92\143\ufe92\144\ufe92\147\ufe92" +
    "\150\ufe92\151\ufe92\152\ufe92\153\ufe92\154\ufe92\001\002\000" +
    "\014\076\203\102\341\153\201\154\204\163\uffb7\001\002" +
    "\000\004\163\126\001\002\000\006\104\uff8d\105\uff8d\001" +
    "\002\000\014\077\uff86\102\uff86\104\uff86\105\uff86\106\uff86" +
    "\001\002\000\006\104\u024c\105\u024b\001\002\000\012\102" +
    "\132\104\uff8b\105\uff8b\106\131\001\002\000\046\051\101" +
    "\073\066\074\077\076\141\100\171\135\153\136\142\145" +
    "\143\146\150\147\134\150\156\155\122\156\051\157\120" +
    "\160\117\161\052\162\067\163\200\001\002\000\004\103" +
    "\133\001\002\000\014\077\uff85\102\uff85\104\uff85\105\uff85" +
    "\106\uff85\001\002\000\044\051\101\073\066\074\077\076" +
    "\141\135\153\136\142\145\143\146\150\147\134\150\156" +
    "\155\122\156\051\157\120\160\117\161\052\162\067\163" +
    "\u0205\001\002\000\032\106\u0243\107\u023d\110\u023e\111\u0248" +
    "\112\u0240\113\u0244\114\u0242\115\u0241\116\u0247\117\u023f\120" +
    "\u023c\121\u0246\001\002\000\066\077\ufed3\101\ufed3\103\ufed3" +
    "\104\ufed3\105\ufed3\122\ufed3\123\ufed3\124\ufed3\125\ufed3\126" +
    "\ufed3\127\ufed3\130\ufed3\131\ufed3\132\ufed3\133\ufed3\134\ufed3" +
    "\135\ufed3\136\ufed3\137\ufed3\140\ufed3\141\ufed3\142\ufed3\143" +
    "\ufed3\144\ufed3\151\ufed3\152\ufed3\001\002\000\060\077\ufec0" +
    "\101\ufec0\103\ufec0\104\ufec0\105\ufec0\122\ufec0\123\ufec0\124" +
    "\ufec0\125\ufec0\126\ufec0\127\ufec0\130\ufec0\131\ufec0\132\ufec0" +
    "\133\ufec0\134\ufec0\135\u020a\136\u020b\141\ufec0\142\ufec0\143" +
    "\ufec0\151\ufec0\152\ufec0\001\002\000\024\077\ufeac\101\ufeac" +
    "\103\ufeac\104\ufeac\105\ufeac\133\u022c\134\ufeac\151\ufeac\152" +
    "\ufeac\001\002\000\072\004\100\005\105\006\053\007\065" +
    "\010\113\011\111\012\060\013\055\014\115\023\056\026" +
    "\107\051\101\073\066\074\077\076\141\135\153\136\142" +
    "\145\143\146\150\147\134\150\156\155\122\156\051\157" +
    "\120\160\117\161\052\162\067\163\200\001\002\000\044" +
    "\051\101\073\066\074\077\076\141\135\153\136\142\145" +
    "\143\146\150\147\134\150\156\155\122\156\051\157\120" +
    "\160\117\161\052\162\067\163\u0205\001\002\000\044\051" +
    "\101\073\066\074\077\076\141\135\153\136\142\145\143" +
    "\146\150\147\134\150\156\155\122\156\051\157\120\160" +
    "\117\161\052\162\067\163\u0205\001\002\000\036\077\ufeb4" +
    "\101\ufeb4\103\ufeb4\104\ufeb4\105\ufeb4\124\u0220\127\u021f\133" +
    "\ufeb4\134\ufeb4\141\ufeb4\142\ufeb4\143\ufeb4\151\ufeb4\152\ufeb4" +
    "\001\002\000\030\077\ufeb0\101\ufeb0\103\ufeb0\104\ufeb0\105" +
    "\ufeb0\133\ufeb0\134\ufeb0\142\ufeb0\143\u021b\151\ufeb0\152\ufeb0" +
    "\001\002\000\066\077\ufeca\101\ufeca\103\ufeca\104\ufeca\105" +
    "\ufeca\122\ufeca\123\ufeca\124\ufeca\125\ufeca\126\ufeca\127\ufeca" +
    "\130\ufeca\131\ufeca\132\ufeca\133\ufeca\134\ufeca\135\ufeca\136" +
    "\ufeca\137\ufeca\140\ufeca\141\ufeca\142\ufeca\143\ufeca\144\ufeca" +
    "\151\ufeca\152\ufeca\001\002\000\016\077\ufea7\101\ufea7\103" +
    "\ufea7\104\ufea7\105\ufea7\152\ufea7\001\002\000\044\051\101" +
    "\073\066\074\077\076\141\135\153\136\142\145\143\146" +
    "\150\147\134\150\156\155\122\156\051\157\120\160\117" +
    "\161\052\162\067\163\u0205\001\002\000\076\077\ufeda\101" +
    "\ufeda\103\ufeda\104\ufeda\105\ufeda\122\ufeda\123\ufeda\124\ufeda" +
    "\125\ufeda\126\ufeda\127\ufeda\130\ufeda\131\ufeda\132\ufeda\133" +
    "\ufeda\134\ufeda\135\ufeda\136\ufeda\137\ufeda\140\ufeda\141\ufeda" +
    "\142\ufeda\143\ufeda\144\ufeda\147\ufeda\150\ufeda\151\ufeda\152" +
    "\ufeda\153\364\154\u0141\001\002\000\130\077\ufefe\101\ufefe" +
    "\102\ufefe\103\ufefe\104\ufefe\105\ufefe\106\ufe98\107\ufe98\110" +
    "\ufe98\111\ufe98\112\ufe98\113\ufe98\114\ufe98\115\ufe98\116\ufe98" +
    "\117\ufe98\120\ufe98\121\ufe98\122\ufefe\123\ufefe\124\ufefe\125" +
    "\ufefe\126\ufefe\127\ufefe\130\ufefe\131\ufefe\132\ufefe\133\ufefe" +
    "\134\ufefe\135\ufefe\136\ufefe\137\ufefe\140\ufefe\141\ufefe\142" +
    "\ufefe\143\ufefe\144\ufefe\147\ufefe\150\ufefe\151\ufefe\152\ufefe" +
    "\153\ufefe\154\ufefe\001\002\000\044\051\101\073\066\074" +
    "\077\076\141\135\153\136\142\145\143\146\150\147\134" +
    "\150\156\155\122\156\051\157\120\160\117\161\052\162" +
    "\067\163\u0205\001\002\000\010\101\uff83\104\uff83\105\uff83" +
    "\001\002\000\066\077\ufec7\101\ufec7\103\ufec7\104\ufec7\105" +
    "\ufec7\122\ufec7\123\ufec7\124\ufec7\125\ufec7\126\ufec7\127\ufec7" +
    "\130\ufec7\131\ufec7\132\ufec7\133\ufec7\134\ufec7\135\ufec7\136" +
    "\ufec7\137\ufec7\140\ufec7\141\ufec7\142\ufec7\143\ufec7\144\ufec7" +
    "\151\ufec7\152\ufec7\001\002\000\044\051\101\073\066\074" +
    "\077\076\141\135\153\136\142\145\143\146\150\147\134" +
    "\150\156\155\122\156\051\157\120\160\117\161\052\162" +
    "\067\163\u0205\001\002\000\006\104\uff8c\105\uff8c\001\002" +
    "\000\010\101\uff84\104\uff84\105\uff84\001\002\000\016\077" +
    "\ufea8\101\ufea8\103\ufea8\104\ufea8\105\ufea8\152\ufea8\001\002" +
    "\000\072\077\ufed9\101\ufed9\103\ufed9\104\ufed9\105\ufed9\122" +
    "\ufed9\123\ufed9\124\ufed9\125\ufed9\126\ufed9\127\ufed9\130\ufed9" +
    "\131\ufed9\132\ufed9\133\ufed9\134\ufed9\135\ufed9\136\ufed9\137" +
    "\ufed9\140\ufed9\141\ufed9\142\ufed9\143\ufed9\144\ufed9\147\ufed9" +
    "\150\ufed9\151\ufed9\152\ufed9\001\002\000\072\077\ufecd\101" +
    "\ufecd\103\ufecd\104\ufecd\105\ufecd\122\ufecd\123\ufecd\124\ufecd" +
    "\125\ufecd\126\ufecd\127\ufecd\130\ufecd\131\ufecd\132\ufecd\133" +
    "\ufecd\134\ufecd\135\ufecd\136\ufecd\137\ufecd\140\ufecd\141\ufecd" +
    "\142\ufecd\143\ufecd\144\ufecd\147\u01e5\150\u01e4\151\ufecd\152" +
    "\ufecd\001\002\000\066\077\ufed0\101\ufed0\103\ufed0\104\ufed0" +
    "\105\ufed0\122\ufed0\123\ufed0\124\ufed0\125\ufed0\126\ufed0\127" +
    "\ufed0\130\ufed0\131\ufed0\132\ufed0\133\ufed0\134\ufed0\135\ufed0" +
    "\136\ufed0\137\ufed0\140\ufed0\141\ufed0\142\ufed0\143\ufed0\144" +
    "\ufed0\151\ufed0\152\ufed0\001\002\000\054\077\ufebc\101\ufebc" +
    "\103\ufebc\104\ufebc\105\ufebc\122\ufebc\123\ufebc\124\ufebc\125" +
    "\ufebc\126\ufebc\127\ufebc\130\u0206\131\u0207\132\u0208\133\ufebc" +
    "\134\ufebc\141\ufebc\142\ufebc\143\ufebc\151\ufebc\152\ufebc\001" +
    "\002\000\022\077\ufeaa\101\ufeaa\103\ufeaa\104\ufeaa\105\ufeaa" +
    "\134\u022a\151\u0229\152\ufeaa\001\002\000\032\077\ufeb2\101" +
    "\ufeb2\103\ufeb2\104\ufeb2\105\ufeb2\133\ufeb2\134\ufeb2\141\u021d" +
    "\142\ufeb2\143\ufeb2\151\ufeb2\152\ufeb2\001\002\000\066\077" +
    "\ufed4\101\ufed4\103\ufed4\104\ufed4\105\ufed4\122\ufed4\123\ufed4" +
    "\124\ufed4\125\ufed4\126\ufed4\127\ufed4\130\ufed4\131\ufed4\132" +
    "\ufed4\133\ufed4\134\ufed4\135\ufed4\136\ufed4\137\ufed4\140\ufed4" +
    "\141\ufed4\142\ufed4\143\ufed4\144\ufed4\151\ufed4\152\ufed4\001" +
    "\002\000\050\051\101\073\066\074\077\076\141\100\171" +
    "\101\uff80\135\153\136\142\145\143\146\150\147\134\150" +
    "\156\155\122\156\051\157\120\160\117\161\052\162\067" +
    "\163\200\001\002\000\026\077\ufeae\101\ufeae\103\ufeae\104" +
    "\ufeae\105\ufeae\133\ufeae\134\ufeae\142\u0219\151\ufeae\152\ufeae" +
    "\001\002\000\016\077\ufe94\101\ufe94\103\ufe94\104\ufe94\105" +
    "\ufe94\152\ufe94\001\002\000\066\077\ufec3\101\ufec3\103\ufec3" +
    "\104\ufec3\105\ufec3\122\ufec3\123\ufec3\124\ufec3\125\ufec3\126" +
    "\ufec3\127\ufec3\130\ufec3\131\ufec3\132\ufec3\133\ufec3\134\ufec3" +
    "\135\ufec3\136\ufec3\137\u020e\140\u020f\141\ufec3\142\ufec3\143" +
    "\ufec3\144\u020d\151\ufec3\152\ufec3\001\002\000\046\077\ufeb7" +
    "\101\ufeb7\103\ufeb7\104\ufeb7\105\ufeb7\122\u0201\123\u0200\124" +
    "\ufeb7\125\u0203\126\u0202\127\ufeb7\133\ufeb7\134\ufeb7\141\ufeb7" +
    "\142\ufeb7\143\ufeb7\151\ufeb7\152\ufeb7\001\002\000\130\077" +
    "\ufefc\101\ufefc\102\ufefc\103\ufefc\104\ufefc\105\ufefc\106\ufe97" +
    "\107\ufe97\110\ufe97\111\ufe97\112\ufe97\113\ufe97\114\ufe97\115" +
    "\ufe97\116\ufe97\117\ufe97\120\ufe97\121\ufe97\122\ufefc\123\ufefc" +
    "\124\ufefc\125\ufefc\126\ufefc\127\ufefc\130\ufefc\131\ufefc\132" +
    "\ufefc\133\ufefc\134\ufefc\135\ufefc\136\ufefc\137\ufefc\140\ufefc" +
    "\141\ufefc\142\ufefc\143\ufefc\144\ufefc\147\ufefc\150\ufefc\151" +
    "\ufefc\152\ufefc\153\ufefc\154\ufefc\001\002\000\072\077\ufed8" +
    "\101\ufed8\103\ufed8\104\ufed8\105\ufed8\122\ufed8\123\ufed8\124" +
    "\ufed8\125\ufed8\126\ufed8\127\ufed8\130\ufed8\131\ufed8\132\ufed8" +
    "\133\ufed8\134\ufed8\135\ufed8\136\ufed8\137\ufed8\140\ufed8\141" +
    "\ufed8\142\ufed8\143\ufed8\144\ufed8\147\ufed8\150\ufed8\151\ufed8" +
    "\152\ufed8\001\002\000\132\076\203\077\ufed7\101\ufed7\102" +
    "\202\103\ufed7\104\ufed7\105\ufed7\106\ufe99\107\ufe99\110\ufe99" +
    "\111\ufe99\112\ufe99\113\ufe99\114\ufe99\115\ufe99\116\ufe99\117" +
    "\ufe99\120\ufe99\121\ufe99\122\ufed7\123\ufed7\124\ufed7\125\ufed7" +
    "\126\ufed7\127\ufed7\130\ufed7\131\ufed7\132\ufed7\133\ufed7\134" +
    "\ufed7\135\ufed7\136\ufed7\137\ufed7\140\ufed7\141\ufed7\142\ufed7" +
    "\143\ufed7\144\ufed7\147\ufed7\150\ufed7\151\ufed7\152\ufed7\153" +
    "\201\154\204\001\002\000\004\163\u01fc\001\002\000\044" +
    "\051\101\073\066\074\077\076\141\135\153\136\142\145" +
    "\143\146\150\147\134\150\156\155\122\156\051\157\120" +
    "\160\117\161\052\162\067\163\200\001\002\000\046\051" +
    "\101\073\066\074\077\076\141\077\ufedd\135\153\136\142" +
    "\145\143\146\150\147\134\150\156\155\122\156\051\157" +
    "\120\160\117\161\052\162\067\163\200\001\002\000\010" +
    "\017\205\020\206\163\207\001\002\000\100\076\217\077" +
    "\ufeeb\101\ufeeb\103\ufeeb\104\ufeeb\105\ufeeb\122\ufeeb\123\ufeeb" +
    "\124\ufeeb\125\ufeeb\126\ufeeb\127\ufeeb\130\ufeeb\131\ufeeb\132" +
    "\ufeeb\133\ufeeb\134\ufeeb\135\ufeeb\136\ufeeb\137\ufeeb\140\ufeeb" +
    "\141\ufeeb\142\ufeeb\143\ufeeb\144\ufeeb\147\ufeeb\150\ufeeb\151" +
    "\ufeeb\152\ufeeb\153\ufeeb\154\ufeeb\001\002\000\076\077\ufeea" +
    "\101\ufeea\103\ufeea\104\ufeea\105\ufeea\122\ufeea\123\ufeea\124" +
    "\ufeea\125\ufeea\126\ufeea\127\ufeea\130\ufeea\131\ufeea\132\ufeea" +
    "\133\ufeea\134\ufeea\135\ufeea\136\ufeea\137\ufeea\140\ufeea\141" +
    "\ufeea\142\ufeea\143\ufeea\144\ufeea\147\ufeea\150\ufeea\151\ufeea" +
    "\152\ufeea\153\ufeea\154\ufeea\001\002\000\132\076\210\077" +
    "\ufee6\101\ufee6\102\ufee6\103\ufee6\104\ufee6\105\ufee6\106\ufee6" +
    "\107\ufee6\110\ufee6\111\ufee6\112\ufee6\113\ufee6\114\ufee6\115" +
    "\ufee6\116\ufee6\117\ufee6\120\ufee6\121\ufee6\122\ufee6\123\ufee6" +
    "\124\ufee6\125\ufee6\126\ufee6\127\ufee6\130\ufee6\131\ufee6\132" +
    "\ufee6\133\ufee6\134\ufee6\135\ufee6\136\ufee6\137\ufee6\140\ufee6" +
    "\141\ufee6\142\ufee6\143\ufee6\144\ufee6\147\ufee6\150\ufee6\151" +
    "\ufee6\152\ufee6\153\ufee6\154\ufee6\001\002\000\046\051\101" +
    "\073\066\074\077\076\141\077\ufedd\135\153\136\142\145" +
    "\143\146\150\147\134\150\156\155\122\156\051\157\120" +
    "\160\117\161\052\162\067\163\200\001\002\000\004\077" +
    "\216\001\002\000\010\077\ufedc\101\ufedc\105\ufedc\001\002" +
    "\000\010\077\ufede\101\ufede\105\214\001\002\000\044\051" +
    "\101\073\066\074\077\076\141\135\153\136\142\145\143" +
    "\146\150\147\134\150\156\155\122\156\051\157\120\160" +
    "\117\161\052\162\067\163\200\001\002\000\010\077\ufedb" +
    "\101\ufedb\105\ufedb\001\002\000\100\077\ufedf\101\ufedf\102" +
    "\ufedf\103\ufedf\104\ufedf\105\ufedf\122\ufedf\123\ufedf\124\ufedf" +
    "\125\ufedf\126\ufedf\127\ufedf\130\ufedf\131\ufedf\132\ufedf\133" +
    "\ufedf\134\ufedf\135\ufedf\136\ufedf\137\ufedf\140\ufedf\141\ufedf" +
    "\142\ufedf\143\ufedf\144\ufedf\147\ufedf\150\ufedf\151\ufedf\152" +
    "\ufedf\153\ufedf\154\ufedf\001\002\000\006\077\uff7c\100\220" +
    "\001\002\000\142\004\100\005\105\006\053\007\065\010" +
    "\113\011\111\012\060\013\055\014\115\016\057\021\054" +
    "\022\230\023\056\024\243\026\107\030\261\031\242\032" +
    "\304\034\263\035\253\036\260\040\262\042\266\043\303" +
    "\044\264\045\302\046\254\047\305\050\234\051\101\053" +
    "\276\064\307\071\233\073\066\074\077\076\061\100\220" +
    "\101\uff79\104\270\147\134\150\156\155\122\156\051\157" +
    "\120\160\117\161\052\162\067\163\226\001\002\000\004" +
    "\077\223\001\002\000\004\077\uff7d\001\002\000\076\077" +
    "\ufee8\101\ufee8\103\ufee8\104\ufee8\105\ufee8\122\ufee8\123\ufee8" +
    "\124\ufee8\125\ufee8\126\ufee8\127\ufee8\130\ufee8\131\ufee8\132" +
    "\ufee8\133\ufee8\134\ufee8\135\ufee8\136\ufee8\137\ufee8\140\ufee8" +
    "\141\ufee8\142\ufee8\143\ufee8\144\ufee8\147\ufee8\150\ufee8\151" +
    "\ufee8\152\ufee8\153\ufee8\154\ufee8\001\002\000\142\004\100" +
    "\005\105\006\053\007\065\010\113\011\111\012\060\013" +
    "\055\014\115\016\057\021\054\022\230\023\056\024\243" +
    "\026\107\030\261\031\242\032\304\034\263\035\253\036" +
    "\260\040\262\042\266\043\303\044\264\045\302\046\254" +
    "\047\305\050\234\051\101\053\276\064\307\071\233\073" +
    "\066\074\077\076\061\100\220\101\uff7a\104\270\147\134" +
    "\150\156\155\122\156\051\157\120\160\117\161\052\162" +
    "\067\163\226\001\002\000\146\004\uff69\005\uff69\006\uff69" +
    "\007\uff69\010\uff69\011\uff69\012\uff69\013\uff69\014\uff69\016" +
    "\uff69\021\uff69\022\uff69\023\uff69\024\uff69\026\uff69\030\uff69" +
    "\031\uff69\032\uff69\034\uff69\035\uff69\036\uff69\037\uff69\040" +
    "\uff69\041\uff69\042\uff69\043\uff69\044\uff69\045\uff69\046\uff69" +
    "\047\uff69\050\uff69\051\uff69\053\uff69\064\uff69\071\uff69\073" +
    "\uff69\074\uff69\076\uff69\100\uff69\101\uff69\104\uff69\147\uff69" +
    "\150\uff69\155\uff69\156\uff69\157\uff69\160\uff69\161\uff69\162" +
    "\uff69\163\uff69\001\002\000\052\076\203\102\341\106\ufe99" +
    "\107\ufe99\110\ufe99\111\ufe99\112\ufe99\113\ufe99\114\ufe99\115" +
    "\ufe99\116\ufe99\117\ufe99\120\ufe99\121\ufe99\147\ufed7\150\ufed7" +
    "\152\u012e\153\201\154\u012f\163\uffb7\001\002\000\146\004" +
    "\uff77\005\uff77\006\uff77\007\uff77\010\uff77\011\uff77\012\uff77" +
    "\013\uff77\014\uff77\016\uff77\021\uff77\022\uff77\023\uff77\024" +
    "\uff77\026\uff77\030\uff77\031\uff77\032\uff77\034\uff77\035\uff77" +
    "\036\uff77\037\uff77\040\uff77\041\uff77\042\uff77\043\uff77\044" +
    "\uff77\045\uff77\046\uff77\047\uff77\050\uff77\051\uff77\053\uff77" +
    "\064\uff77\071\uff77\073\uff77\074\uff77\076\uff77\100\uff77\101" +
    "\uff77\104\uff77\147\uff77\150\uff77\155\uff77\156\uff77\157\uff77" +
    "\160\uff77\161\uff77\162\uff77\163\uff77\001\002\000\004\076" +
    "\u01f7\001\002\000\004\104\u01f6\001\002\000\150\004\uff55" +
    "\005\uff55\006\uff55\007\uff55\010\uff55\011\uff55\012\uff55\013" +
    "\uff55\014\uff55\016\uff55\021\uff55\022\uff55\023\uff55\024\uff55" +
    "\026\uff55\030\uff55\031\uff55\032\uff55\033\uff55\034\uff55\035" +
    "\uff55\036\uff55\037\uff55\040\uff55\041\uff55\042\uff55\043\uff55" +
    "\044\uff55\045\uff55\046\uff55\047\uff55\050\uff55\051\uff55\053" +
    "\uff55\064\uff55\071\uff55\073\uff55\074\uff55\076\uff55\100\uff55" +
    "\101\uff55\104\uff55\147\uff55\150\uff55\155\uff55\156\uff55\157" +
    "\uff55\160\uff55\161\uff55\162\uff55\163\uff55\001\002\000\062" +
    "\004\100\005\105\006\053\007\065\010\113\011\111\012" +
    "\060\013\055\014\115\016\057\021\054\023\056\026\107" +
    "\051\101\073\066\074\077\076\061\155\122\156\051\157" +
    "\120\160\117\161\052\162\067\163\123\001\002\000\006" +
    "\076\u01e8\100\u01e7\001\002\000\004\104\u01e6\001\002\000" +
    "\150\004\uff61\005\uff61\006\uff61\007\uff61\010\uff61\011\uff61" +
    "\012\uff61\013\uff61\014\uff61\016\uff61\021\uff61\022\uff61\023" +
    "\uff61\024\uff61\026\uff61\030\uff61\031\uff61\032\uff61\033\uff61" +
    "\034\uff61\035\uff61\036\uff61\037\uff61\040\uff61\041\uff61\042" +
    "\uff61\043\uff61\044\uff61\045\uff61\046\uff61\047\uff61\050\uff61" +
    "\051\uff61\053\uff61\064\uff61\071\uff61\073\uff61\074\uff61\076" +
    "\uff61\100\uff61\101\uff61\104\uff61\147\uff61\150\uff61\155\uff61" +
    "\156\uff61\157\uff61\160\uff61\161\uff61\162\uff61\163\uff61\001" +
    "\002\000\006\147\u01e5\150\u01e4\001\002\000\010\077\uff2b" +
    "\104\uff2b\105\uff2b\001\002\000\150\004\uff5a\005\uff5a\006" +
    "\uff5a\007\uff5a\010\uff5a\011\uff5a\012\uff5a\013\uff5a\014\uff5a" +
    "\016\uff5a\021\uff5a\022\uff5a\023\uff5a\024\uff5a\026\uff5a\030" +
    "\uff5a\031\uff5a\032\uff5a\033\uff5a\034\uff5a\035\uff5a\036\uff5a" +
    "\037\uff5a\040\uff5a\041\uff5a\042\uff5a\043\uff5a\044\uff5a\045" +
    "\uff5a\046\uff5a\047\uff5a\050\uff5a\051\uff5a\053\uff5a\064\uff5a" +
    "\071\uff5a\073\uff5a\074\uff5a\076\uff5a\100\uff5a\101\uff5a\104" +
    "\uff5a\147\uff5a\150\uff5a\155\uff5a\156\uff5a\157\uff5a\160\uff5a" +
    "\161\uff5a\162\uff5a\163\uff5a\001\002\000\004\104\u01e3\001" +
    "\002\000\030\051\101\073\066\074\077\076\061\155\122" +
    "\156\051\157\120\160\117\161\052\162\067\163\u013e\001" +
    "\002\000\150\004\uff58\005\uff58\006\uff58\007\uff58\010\uff58" +
    "\011\uff58\012\uff58\013\uff58\014\uff58\016\uff58\021\uff58\022" +
    "\uff58\023\uff58\024\uff58\026\uff58\030\uff58\031\uff58\032\uff58" +
    "\033\uff58\034\uff58\035\uff58\036\uff58\037\uff58\040\uff58\041" +
    "\uff58\042\uff58\043\uff58\044\uff58\045\uff58\046\uff58\047\uff58" +
    "\050\uff58\051\uff58\053\uff58\064\uff58\071\uff58\073\uff58\074" +
    "\uff58\076\uff58\100\uff58\101\uff58\104\uff58\147\uff58\150\uff58" +
    "\155\uff58\156\uff58\157\uff58\160\uff58\161\uff58\162\uff58\163" +
    "\uff58\001\002\000\014\077\uff29\104\uff29\105\uff29\147\ufed8" +
    "\150\ufed8\001\002\000\004\104\u01e0\001\002\000\150\004" +
    "\uff5f\005\uff5f\006\uff5f\007\uff5f\010\uff5f\011\uff5f\012\uff5f" +
    "\013\uff5f\014\uff5f\016\uff5f\021\uff5f\022\uff5f\023\uff5f\024" +
    "\uff5f\026\uff5f\030\uff5f\031\uff5f\032\uff5f\033\uff5f\034\uff5f" +
    "\035\uff5f\036\uff5f\037\uff5f\040\uff5f\041\uff5f\042\uff5f\043" +
    "\uff5f\044\uff5f\045\uff5f\046\uff5f\047\uff5f\050\uff5f\051\uff5f" +
    "\053\uff5f\064\uff5f\071\uff5f\073\uff5f\074\uff5f\076\uff5f\100" +
    "\uff5f\101\uff5f\104\uff5f\147\uff5f\150\uff5f\155\uff5f\156\uff5f" +
    "\157\uff5f\160\uff5f\161\uff5f\162\uff5f\163\uff5f\001\002\000" +
    "\150\004\uff56\005\uff56\006\uff56\007\uff56\010\uff56\011\uff56" +
    "\012\uff56\013\uff56\014\uff56\016\uff56\021\uff56\022\uff56\023" +
    "\uff56\024\uff56\026\uff56\030\uff56\031\uff56\032\uff56\033\uff56" +
    "\034\uff56\035\uff56\036\uff56\037\uff56\040\uff56\041\uff56\042" +
    "\uff56\043\uff56\044\uff56\045\uff56\046\uff56\047\uff56\050\uff56" +
    "\051\uff56\053\uff56\064\uff56\071\uff56\073\uff56\074\uff56\076" +
    "\uff56\100\uff56\101\uff56\104\uff56\147\uff56\150\uff56\155\uff56" +
    "\156\uff56\157\uff56\160\uff56\161\uff56\162\uff56\163\uff56\001" +
    "\002\000\150\004\uff54\005\uff54\006\uff54\007\uff54\010\uff54" +
    "\011\uff54\012\uff54\013\uff54\014\uff54\016\uff54\021\uff54\022" +
    "\uff54\023\uff54\024\uff54\026\uff54\030\uff54\031\uff54\032\uff54" +
    "\033\uff54\034\uff54\035\uff54\036\uff54\037\uff54\040\uff54\041" +
    "\uff54\042\uff54\043\uff54\044\uff54\045\uff54\046\uff54\047\uff54" +
    "\050\uff54\051\uff54\053\uff54\064\uff54\071\uff54\073\uff54\074" +
    "\uff54\076\uff54\100\uff54\101\uff54\104\uff54\147\uff54\150\uff54" +
    "\155\uff54\156\uff54\157\uff54\160\uff54\161\uff54\162\uff54\163" +
    "\uff54\001\002\000\146\004\uff6c\005\uff6c\006\uff6c\007\uff6c" +
    "\010\uff6c\011\uff6c\012\uff6c\013\uff6c\014\uff6c\016\uff6c\021" +
    "\uff6c\022\uff6c\023\uff6c\024\uff6c\026\uff6c\030\uff6c\031\uff6c" +
    "\032\uff6c\034\uff6c\035\uff6c\036\uff6c\037\uff6c\040\uff6c\041" +
    "\uff6c\042\uff6c\043\uff6c\044\uff6c\045\uff6c\046\uff6c\047\uff6c" +
    "\050\uff6c\051\uff6c\053\uff6c\064\uff6c\071\uff6c\073\uff6c\074" +
    "\uff6c\076\uff6c\100\uff6c\101\uff6c\104\uff6c\147\uff6c\150\uff6c" +
    "\155\uff6c\156\uff6c\157\uff6c\160\uff6c\161\uff6c\162\uff6c\163" +
    "\uff6c\001\002\000\004\076\u01dd\001\002\000\010\025\u0168" +
    "\034\u01d1\100\220\001\002\000\150\004\uff60\005\uff60\006" +
    "\uff60\007\uff60\010\uff60\011\uff60\012\uff60\013\uff60\014\uff60" +
    "\016\uff60\021\uff60\022\uff60\023\uff60\024\uff60\026\uff60\030" +
    "\uff60\031\uff60\032\uff60\033\uff60\034\uff60\035\uff60\036\uff60" +
    "\037\uff60\040\uff60\041\uff60\042\uff60\043\uff60\044\uff60\045" +
    "\uff60\046\uff60\047\uff60\050\uff60\051\uff60\053\uff60\064\uff60" +
    "\071\uff60\073\uff60\074\uff60\076\uff60\100\uff60\101\uff60\104" +
    "\uff60\147\uff60\150\uff60\155\uff60\156\uff60\157\uff60\160\uff60" +
    "\161\uff60\162\uff60\163\uff60\001\002\000\004\163\126\001" +
    "\002\000\146\004\uff6d\005\uff6d\006\uff6d\007\uff6d\010\uff6d" +
    "\011\uff6d\012\uff6d\013\uff6d\014\uff6d\016\uff6d\021\uff6d\022" +
    "\uff6d\023\uff6d\024\uff6d\026\uff6d\030\uff6d\031\uff6d\032\uff6d" +
    "\034\uff6d\035\uff6d\036\uff6d\037\uff6d\040\uff6d\041\uff6d\042" +
    "\uff6d\043\uff6d\044\uff6d\045\uff6d\046\uff6d\047\uff6d\050\uff6d" +
    "\051\uff6d\053\uff6d\064\uff6d\071\uff6d\073\uff6d\074\uff6d\076" +
    "\uff6d\100\uff6d\101\uff6d\104\uff6d\147\uff6d\150\uff6d\155\uff6d" +
    "\156\uff6d\157\uff6d\160\uff6d\161\uff6d\162\uff6d\163\uff6d\001" +
    "\002\000\004\076\u01bb\001\002\000\004\104\u01ba\001\002" +
    "\000\102\022\230\024\243\030\261\031\242\032\304\034" +
    "\263\035\253\036\260\040\262\042\266\043\303\044\264" +
    "\045\302\046\254\047\305\050\234\051\101\053\276\073" +
    "\066\074\077\076\061\100\220\104\270\147\134\150\156" +
    "\155\122\156\051\157\120\160\117\161\052\162\067\163" +
    "\u0125\001\002\000\004\076\u01ae\001\002\000\046\051\101" +
    "\073\066\074\077\076\141\104\ufe95\135\153\136\142\145" +
    "\143\146\150\147\134\150\156\155\122\156\051\157\120" +
    "\160\117\161\052\162\067\163\200\001\002\000\150\004" +
    "\uff59\005\uff59\006\uff59\007\uff59\010\uff59\011\uff59\012\uff59" +
    "\013\uff59\014\uff59\016\uff59\021\uff59\022\uff59\023\uff59\024" +
    "\uff59\026\uff59\030\uff59\031\uff59\032\uff59\033\uff59\034\uff59" +
    "\035\uff59\036\uff59\037\uff59\040\uff59\041\uff59\042\uff59\043" +
    "\uff59\044\uff59\045\uff59\046\uff59\047\uff59\050\uff59\051\uff59" +
    "\053\uff59\064\uff59\071\uff59\073\uff59\074\uff59\076\uff59\100" +
    "\uff59\101\uff59\104\uff59\147\uff59\150\uff59\155\uff59\156\uff59" +
    "\157\uff59\160\uff59\161\uff59\162\uff59\163\uff59\001\002\000" +
    "\006\104\uff21\163\u0198\001\002\000\150\004\uff53\005\uff53" +
    "\006\uff53\007\uff53\010\uff53\011\uff53\012\uff53\013\uff53\014" +
    "\uff53\016\uff53\021\uff53\022\uff53\023\uff53\024\uff53\026\uff53" +
    "\030\uff53\031\uff53\032\uff53\033\uff53\034\uff53\035\uff53\036" +
    "\uff53\037\uff53\040\uff53\041\uff53\042\uff53\043\uff53\044\uff53" +
    "\045\uff53\046\uff53\047\uff53\050\uff53\051\uff53\053\uff53\064" +
    "\uff53\071\uff53\073\uff53\074\uff53\076\uff53\100\uff53\101\uff53" +
    "\104\uff53\147\uff53\150\uff53\155\uff53\156\uff53\157\uff53\160" +
    "\uff53\161\uff53\162\uff53\163\uff53\001\002\000\150\004\uff33" +
    "\005\uff33\006\uff33\007\uff33\010\uff33\011\uff33\012\uff33\013" +
    "\uff33\014\uff33\016\uff33\021\uff33\022\uff33\023\uff33\024\uff33" +
    "\026\uff33\030\uff33\031\uff33\032\uff33\033\uff33\034\uff33\035" +
    "\uff33\036\uff33\037\uff33\040\uff33\041\uff33\042\uff33\043\uff33" +
    "\044\uff33\045\uff33\046\uff33\047\uff33\050\uff33\051\uff33\053" +
    "\uff33\064\uff33\071\uff33\073\uff33\074\uff33\076\uff33\100\uff33" +
    "\101\uff33\104\uff33\147\uff33\150\uff33\155\uff33\156\uff33\157" +
    "\uff33\160\uff33\161\uff33\162\uff33\163\uff33\001\002\000\004" +
    "\101\u01a9\001\002\000\010\077\uff2d\104\uff2d\105\uff2d\001" +
    "\002\000\146\004\uff6a\005\uff6a\006\uff6a\007\uff6a\010\uff6a" +
    "\011\uff6a\012\uff6a\013\uff6a\014\uff6a\016\uff6a\021\uff6a\022" +
    "\uff6a\023\uff6a\024\uff6a\026\uff6a\030\uff6a\031\uff6a\032\uff6a" +
    "\034\uff6a\035\uff6a\036\uff6a\037\uff6a\040\uff6a\041\uff6a\042" +
    "\uff6a\043\uff6a\044\uff6a\045\uff6a\046\uff6a\047\uff6a\050\uff6a" +
    "\051\uff6a\053\uff6a\064\uff6a\071\uff6a\073\uff6a\074\uff6a\076" +
    "\uff6a\100\uff6a\101\uff6a\104\uff6a\147\uff6a\150\uff6a\155\uff6a" +
    "\156\uff6a\157\uff6a\160\uff6a\161\uff6a\162\uff6a\163\uff6a\001" +
    "\002\000\022\077\uff28\102\ufefd\104\uff28\105\uff28\147\ufefd" +
    "\150\ufefd\153\ufefd\154\ufefd\001\002\000\012\147\ufeda\150" +
    "\ufeda\153\u0142\154\u0128\001\002\000\004\052\u019b\001\002" +
    "\000\150\004\uff57\005\uff57\006\uff57\007\uff57\010\uff57\011" +
    "\uff57\012\uff57\013\uff57\014\uff57\016\uff57\021\uff57\022\uff57" +
    "\023\uff57\024\uff57\026\uff57\030\uff57\031\uff57\032\uff57\033" +
    "\uff57\034\uff57\035\uff57\036\uff57\037\uff57\040\uff57\041\uff57" +
    "\042\uff57\043\uff57\044\uff57\045\uff57\046\uff57\047\uff57\050" +
    "\uff57\051\uff57\053\uff57\064\uff57\071\uff57\073\uff57\074\uff57" +
    "\076\uff57\100\uff57\101\uff57\104\uff57\147\uff57\150\uff57\155" +
    "\uff57\156\uff57\157\uff57\160\uff57\161\uff57\162\uff57\163\uff57" +
    "\001\002\000\146\004\uff6b\005\uff6b\006\uff6b\007\uff6b\010" +
    "\uff6b\011\uff6b\012\uff6b\013\uff6b\014\uff6b\016\uff6b\021\uff6b" +
    "\022\uff6b\023\uff6b\024\uff6b\026\uff6b\030\uff6b\031\uff6b\032" +
    "\uff6b\034\uff6b\035\uff6b\036\uff6b\037\uff6b\040\uff6b\041\uff6b" +
    "\042\uff6b\043\uff6b\044\uff6b\045\uff6b\046\uff6b\047\uff6b\050" +
    "\uff6b\051\uff6b\053\uff6b\064\uff6b\071\uff6b\073\uff6b\074\uff6b" +
    "\076\uff6b\100\uff6b\101\uff6b\104\uff6b\147\uff6b\150\uff6b\155" +
    "\uff6b\156\uff6b\157\uff6b\160\uff6b\161\uff6b\162\uff6b\163\uff6b" +
    "\001\002\000\146\004\uff67\005\uff67\006\uff67\007\uff67\010" +
    "\uff67\011\uff67\012\uff67\013\uff67\014\uff67\016\uff67\021\uff67" +
    "\022\uff67\023\uff67\024\uff67\026\uff67\030\uff67\031\uff67\032" +
    "\uff67\034\uff67\035\uff67\036\uff67\037\uff67\040\uff67\041\uff67" +
    "\042\uff67\043\uff67\044\uff67\045\uff67\046\uff67\047\uff67\050" +
    "\uff67\051\uff67\053\uff67\064\uff67\071\uff67\073\uff67\074\uff67" +
    "\076\uff67\100\uff67\101\uff67\104\uff67\147\uff67\150\uff67\155" +
    "\uff67\156\uff67\157\uff67\160\uff67\161\uff67\162\uff67\163\uff67" +
    "\001\002\000\004\100\220\001\002\000\006\104\uff21\163" +
    "\u0198\001\002\000\004\076\u0148\001\002\000\004\050\326" +
    "\001\002\000\150\004\uff5d\005\uff5d\006\uff5d\007\uff5d\010" +
    "\uff5d\011\uff5d\012\uff5d\013\uff5d\014\uff5d\016\uff5d\021\uff5d" +
    "\022\uff5d\023\uff5d\024\uff5d\026\uff5d\030\uff5d\031\uff5d\032" +
    "\uff5d\033\uff5d\034\uff5d\035\uff5d\036\uff5d\037\uff5d\040\uff5d" +
    "\041\uff5d\042\uff5d\043\uff5d\044\uff5d\045\uff5d\046\uff5d\047" +
    "\uff5d\050\uff5d\051\uff5d\053\uff5d\064\uff5d\071\uff5d\073\uff5d" +
    "\074\uff5d\076\uff5d\100\uff5d\101\uff5d\104\uff5d\147\uff5d\150" +
    "\uff5d\155\uff5d\156\uff5d\157\uff5d\160\uff5d\161\uff5d\162\uff5d" +
    "\163\uff5d\001\002\000\062\004\100\005\105\006\053\007" +
    "\065\010\113\011\111\012\060\013\055\014\115\016\057" +
    "\021\054\023\056\026\107\051\101\073\066\074\077\076" +
    "\061\155\122\156\051\157\120\160\117\161\052\162\067" +
    "\163\123\001\002\000\010\077\uff2c\104\uff2c\105\uff2c\001" +
    "\002\000\146\004\uff68\005\uff68\006\uff68\007\uff68\010\uff68" +
    "\011\uff68\012\uff68\013\uff68\014\uff68\016\uff68\021\uff68\022" +
    "\uff68\023\uff68\024\uff68\026\uff68\030\uff68\031\uff68\032\uff68" +
    "\034\uff68\035\uff68\036\uff68\037\uff68\040\uff68\041\uff68\042" +
    "\uff68\043\uff68\044\uff68\045\uff68\046\uff68\047\uff68\050\uff68" +
    "\051\uff68\053\uff68\064\uff68\071\uff68\073\uff68\074\uff68\076" +
    "\uff68\100\uff68\101\uff68\104\uff68\147\uff68\150\uff68\155\uff68" +
    "\156\uff68\157\uff68\160\uff68\161\uff68\162\uff68\163\uff68\001" +
    "\002\000\146\004\uff71\005\uff71\006\uff71\007\uff71\010\uff71" +
    "\011\uff71\012\uff71\013\uff71\014\uff71\016\uff71\021\uff71\022" +
    "\uff71\023\uff71\024\uff71\026\uff71\030\uff71\031\uff71\032\uff71" +
    "\034\uff71\035\uff71\036\uff71\037\uff71\040\uff71\041\uff71\042" +
    "\uff71\043\uff71\044\uff71\045\uff71\046\uff71\047\uff71\050\uff71" +
    "\051\uff71\053\uff71\064\uff71\071\uff71\073\uff71\074\uff71\076" +
    "\uff71\100\uff71\101\uff71\104\uff71\147\uff71\150\uff71\155\uff71" +
    "\156\uff71\157\uff71\160\uff71\161\uff71\162\uff71\163\uff71\001" +
    "\002\000\014\077\uff2a\104\uff2a\105\uff2a\147\ufed9\150\ufed9" +
    "\001\002\000\150\004\uff5e\005\uff5e\006\uff5e\007\uff5e\010" +
    "\uff5e\011\uff5e\012\uff5e\013\uff5e\014\uff5e\016\uff5e\021\uff5e" +
    "\022\uff5e\023\uff5e\024\uff5e\026\uff5e\030\uff5e\031\uff5e\032" +
    "\uff5e\033\uff5e\034\uff5e\035\uff5e\036\uff5e\037\uff5e\040\uff5e" +
    "\041\uff5e\042\uff5e\043\uff5e\044\uff5e\045\uff5e\046\uff5e\047" +
    "\uff5e\050\uff5e\051\uff5e\053\uff5e\064\uff5e\071\uff5e\073\uff5e" +
    "\074\uff5e\076\uff5e\100\uff5e\101\uff5e\104\uff5e\147\uff5e\150" +
    "\uff5e\155\uff5e\156\uff5e\157\uff5e\160\uff5e\161\uff5e\162\uff5e" +
    "\163\uff5e\001\002\000\150\004\uff50\005\uff50\006\uff50\007" +
    "\uff50\010\uff50\011\uff50\012\uff50\013\uff50\014\uff50\016\uff50" +
    "\021\uff50\022\uff50\023\uff50\024\uff50\026\uff50\030\uff50\031" +
    "\uff50\032\uff50\033\uff50\034\uff50\035\uff50\036\uff50\037\uff50" +
    "\040\uff50\041\uff50\042\uff50\043\uff50\044\uff50\045\uff50\046" +
    "\uff50\047\uff50\050\uff50\051\uff50\053\uff50\064\uff50\071\uff50" +
    "\073\uff50\074\uff50\076\uff50\100\uff50\101\uff50\104\uff50\147" +
    "\uff50\150\uff50\155\uff50\156\uff50\157\uff50\160\uff50\161\uff50" +
    "\162\uff50\163\uff50\001\002\000\004\163\126\001\002\000" +
    "\006\104\uff89\105\uff89\001\002\000\006\104\uff6e\105\324" +
    "\001\002\000\012\102\132\104\uff88\105\uff88\106\322\001" +
    "\002\000\046\051\101\073\066\074\077\076\141\100\171" +
    "\135\153\136\142\145\143\146\150\147\134\150\156\155" +
    "\122\156\051\157\120\160\117\161\052\162\067\163\200" +
    "\001\002\000\006\104\uff87\105\uff87\001\002\000\004\163" +
    "\126\001\002\000\006\104\uff8a\105\uff8a\001\002\000\006" +
    "\076\330\100\327\001\002\000\032\030\u0114\051\101\073" +
    "\066\074\077\076\u010f\155\122\156\051\157\120\160\117" +
    "\161\052\162\067\163\u010d\001\002\000\074\004\100\005" +
    "\105\006\053\007\065\010\113\011\111\012\060\013\055" +
    "\014\115\016\057\021\054\023\056\026\107\051\101\064" +
    "\307\071\233\073\066\074\077\076\061\104\uff43\147\134" +
    "\150\156\155\122\156\051\157\120\160\117\161\052\162" +
    "\067\163\337\001\002\000\010\077\uff3d\104\uff3d\105\uff3d" +
    "\001\002\000\004\104\uff41\001\002\000\012\147\ufeda\150" +
    "\ufeda\153\u0142\154\365\001\002\000\004\104\u0103\001\002" +
    "\000\006\104\uff42\105\360\001\002\000\004\104\uff44\001" +
    "\002\000\050\076\203\102\341\106\ufe99\107\ufe99\110\ufe99" +
    "\111\ufe99\112\ufe99\113\ufe99\114\ufe99\115\ufe99\116\ufe99\117" +
    "\ufe99\120\ufe99\121\ufe99\147\ufed7\150\ufed7\153\201\154\343" +
    "\163\uffb7\001\002\000\004\163\017\001\002\000\046\051" +
    "\101\073\066\074\077\076\141\103\353\135\153\136\142" +
    "\145\143\146\150\147\134\150\156\155\122\156\051\157" +
    "\120\160\117\161\052\162\067\163\200\001\002\000\010" +
    "\102\350\122\uffb3\163\uffb3\001\002\000\010\017\344\020" +
    "\206\163\207\001\002\000\014\076\345\147\ufeeb\150\ufeeb" +
    "\153\ufeeb\154\ufeeb\001\002\000\006\077\uff7c\100\220\001" +
    "\002\000\004\077\347\001\002\000\020\077\uff26\104\uff26" +
    "\105\uff26\147\ufee8\150\ufee8\153\ufee8\154\ufee8\001\002\000" +
    "\004\103\351\001\002\000\104\077\ufef0\100\ufef0\101\ufef0" +
    "\102\ufef0\103\ufef0\104\ufef0\105\ufef0\122\ufef0\123\ufef0\124" +
    "\ufef0\125\ufef0\126\ufef0\127\ufef0\130\ufef0\131\ufef0\132\ufef0" +
    "\133\ufef0\134\ufef0\135\ufef0\136\ufef0\137\ufef0\140\ufef0\141" +
    "\ufef0\142\ufef0\143\ufef0\144\ufef0\147\ufef0\150\ufef0\151\ufef0" +
    "\152\ufef0\153\ufef0\154\ufef0\163\ufef0\001\002\000\004\103" +
    "\354\001\002\000\104\077\ufeef\100\ufeef\101\ufeef\102\ufeef" +
    "\103\ufeef\104\ufeef\105\ufeef\122\ufeef\123\ufeef\124\ufeef\125" +
    "\ufeef\126\ufeef\127\ufeef\130\ufeef\131\ufeef\132\ufeef\133\ufeef" +
    "\134\ufeef\135\ufeef\136\ufeef\137\ufeef\140\ufeef\141\ufeef\142" +
    "\ufeef\143\ufeef\144\ufeef\147\ufeef\150\ufeef\151\ufeef\152\ufeef" +
    "\153\ufeef\154\ufeef\163\ufeef\001\002\000\130\077\ufee5\101" +
    "\ufee5\102\ufee5\103\ufee5\104\ufee5\105\ufee5\106\ufee5\107\ufee5" +
    "\110\ufee5\111\ufee5\112\ufee5\113\ufee5\114\ufee5\115\ufee5\116" +
    "\ufee5\117\ufee5\120\ufee5\121\ufee5\122\ufee5\123\ufee5\124\ufee5" +
    "\125\ufee5\126\ufee5\127\ufee5\130\ufee5\131\ufee5\132\ufee5\133" +
    "\ufee5\134\ufee5\135\ufee5\136\ufee5\137\ufee5\140\ufee5\141\ufee5" +
    "\142\ufee5\143\ufee5\144\ufee5\147\ufee5\150\ufee5\151\ufee5\152" +
    "\ufee5\153\ufee5\154\ufee5\001\002\000\006\153\356\154\022" +
    "\001\002\000\004\163\357\001\002\000\006\122\uffb6\163" +
    "\uffb6\001\002\000\034\051\101\073\066\074\077\076\061" +
    "\147\134\150\156\155\122\156\051\157\120\160\117\161" +
    "\052\162\067\163\362\001\002\000\010\077\uff3c\104\uff3c" +
    "\105\uff3c\001\002\000\046\076\203\102\202\106\ufe99\107" +
    "\ufe99\110\ufe99\111\ufe99\112\ufe99\113\ufe99\114\ufe99\115\ufe99" +
    "\116\ufe99\117\ufe99\120\ufe99\121\ufe99\147\ufed7\150\ufed7\153" +
    "\201\154\343\001\002\000\012\147\ufeda\150\ufeda\153\364" +
    "\154\365\001\002\000\004\163\377\001\002\000\010\017" +
    "\366\020\367\163\370\001\002\000\014\076\374\147\ufeed" +
    "\150\ufeed\153\ufeed\154\ufeed\001\002\000\076\077\ufeec\101" +
    "\ufeec\103\ufeec\104\ufeec\105\ufeec\122\ufeec\123\ufeec\124\ufeec" +
    "\125\ufeec\126\ufeec\127\ufeec\130\ufeec\131\ufeec\132\ufeec\133" +
    "\ufeec\134\ufeec\135\ufeec\136\ufeec\137\ufeec\140\ufeec\141\ufeec" +
    "\142\ufeec\143\ufeec\144\ufeec\147\ufeec\150\ufeec\151\ufeec\152" +
    "\ufeec\153\ufeec\154\ufeec\001\002\000\132\076\371\077\ufee7" +
    "\101\ufee7\102\ufee7\103\ufee7\104\ufee7\105\ufee7\106\ufee7\107" +
    "\ufee7\110\ufee7\111\ufee7\112\ufee7\113\ufee7\114\ufee7\115\ufee7" +
    "\116\ufee7\117\ufee7\120\ufee7\121\ufee7\122\ufee7\123\ufee7\124" +
    "\ufee7\125\ufee7\126\ufee7\127\ufee7\130\ufee7\131\ufee7\132\ufee7" +
    "\133\ufee7\134\ufee7\135\ufee7\136\ufee7\137\ufee7\140\ufee7\141" +
    "\ufee7\142\ufee7\143\ufee7\144\ufee7\147\ufee7\150\ufee7\151\ufee7" +
    "\152\ufee7\153\ufee7\154\ufee7\001\002\000\046\051\101\073" +
    "\066\074\077\076\141\077\ufedd\135\153\136\142\145\143" +
    "\146\150\147\134\150\156\155\122\156\051\157\120\160" +
    "\117\161\052\162\067\163\200\001\002\000\004\077\373" +
    "\001\002\000\100\077\ufee2\101\ufee2\102\ufee2\103\ufee2\104" +
    "\ufee2\105\ufee2\122\ufee2\123\ufee2\124\ufee2\125\ufee2\126\ufee2" +
    "\127\ufee2\130\ufee2\131\ufee2\132\ufee2\133\ufee2\134\ufee2\135" +
    "\ufee2\136\ufee2\137\ufee2\140\ufee2\141\ufee2\142\ufee2\143\ufee2" +
    "\144\ufee2\147\ufee2\150\ufee2\151\ufee2\152\ufee2\153\ufee2\154" +
    "\ufee2\001\002\000\006\077\uff7c\100\220\001\002\000\004" +
    "\077\376\001\002\000\020\077\uff27\104\uff27\105\uff27\147" +
    "\ufee9\150\ufee9\153\ufee9\154\ufee9\001\002\000\100\076\u0100" +
    "\077\uff02\101\uff02\103\uff02\104\uff02\105\uff02\122\uff02\123" +
    "\uff02\124\uff02\125\uff02\126\uff02\127\uff02\130\uff02\131\uff02" +
    "\132\uff02\133\uff02\134\uff02\135\uff02\136\uff02\137\uff02\140" +
    "\uff02\141\uff02\142\uff02\143\uff02\144\uff02\147\uff02\150\uff02" +
    "\151\uff02\152\uff02\153\uff02\154\uff02\001\002\000\046\051" +
    "\101\073\066\074\077\076\141\077\ufedd\135\153\136\142" +
    "\145\143\146\150\147\134\150\156\155\122\156\051\157" +
    "\120\160\117\161\052\162\067\163\200\001\002\000\004" +
    "\077\u0102\001\002\000\100\077\ufee1\101\ufee1\102\ufee1\103" +
    "\ufee1\104\ufee1\105\ufee1\122\ufee1\123\ufee1\124\ufee1\125\ufee1" +
    "\126\ufee1\127\ufee1\130\ufee1\131\ufee1\132\ufee1\133\ufee1\134" +
    "\ufee1\135\ufee1\136\ufee1\137\ufee1\140\ufee1\141\ufee1\142\ufee1" +
    "\143\ufee1\144\ufee1\147\ufee1\150\ufee1\151\ufee1\152\ufee1\153" +
    "\ufee1\154\ufee1\001\002\000\046\051\101\073\066\074\077" +
    "\076\141\104\ufe95\135\153\136\142\145\143\146\150\147" +
    "\134\150\156\155\122\156\051\157\120\160\117\161\052" +
    "\162\067\163\200\001\002\000\004\104\ufe96\001\002\000" +
    "\004\104\u0106\001\002\000\036\051\101\073\066\074\077" +
    "\076\061\077\uff3f\147\134\150\156\155\122\156\051\157" +
    "\120\160\117\161\052\162\067\163\362\001\002\000\004" +
    "\077\uff40\001\002\000\004\077\u010a\001\002\000\006\077" +
    "\uff3e\105\360\001\002\000\004\100\u010b\001\002\000\032" +
    "\030\u0114\051\101\073\066\074\077\076\u010f\155\122\156" +
    "\051\157\120\160\117\161\052\162\067\163\u010d\001\002" +
    "\000\004\106\u013d\001\002\000\014\076\203\102\202\106" +
    "\ufe99\153\201\154\u013c\001\002\000\004\152\u013a\001\002" +
    "\000\044\051\101\073\066\074\077\076\141\135\153\136" +
    "\142\145\143\146\150\147\134\150\156\155\122\156\051" +
    "\157\120\160\117\161\052\162\067\163\200\001\002\000" +
    "\006\153\364\154\u0117\001\002\000\004\152\uff08\001\002" +
    "\000\034\030\uff0d\051\uff0d\073\uff0d\074\uff0d\076\uff0d\101" +
    "\uff0d\155\uff0d\156\uff0d\157\uff0d\160\uff0d\161\uff0d\162\uff0d" +
    "\163\uff0d\001\002\000\034\030\u0114\051\101\073\066\074" +
    "\077\076\u010f\101\u0115\155\122\156\051\157\120\160\117" +
    "\161\052\162\067\163\u010d\001\002\000\004\152\uff09\001" +
    "\002\000\150\004\uff11\005\uff11\006\uff11\007\uff11\010\uff11" +
    "\011\uff11\012\uff11\013\uff11\014\uff11\016\uff11\021\uff11\022" +
    "\uff11\023\uff11\024\uff11\026\uff11\030\uff11\031\uff11\032\uff11" +
    "\033\uff11\034\uff11\035\uff11\036\uff11\037\uff11\040\uff11\041" +
    "\uff11\042\uff11\043\uff11\044\uff11\045\uff11\046\uff11\047\uff11" +
    "\050\uff11\051\uff11\053\uff11\064\uff11\071\uff11\073\uff11\074" +
    "\uff11\076\uff11\100\uff11\101\uff11\104\uff11\147\uff11\150\uff11" +
    "\155\uff11\156\uff11\157\uff11\160\uff11\161\uff11\162\uff11\163" +
    "\uff11\001\002\000\034\030\uff0e\051\uff0e\073\uff0e\074\uff0e" +
    "\076\uff0e\101\uff0e\155\uff0e\156\uff0e\157\uff0e\160\uff0e\161" +
    "\uff0e\162\uff0e\163\uff0e\001\002\000\012\017\u0118\020\367" +
    "\027\u0119\163\370\001\002\000\100\076\u011d\077\ufeed\101" +
    "\ufeed\103\ufeed\104\ufeed\105\ufeed\122\ufeed\123\ufeed\124\ufeed" +
    "\125\ufeed\126\ufeed\127\ufeed\130\ufeed\131\ufeed\132\ufeed\133" +
    "\ufeed\134\ufeed\135\ufeed\136\ufeed\137\ufeed\140\ufeed\141\ufeed" +
    "\142\ufeed\143\ufeed\144\ufeed\147\ufeed\150\ufeed\151\ufeed\152" +
    "\ufeed\153\ufeed\154\ufeed\001\002\000\004\076\u011a\001\002" +
    "\000\044\051\101\073\066\074\077\076\141\135\153\136" +
    "\142\145\143\146\150\147\134\150\156\155\122\156\051" +
    "\157\120\160\117\161\052\162\067\163\200\001\002\000" +
    "\004\077\u011c\001\002\000\006\104\uff30\152\uff30\001\002" +
    "\000\006\077\uff7c\100\220\001\002\000\004\077\u011f\001" +
    "\002\000\076\077\ufee9\101\ufee9\103\ufee9\104\ufee9\105\ufee9" +
    "\122\ufee9\123\ufee9\124\ufee9\125\ufee9\126\ufee9\127\ufee9\130" +
    "\ufee9\131\ufee9\132\ufee9\133\ufee9\134\ufee9\135\ufee9\136\ufee9" +
    "\137\ufee9\140\ufee9\141\ufee9\142\ufee9\143\ufee9\144\ufee9\147" +
    "\ufee9\150\ufee9\151\ufee9\152\ufee9\153\ufee9\154\ufee9\001\002" +
    "\000\004\077\u0121\001\002\000\012\102\ufeff\133\u0122\153" +
    "\ufeff\154\ufeff\001\002\000\032\030\u0114\051\101\073\066" +
    "\074\077\076\061\155\122\156\051\157\120\160\117\161" +
    "\052\162\067\163\u010d\001\002\000\004\152\u0124\001\002" +
    "\000\102\022\230\024\243\030\261\031\242\032\304\034" +
    "\263\035\253\036\260\040\262\042\266\043\303\044\264" +
    "\045\302\046\254\047\305\050\234\051\101\053\276\073" +
    "\066\074\077\076\061\100\220\104\270\147\134\150\156" +
    "\155\122\156\051\157\120\160\117\161\052\162\067\163" +
    "\u0125\001\002\000\050\076\203\102\202\106\ufe99\107\ufe99" +
    "\110\ufe99\111\ufe99\112\ufe99\113\ufe99\114\ufe99\115\ufe99\116" +
    "\ufe99\117\ufe99\120\ufe99\121\ufe99\147\ufed7\150\ufed7\152\u012e" +
    "\153\201\154\u012f\001\002\000\012\147\ufeda\150\ufeda\153" +
    "\364\154\u0128\001\002\000\034\030\uff0c\051\uff0c\073\uff0c" +
    "\074\uff0c\076\uff0c\101\uff0c\155\uff0c\156\uff0c\157\uff0c\160" +
    "\uff0c\161\uff0c\162\uff0c\163\uff0c\001\002\000\012\017\366" +
    "\020\u0129\027\u0119\163\370\001\002\000\014\076\u012a\147" +
    "\ufeec\150\ufeec\153\ufeec\154\ufeec\001\002\000\044\051\101" +
    "\073\066\074\077\076\141\135\153\136\142\145\143\146" +
    "\150\147\134\150\156\155\122\156\051\157\120\160\117" +
    "\161\052\162\067\163\200\001\002\000\004\077\u012c\001" +
    "\002\000\004\104\u012d\001\002\000\150\004\uff51\005\uff51" +
    "\006\uff51\007\uff51\010\uff51\011\uff51\012\uff51\013\uff51\014" +
    "\uff51\016\uff51\021\uff51\022\uff51\023\uff51\024\uff51\026\uff51" +
    "\030\uff51\031\uff51\032\uff51\033\uff51\034\uff51\035\uff51\036" +
    "\uff51\037\uff51\040\uff51\041\uff51\042\uff51\043\uff51\044\uff51" +
    "\045\uff51\046\uff51\047\uff51\050\uff51\051\uff51\053\uff51\064" +
    "\uff51\071\uff51\073\uff51\074\uff51\076\uff51\100\uff51\101\uff51" +
    "\104\uff51\147\uff51\150\uff51\155\uff51\156\uff51\157\uff51\160" +
    "\uff51\161\uff51\162\uff51\163\uff51\001\002\000\102\022\230" +
    "\024\243\030\261\031\242\032\304\034\263\035\253\036" +
    "\260\040\262\042\266\043\303\044\264\045\302\046\254" +
    "\047\305\050\234\051\101\053\276\073\066\074\077\076" +
    "\061\100\220\104\270\147\134\150\156\155\122\156\051" +
    "\157\120\160\117\161\052\162\067\163\u0125\001\002\000" +
    "\012\017\344\020\u0131\027\u0130\163\207\001\002\000\004" +
    "\076\u0136\001\002\000\014\076\u0132\147\ufeea\150\ufeea\153" +
    "\ufeea\154\ufeea\001\002\000\044\051\101\073\066\074\077" +
    "\076\141\135\153\136\142\145\143\146\150\147\134\150" +
    "\156\155\122\156\051\157\120\160\117\161\052\162\067" +
    "\163\200\001\002\000\004\077\u0134\001\002\000\004\104" +
    "\u0135\001\002\000\150\004\uff52\005\uff52\006\uff52\007\uff52" +
    "\010\uff52\011\uff52\012\uff52\013\uff52\014\uff52\016\uff52\021" +
    "\uff52\022\uff52\023\uff52\024\uff52\026\uff52\030\uff52\031\uff52" +
    "\032\uff52\033\uff52\034\uff52\035\uff52\036\uff52\037\uff52\040" +
    "\uff52\041\uff52\042\uff52\043\uff52\044\uff52\045\uff52\046\uff52" +
    "\047\uff52\050\uff52\051\uff52\053\uff52\064\uff52\071\uff52\073" +
    "\uff52\074\uff52\076\uff52\100\uff52\101\uff52\104\uff52\147\uff52" +
    "\150\uff52\155\uff52\156\uff52\157\uff52\160\uff52\161\uff52\162" +
    "\uff52\163\uff52\001\002\000\044\051\101\073\066\074\077" +
    "\076\141\135\153\136\142\145\143\146\150\147\134\150" +
    "\156\155\122\156\051\157\120\160\117\161\052\162\067" +
    "\163\200\001\002\000\004\077\u0138\001\002\000\006\104" +
    "\uff31\152\uff31\001\002\000\146\004\uff25\005\uff25\006\uff25" +
    "\007\uff25\010\uff25\011\uff25\012\uff25\013\uff25\014\uff25\016" +
    "\uff25\021\uff25\022\uff25\023\uff25\024\uff25\026\uff25\030\uff25" +
    "\031\uff25\032\uff25\034\uff25\035\uff25\036\uff25\037\uff25\040" +
    "\uff25\041\uff25\042\uff25\043\uff25\044\uff25\045\uff25\046\uff25" +
    "\047\uff25\050\uff25\051\uff25\053\uff25\064\uff25\071\uff25\073" +
    "\uff25\074\uff25\076\uff25\100\uff25\101\uff25\104\uff25\147\uff25" +
    "\150\uff25\155\uff25\156\uff25\157\uff25\160\uff25\161\uff25\162" +
    "\uff25\163\uff25\001\002\000\102\022\230\024\243\030\261" +
    "\031\242\032\304\034\263\035\253\036\260\040\262\042" +
    "\266\043\303\044\264\045\302\046\254\047\305\050\234" +
    "\051\101\053\276\073\066\074\077\076\061\100\220\104" +
    "\270\147\134\150\156\155\122\156\051\157\120\160\117" +
    "\161\052\162\067\163\u0125\001\002\000\034\030\uff0b\051" +
    "\uff0b\073\uff0b\074\uff0b\076\uff0b\101\uff0b\155\uff0b\156\uff0b" +
    "\157\uff0b\160\uff0b\161\uff0b\162\uff0b\163\uff0b\001\002\000" +
    "\012\017\205\020\206\027\u0130\163\207\001\002\000\030" +
    "\051\101\073\066\074\077\076\061\155\122\156\051\157" +
    "\120\160\117\161\052\162\067\163\u013e\001\002\000\012" +
    "\076\203\102\202\153\201\154\204\001\002\000\010\152" +
    "\uff0a\153\uff04\154\uff04\001\002\000\006\153\364\154\u0141" +
    "\001\002\000\010\017\u0118\020\367\163\370\001\002\000" +
    "\004\163\u0143\001\002\000\016\076\u0100\102\u0144\147\uff02" +
    "\150\uff02\153\uff02\154\uff02\001\002\000\004\103\353\001" +
    "\002\000\010\102\350\122\uffb2\163\uffb2\001\002\000\034" +
    "\030\u0114\051\101\073\066\074\077\076\u010f\101\u0147\155" +
    "\122\156\051\157\120\160\117\161\052\162\067\163\u010d" +
    "\001\002\000\150\004\uff12\005\uff12\006\uff12\007\uff12\010" +
    "\uff12\011\uff12\012\uff12\013\uff12\014\uff12\016\uff12\021\uff12" +
    "\022\uff12\023\uff12\024\uff12\026\uff12\030\uff12\031\uff12\032" +
    "\uff12\033\uff12\034\uff12\035\uff12\036\uff12\037\uff12\040\uff12" +
    "\041\uff12\042\uff12\043\uff12\044\uff12\045\uff12\046\uff12\047" +
    "\uff12\050\uff12\051\uff12\053\uff12\064\uff12\071\uff12\073\uff12" +
    "\074\uff12\076\uff12\100\uff12\101\uff12\104\uff12\147\uff12\150" +
    "\uff12\155\uff12\156\uff12\157\uff12\160\uff12\161\uff12\162\uff12" +
    "\163\uff12\001\002\000\044\051\101\073\066\074\077\076" +
    "\141\135\153\136\142\145\143\146\150\147\134\150\156" +
    "\155\122\156\051\157\120\160\117\161\052\162\067\163" +
    "\200\001\002\000\004\077\u014a\001\002\000\102\022\u014b" +
    "\024\243\030\261\031\242\032\u0154\034\u0151\035\u014e\036" +
    "\260\040\262\042\266\043\303\044\264\045\302\046\u014f" +
    "\047\305\050\234\051\101\053\276\073\066\074\077\076" +
    "\061\100\220\104\270\147\134\150\156\155\122\156\051" +
    "\157\120\160\117\161\052\162\067\163\u0125\001\002\000" +
    "\004\076\u0186\001\002\000\004\033\uff65\001\002\000\004" +
    "\033\uff63\001\002\000\004\076\u0181\001\002\000\010\025" +
    "\u0168\034\u0169\100\220\001\002\000\150\004\uff6d\005\uff6d" +
    "\006\uff6d\007\uff6d\010\uff6d\011\uff6d\012\uff6d\013\uff6d\014" +
    "\uff6d\016\uff6d\021\uff6d\022\uff6d\023\uff6d\024\uff6d\026\uff6d" +
    "\030\uff6d\031\uff6d\032\uff6d\033\uff66\034\uff6d\035\uff6d\036" +
    "\uff6d\037\uff6d\040\uff6d\041\uff6d\042\uff6d\043\uff6d\044\uff6d" +
    "\045\uff6d\046\uff6d\047\uff6d\050\uff6d\051\uff6d\053\uff6d\064" +
    "\uff6d\071\uff6d\073\uff6d\074\uff6d\076\uff6d\100\uff6d\101\uff6d" +
    "\104\uff6d\147\uff6d\150\uff6d\155\uff6d\156\uff6d\157\uff6d\160" +
    "\uff6d\161\uff6d\162\uff6d\163\uff6d\001\002\000\004\076\u015f" +
    "\001\002\000\004\033\uff64\001\002\000\004\033\u015e\001" +
    "\002\000\004\076\u0157\001\002\000\004\033\uff62\001\002" +
    "\000\146\004\uff4f\005\uff4f\006\uff4f\007\uff4f\010\uff4f\011" +
    "\uff4f\012\uff4f\013\uff4f\014\uff4f\016\uff4f\021\uff4f\022\uff4f" +
    "\023\uff4f\024\uff4f\026\uff4f\030\uff4f\031\uff4f\032\uff4f\034" +
    "\uff4f\035\uff4f\036\uff4f\037\uff4f\040\uff4f\041\uff4f\042\uff4f" +
    "\043\uff4f\044\uff4f\045\uff4f\046\uff4f\047\uff4f\050\uff4f\051" +
    "\uff4f\053\uff4f\064\uff4f\071\uff4f\073\uff4f\074\uff4f\076\uff4f" +
    "\100\uff4f\101\uff4f\104\uff4f\147\uff4f\150\uff4f\155\uff4f\156" +
    "\uff4f\157\uff4f\160\uff4f\161\uff4f\162\uff4f\163\uff4f\001\002" +
    "\000\044\051\101\073\066\074\077\076\141\135\153\136" +
    "\142\145\143\146\150\147\134\150\156\155\122\156\051" +
    "\157\120\160\117\161\052\162\067\163\200\001\002\000" +
    "\004\077\u0159\001\002\000\102\022\u014b\024\243\030\261" +
    "\031\242\032\u0154\034\u0151\035\u014e\036\260\040\262\042" +
    "\266\043\303\044\264\045\302\046\u014f\047\305\050\234" +
    "\051\101\053\276\073\066\074\077\076\061\100\220\104" +
    "\270\147\134\150\156\155\122\156\051\157\120\160\117" +
    "\161\052\162\067\163\u0125\001\002\000\004\033\u015b\001" +
    "\002\000\102\022\u014b\024\243\030\261\031\242\032\u0154" +
    "\034\u0151\035\u014e\036\260\040\262\042\266\043\303\044" +
    "\264\045\302\046\u014f\047\305\050\234\051\101\053\276" +
    "\073\066\074\077\076\061\100\220\104\270\147\134\150" +
    "\156\155\122\156\051\157\120\160\117\161\052\162\067" +
    "\163\u0125\001\002\000\004\033\uff4d\001\002\000\146\004" +
    "\uff4e\005\uff4e\006\uff4e\007\uff4e\010\uff4e\011\uff4e\012\uff4e" +
    "\013\uff4e\014\uff4e\016\uff4e\021\uff4e\022\uff4e\023\uff4e\024" +
    "\uff4e\026\uff4e\030\uff4e\031\uff4e\032\uff4e\034\uff4e\035\uff4e" +
    "\036\uff4e\037\uff4e\040\uff4e\041\uff4e\042\uff4e\043\uff4e\044" +
    "\uff4e\045\uff4e\046\uff4e\047\uff4e\050\uff4e\051\uff4e\053\uff4e" +
    "\064\uff4e\071\uff4e\073\uff4e\074\uff4e\076\uff4e\100\uff4e\101" +
    "\uff4e\104\uff4e\147\uff4e\150\uff4e\155\uff4e\156\uff4e\157\uff4e" +
    "\160\uff4e\161\uff4e\162\uff4e\163\uff4e\001\002\000\102\022" +
    "\230\024\243\030\261\031\242\032\304\034\263\035\253" +
    "\036\260\040\262\042\266\043\303\044\264\045\302\046" +
    "\254\047\305\050\234\051\101\053\276\073\066\074\077" +
    "\076\061\100\220\104\270\147\134\150\156\155\122\156" +
    "\051\157\120\160\117\161\052\162\067\163\u0125\001\002" +
    "\000\074\004\100\005\105\006\053\007\065\010\113\011" +
    "\111\012\060\013\055\014\115\016\057\021\054\023\056" +
    "\026\107\051\101\064\307\071\233\073\066\074\077\076" +
    "\061\104\uff43\147\134\150\156\155\122\156\051\157\120" +
    "\160\117\161\052\162\067\163\337\001\002\000\004\104" +
    "\u0161\001\002\000\046\051\101\073\066\074\077\076\141" +
    "\104\ufe95\135\153\136\142\145\143\146\150\147\134\150" +
    "\156\155\122\156\051\157\120\160\117\161\052\162\067" +
    "\163\200\001\002\000\004\104\u0163\001\002\000\036\051" +
    "\101\073\066\074\077\076\061\077\uff3f\147\134\150\156" +
    "\155\122\156\051\157\120\160\117\161\052\162\067\163" +
    "\362\001\002\000\004\077\u0165\001\002\000\102\022\u014b" +
    "\024\243\030\261\031\242\032\u0154\034\u0151\035\u014e\036" +
    "\260\040\262\042\266\043\303\044\264\045\302\046\u014f" +
    "\047\305\050\234\051\101\053\276\073\066\074\077\076" +
    "\061\100\220\104\270\147\134\150\156\155\122\156\051" +
    "\157\120\160\117\161\052\162\067\163\u0125\001\002\000" +
    "\004\033\uff47\001\002\000\146\004\uff4a\005\uff4a\006\uff4a" +
    "\007\uff4a\010\uff4a\011\uff4a\012\uff4a\013\uff4a\014\uff4a\016" +
    "\uff4a\021\uff4a\022\uff4a\023\uff4a\024\uff4a\026\uff4a\030\uff4a" +
    "\031\uff4a\032\uff4a\034\uff4a\035\uff4a\036\uff4a\037\uff4a\040" +
    "\uff4a\041\uff4a\042\uff4a\043\uff4a\044\uff4a\045\uff4a\046\uff4a" +
    "\047\uff4a\050\uff4a\051\uff4a\053\uff4a\064\uff4a\071\uff4a\073" +
    "\uff4a\074\uff4a\076\uff4a\100\uff4a\101\uff4a\104\uff4a\147\uff4a" +
    "\150\uff4a\155\uff4a\156\uff4a\157\uff4a\160\uff4a\161\uff4a\162" +
    "\uff4a\163\uff4a\001\002\000\004\076\u017a\001\002\000\004" +
    "\076\u016b\001\002\000\150\004\uff76\005\uff76\006\uff76\007" +
    "\uff76\010\uff76\011\uff76\012\uff76\013\uff76\014\uff76\016\uff76" +
    "\021\uff76\022\uff76\023\uff76\024\uff76\026\uff76\030\uff76\031" +
    "\uff76\032\uff76\033\uff76\034\uff76\035\uff76\036\uff76\037\uff76" +
    "\040\uff76\041\uff76\042\uff76\043\uff76\044\uff76\045\uff76\046" +
    "\uff76\047\uff76\050\uff76\051\uff76\053\uff76\064\uff76\071\uff76" +
    "\073\uff76\074\uff76\076\uff76\100\uff76\101\uff76\104\uff76\147" +
    "\uff76\150\uff76\155\uff76\156\uff76\157\uff76\160\uff76\161\uff76" +
    "\162\uff76\163\uff76\001\002\000\074\004\100\005\105\006" +
    "\053\007\065\010\113\011\111\012\060\013\055\014\115" +
    "\016\057\021\054\023\056\026\107\051\101\064\307\071" +
    "\233\073\066\074\077\076\061\104\uff43\147\134\150\156" +
    "\155\122\156\051\157\120\160\117\161\052\162\067\163" +
    "\337\001\002\000\004\104\u016d\001\002\000\046\051\101" +
    "\073\066\074\077\076\141\104\ufe95\135\153\136\142\145" +
    "\143\146\150\147\134\150\156\155\122\156\051\157\120" +
    "\160\117\161\052\162\067\163\200\001\002\000\004\104" +
    "\u016f\001\002\000\036\051\101\073\066\074\077\076\061" +
    "\077\uff3f\147\134\150\156\155\122\156\051\157\120\160" +
    "\117\161\052\162\067\163\362\001\002\000\004\077\u0171" +
    "\001\002\000\104\022\u014b\024\243\025\u0172\030\261\031" +
    "\242\032\u0154\034\u0151\035\u014e\036\260\040\262\042\266" +
    "\043\303\044\264\045\302\046\u014f\047\305\050\234\051" +
    "\101\053\276\073\066\074\077\076\061\100\220\104\270" +
    "\147\134\150\156\155\122\156\051\157\120\160\117\161" +
    "\052\162\067\163\u0125\001\002\000\004\076\u0175\001\002" +
    "\000\004\033\uff45\001\002\000\146\004\uff48\005\uff48\006" +
    "\uff48\007\uff48\010\uff48\011\uff48\012\uff48\013\uff48\014\uff48" +
    "\016\uff48\021\uff48\022\uff48\023\uff48\024\uff48\026\uff48\030" +
    "\uff48\031\uff48\032\uff48\034\uff48\035\uff48\036\uff48\037\uff48" +
    "\040\uff48\041\uff48\042\uff48\043\uff48\044\uff48\045\uff48\046" +
    "\uff48\047\uff48\050\uff48\051\uff48\053\uff48\064\uff48\071\uff48" +
    "\073\uff48\074\uff48\076\uff48\100\uff48\101\uff48\104\uff48\147" +
    "\uff48\150\uff48\155\uff48\156\uff48\157\uff48\160\uff48\161\uff48" +
    "\162\uff48\163\uff48\001\002\000\044\051\101\073\066\074" +
    "\077\076\141\135\153\136\142\145\143\146\150\147\134" +
    "\150\156\155\122\156\051\157\120\160\117\161\052\162" +
    "\067\163\200\001\002\000\006\077\u0177\105\214\001\002" +
    "\000\102\022\u014b\024\243\030\261\031\242\032\u0154\034" +
    "\u0151\035\u014e\036\260\040\262\042\266\043\303\044\264" +
    "\045\302\046\u014f\047\305\050\234\051\101\053\276\073" +
    "\066\074\077\076\061\100\220\104\270\147\134\150\156" +
    "\155\122\156\051\157\120\160\117\161\052\162\067\163" +
    "\u0125\001\002\000\004\033\uff46\001\002\000\146\004\uff49" +
    "\005\uff49\006\uff49\007\uff49\010\uff49\011\uff49\012\uff49\013" +
    "\uff49\014\uff49\016\uff49\021\uff49\022\uff49\023\uff49\024\uff49" +
    "\026\uff49\030\uff49\031\uff49\032\uff49\034\uff49\035\uff49\036" +
    "\uff49\037\uff49\040\uff49\041\uff49\042\uff49\043\uff49\044\uff49" +
    "\045\uff49\046\uff49\047\uff49\050\uff49\051\uff49\053\uff49\064" +
    "\uff49\071\uff49\073\uff49\074\uff49\076\uff49\100\uff49\101\uff49" +
    "\104\uff49\147\uff49\150\uff49\155\uff49\156\uff49\157\uff49\160" +
    "\uff49\161\uff49\162\uff49\163\uff49\001\002\000\044\051\101" +
    "\073\066\074\077\076\141\135\153\136\142\145\143\146" +
    "\150\147\134\150\156\155\122\156\051\157\120\160\117" +
    "\161\052\162\067\163\200\001\002\000\006\077\uff73\105" +
    "\uff73\001\002\000\006\077\u017e\105\u017d\001\002\000\044" +
    "\051\101\073\066\074\077\076\141\135\153\136\142\145" +
    "\143\146\150\147\134\150\156\155\122\156\051\157\120" +
    "\160\117\161\052\162\067\163\200\001\002\000\004\100" +
    "\220\001\002\000\150\004\uff75\005\uff75\006\uff75\007\uff75" +
    "\010\uff75\011\uff75\012\uff75\013\uff75\014\uff75\016\uff75\021" +
    "\uff75\022\uff75\023\uff75\024\uff75\026\uff75\030\uff75\031\uff75" +
    "\032\uff75\033\uff75\034\uff75\035\uff75\036\uff75\037\uff75\040" +
    "\uff75\041\uff75\042\uff75\043\uff75\044\uff75\045\uff75\046\uff75" +
    "\047\uff75\050\uff75\051\uff75\053\uff75\064\uff75\071\uff75\073" +
    "\uff75\074\uff75\076\uff75\100\uff75\101\uff75\104\uff75\147\uff75" +
    "\150\uff75\155\uff75\156\uff75\157\uff75\160\uff75\161\uff75\162" +
    "\uff75\163\uff75\001\002\000\006\077\uff74\105\uff74\001\002" +
    "\000\044\051\101\073\066\074\077\076\141\135\153\136" +
    "\142\145\143\146\150\147\134\150\156\155\122\156\051" +
    "\157\120\160\117\161\052\162\067\163\200\001\002\000" +
    "\004\077\u0183\001\002\000\102\022\u014b\024\243\030\261" +
    "\031\242\032\u0154\034\u0151\035\u014e\036\260\040\262\042" +
    "\266\043\303\044\264\045\302\046\u014f\047\305\050\234" +
    "\051\101\053\276\073\066\074\077\076\061\100\220\104" +
    "\270\147\134\150\156\155\122\156\051\157\120\160\117" +
    "\161\052\162\067\163\u0125\001\002\000\004\033\uff4b\001" +
    "\002\000\146\004\uff4c\005\uff4c\006\uff4c\007\uff4c\010\uff4c" +
    "\011\uff4c\012\uff4c\013\uff4c\014\uff4c\016\uff4c\021\uff4c\022" +
    "\uff4c\023\uff4c\024\uff4c\026\uff4c\030\uff4c\031\uff4c\032\uff4c" +
    "\034\uff4c\035\uff4c\036\uff4c\037\uff4c\040\uff4c\041\uff4c\042" +
    "\uff4c\043\uff4c\044\uff4c\045\uff4c\046\uff4c\047\uff4c\050\uff4c" +
    "\051\uff4c\053\uff4c\064\uff4c\071\uff4c\073\uff4c\074\uff4c\076" +
    "\uff4c\100\uff4c\101\uff4c\104\uff4c\147\uff4c\150\uff4c\155\uff4c" +
    "\156\uff4c\157\uff4c\160\uff4c\161\uff4c\162\uff4c\163\uff4c\001" +
    "\002\000\034\016\057\021\054\051\101\073\066\074\077" +
    "\076\061\155\122\156\051\157\120\160\117\161\052\162" +
    "\067\163\u0188\001\002\000\006\077\u0193\105\u0192\001\002" +
    "\000\016\076\203\077\uff36\102\202\105\uff36\153\201\154" +
    "\204\001\002\000\004\163\u018c\001\002\000\012\077\uff34" +
    "\105\uff34\153\uff03\154\uff03\001\002\000\006\077\uff37\105" +
    "\uff37\001\002\000\004\106\u018d\001\002\000\030\051\101" +
    "\073\066\074\077\076\061\155\122\156\051\157\120\160" +
    "\117\161\052\162\067\163\u013e\001\002\000\014\077\uff35" +
    "\102\u018f\105\uff35\153\uff07\154\uff07\001\002\000\044\051" +
    "\101\073\066\074\077\076\141\135\153\136\142\145\143" +
    "\146\150\147\134\150\156\155\122\156\051\157\120\160" +
    "\117\161\052\162\067\163\200\001\002\000\004\103\u0191" +
    "\001\002\000\130\077\ufee4\101\ufee4\102\ufee4\103\ufee4\104" +
    "\ufee4\105\ufee4\106\ufee4\107\ufee4\110\ufee4\111\ufee4\112\ufee4" +
    "\113\ufee4\114\ufee4\115\ufee4\116\ufee4\117\ufee4\120\ufee4\121" +
    "\ufee4\122\ufee4\123\ufee4\124\ufee4\125\ufee4\126\ufee4\127\ufee4" +
    "\130\ufee4\131\ufee4\132\ufee4\133\ufee4\134\ufee4\135\ufee4\136" +
    "\ufee4\137\ufee4\140\ufee4\141\ufee4\142\ufee4\143\ufee4\144\ufee4" +
    "\147\ufee4\150\ufee4\151\ufee4\152\ufee4\153\ufee4\154\ufee4\001" +
    "\002\000\034\016\057\021\054\051\101\073\066\074\077" +
    "\076\061\155\122\156\051\157\120\160\117\161\052\162" +
    "\067\163\u0188\001\002\000\102\022\u014b\024\243\030\261" +
    "\031\242\032\u0154\034\u0151\035\u014e\036\260\040\262\042" +
    "\266\043\303\044\264\045\302\046\u014f\047\305\050\234" +
    "\051\101\053\276\073\066\074\077\076\061\100\220\104" +
    "\270\147\134\150\156\155\122\156\051\157\120\160\117" +
    "\161\052\162\067\163\u0125\001\002\000\004\033\uff39\001" +
    "\002\000\146\004\uff3a\005\uff3a\006\uff3a\007\uff3a\010\uff3a" +
    "\011\uff3a\012\uff3a\013\uff3a\014\uff3a\016\uff3a\021\uff3a\022" +
    "\uff3a\023\uff3a\024\uff3a\026\uff3a\030\uff3a\031\uff3a\032\uff3a" +
    "\034\uff3a\035\uff3a\036\uff3a\037\uff3a\040\uff3a\041\uff3a\042" +
    "\uff3a\043\uff3a\044\uff3a\045\uff3a\046\uff3a\047\uff3a\050\uff3a" +
    "\051\uff3a\053\uff3a\064\uff3a\071\uff3a\073\uff3a\074\uff3a\076" +
    "\uff3a\100\uff3a\101\uff3a\104\uff3a\147\uff3a\150\uff3a\155\uff3a" +
    "\156\uff3a\157\uff3a\160\uff3a\161\uff3a\162\uff3a\163\uff3a\001" +
    "\002\000\006\077\uff38\105\uff38\001\002\000\004\104\u0199" +
    "\001\002\000\004\104\uff22\001\002\000\150\004\uff23\005" +
    "\uff23\006\uff23\007\uff23\010\uff23\011\uff23\012\uff23\013\uff23" +
    "\014\uff23\016\uff23\021\uff23\022\uff23\023\uff23\024\uff23\026" +
    "\uff23\030\uff23\031\uff23\032\uff23\033\uff23\034\uff23\035\uff23" +
    "\036\uff23\037\uff23\040\uff23\041\uff23\042\uff23\043\uff23\044" +
    "\uff23\045\uff23\046\uff23\047\uff23\050\uff23\051\uff23\053\uff23" +
    "\064\uff23\071\uff23\073\uff23\074\uff23\076\uff23\100\uff23\101" +
    "\uff23\104\uff23\147\uff23\150\uff23\155\uff23\156\uff23\157\uff23" +
    "\160\uff23\161\uff23\162\uff23\163\uff23\001\002\000\150\004" +
    "\uff5b\005\uff5b\006\uff5b\007\uff5b\010\uff5b\011\uff5b\012\uff5b" +
    "\013\uff5b\014\uff5b\016\uff5b\021\uff5b\022\uff5b\023\uff5b\024" +
    "\uff5b\026\uff5b\030\uff5b\031\uff5b\032\uff5b\033\uff5b\034\uff5b" +
    "\035\uff5b\036\uff5b\037\uff5b\040\uff5b\041\uff5b\042\uff5b\043" +
    "\uff5b\044\uff5b\045\uff5b\046\uff5b\047\uff5b\050\uff5b\051\uff5b" +
    "\053\uff5b\064\uff5b\071\uff5b\073\uff5b\074\uff5b\076\uff5b\100" +
    "\uff5b\101\uff5b\104\uff5b\147\uff5b\150\uff5b\155\uff5b\156\uff5b" +
    "\157\uff5b\160\uff5b\161\uff5b\162\uff5b\163\uff5b\001\002\000" +
    "\004\054\u019c\001\002\000\004\076\u019d\001\002\000\064" +
    "\004\100\005\105\006\053\007\065\010\113\011\111\012" +
    "\060\013\055\014\115\016\057\021\054\023\056\026\107" +
    "\051\101\071\u019e\073\066\074\077\076\061\155\122\156" +
    "\051\157\120\160\117\161\052\162\067\163\123\001\002" +
    "\000\062\004\100\005\105\006\053\007\065\010\113\011" +
    "\111\012\060\013\055\014\115\016\057\021\054\023\056" +
    "\026\107\051\101\073\066\074\077\076\061\155\122\156" +
    "\051\157\120\160\117\161\052\162\067\163\123\001\002" +
    "\000\006\077\uffdb\105\uffdb\001\002\000\006\077\u01a4\105" +
    "\u01a3\001\002\000\004\163\126\001\002\000\010\077\uffda" +
    "\102\132\105\uffda\001\002\000\064\004\100\005\105\006" +
    "\053\007\065\010\113\011\111\012\060\013\055\014\115" +
    "\016\057\021\054\023\056\026\107\051\101\071\u019e\073" +
    "\066\074\077\076\061\155\122\156\051\157\120\160\117" +
    "\161\052\162\067\163\123\001\002\000\004\104\u01a5\001" +
    "\002\000\150\004\uff2f\005\uff2f\006\uff2f\007\uff2f\010\uff2f" +
    "\011\uff2f\012\uff2f\013\uff2f\014\uff2f\016\uff2f\021\uff2f\022" +
    "\uff2f\023\uff2f\024\uff2f\026\uff2f\030\uff2f\031\uff2f\032\uff2f" +
    "\033\uff2f\034\uff2f\035\uff2f\036\uff2f\037\uff2f\040\uff2f\041" +
    "\uff2f\042\uff2f\043\uff2f\044\uff2f\045\uff2f\046\uff2f\047\uff2f" +
    "\050\uff2f\051\uff2f\053\uff2f\064\uff2f\071\uff2f\073\uff2f\074" +
    "\uff2f\076\uff2f\100\uff2f\101\uff2f\104\uff2f\147\uff2f\150\uff2f" +
    "\155\uff2f\156\uff2f\157\uff2f\160\uff2f\161\uff2f\162\uff2f\163" +
    "\uff2f\001\002\000\006\077\uffdc\105\uffdc\001\002\000\004" +
    "\163\126\001\002\000\010\077\uffd9\102\132\105\uffd9\001" +
    "\002\000\174\002\uff7b\004\uff7b\005\uff7b\006\uff7b\007\uff7b" +
    "\010\uff7b\011\uff7b\012\uff7b\013\uff7b\014\uff7b\016\uff7b\021" +
    "\uff7b\022\uff7b\023\uff7b\024\uff7b\026\uff7b\030\uff7b\031\uff7b" +
    "\032\uff7b\033\uff7b\034\uff7b\035\uff7b\036\uff7b\037\uff7b\040" +
    "\uff7b\041\uff7b\042\uff7b\043\uff7b\044\uff7b\045\uff7b\046\uff7b" +
    "\047\uff7b\050\uff7b\051\uff7b\053\uff7b\055\uff7b\056\uff7b\057" +
    "\uff7b\064\uff7b\065\uff7b\066\uff7b\067\uff7b\070\uff7b\071\uff7b" +
    "\072\uff7b\073\uff7b\074\uff7b\076\uff7b\077\uff7b\100\uff7b\101" +
    "\uff7b\104\uff7b\147\uff7b\150\uff7b\155\uff7b\156\uff7b\157\uff7b" +
    "\160\uff7b\161\uff7b\162\uff7b\163\uff7b\001\002\000\004\104" +
    "\u01ab\001\002\000\150\004\uff24\005\uff24\006\uff24\007\uff24" +
    "\010\uff24\011\uff24\012\uff24\013\uff24\014\uff24\016\uff24\021" +
    "\uff24\022\uff24\023\uff24\024\uff24\026\uff24\030\uff24\031\uff24" +
    "\032\uff24\033\uff24\034\uff24\035\uff24\036\uff24\037\uff24\040" +
    "\uff24\041\uff24\042\uff24\043\uff24\044\uff24\045\uff24\046\uff24" +
    "\047\uff24\050\uff24\051\uff24\053\uff24\064\uff24\071\uff24\073" +
    "\uff24\074\uff24\076\uff24\100\uff24\101\uff24\104\uff24\147\uff24" +
    "\150\uff24\155\uff24\156\uff24\157\uff24\160\uff24\161\uff24\162" +
    "\uff24\163\uff24\001\002\000\004\104\u01ad\001\002\000\150" +
    "\004\uff20\005\uff20\006\uff20\007\uff20\010\uff20\011\uff20\012" +
    "\uff20\013\uff20\014\uff20\016\uff20\021\uff20\022\uff20\023\uff20" +
    "\024\uff20\026\uff20\030\uff20\031\uff20\032\uff20\033\uff20\034" +
    "\uff20\035\uff20\036\uff20\037\uff20\040\uff20\041\uff20\042\uff20" +
    "\043\uff20\044\uff20\045\uff20\046\uff20\047\uff20\050\uff20\051" +
    "\uff20\053\uff20\064\uff20\071\uff20\073\uff20\074\uff20\076\uff20" +
    "\100\uff20\101\uff20\104\uff20\147\uff20\150\uff20\155\uff20\156" +
    "\uff20\157\uff20\160\uff20\161\uff20\162\uff20\163\uff20\001\002" +
    "\000\074\004\100\005\105\006\053\007\065\010\113\011" +
    "\111\012\060\013\055\014\115\016\057\021\054\023\056" +
    "\026\107\051\101\064\307\071\233\073\066\074\077\076" +
    "\061\104\uff43\147\134\150\156\155\122\156\051\157\120" +
    "\160\117\161\052\162\067\163\337\001\002\000\004\104" +
    "\u01b0\001\002\000\046\051\101\073\066\074\077\076\141" +
    "\104\ufe95\135\153\136\142\145\143\146\150\147\134\150" +
    "\156\155\122\156\051\157\120\160\117\161\052\162\067" +
    "\163\200\001\002\000\004\104\u01b2\001\002\000\036\051" +
    "\101\073\066\074\077\076\061\077\uff3f\147\134\150\156" +
    "\155\122\156\051\157\120\160\117\161\052\162\067\163" +
    "\362\001\002\000\004\077\u01b4\001\002\000\102\022\230" +
    "\024\243\030\261\031\242\032\304\034\263\035\253\036" +
    "\260\040\262\042\266\043\303\044\264\045\302\046\254" +
    "\047\305\050\234\051\101\053\276\073\066\074\077\076" +
    "\061\100\220\104\270\147\134\150\156\155\122\156\051" +
    "\157\120\160\117\161\052\162\067\163\u0125\001\002\000" +
    "\004\035\u01b6\001\002\000\004\076\u01b7\001\002\000\044" +
    "\051\101\073\066\074\077\076\141\135\153\136\142\145" +
    "\143\146\150\147\134\150\156\155\122\156\051\157\120" +
    "\160\117\161\052\162\067\163\200\001\002\000\004\077" +
    "\u01b9\001\002\000\150\004\uff3b\005\uff3b\006\uff3b\007\uff3b" +
    "\010\uff3b\011\uff3b\012\uff3b\013\uff3b\014\uff3b\016\uff3b\021" +
    "\uff3b\022\uff3b\023\uff3b\024\uff3b\026\uff3b\030\uff3b\031\uff3b" +
    "\032\uff3b\033\uff3b\034\uff3b\035\uff3b\036\uff3b\037\uff3b\040" +
    "\uff3b\041\uff3b\042\uff3b\043\uff3b\044\uff3b\045\uff3b\046\uff3b" +
    "\047\uff3b\050\uff3b\051\uff3b\053\uff3b\064\uff3b\071\uff3b\073" +
    "\uff3b\074\uff3b\076\uff3b\100\uff3b\101\uff3b\104\uff3b\147\uff3b" +
    "\150\uff3b\155\uff3b\156\uff3b\157\uff3b\160\uff3b\161\uff3b\162" +
    "\uff3b\163\uff3b\001\002\000\150\004\uff13\005\uff13\006\uff13" +
    "\007\uff13\010\uff13\011\uff13\012\uff13\013\uff13\014\uff13\016" +
    "\uff13\021\uff13\022\uff13\023\uff13\024\uff13\026\uff13\030\uff13" +
    "\031\uff13\032\uff13\033\uff13\034\uff13\035\uff13\036\uff13\037" +
    "\uff13\040\uff13\041\uff13\042\uff13\043\uff13\044\uff13\045\uff13" +
    "\046\uff13\047\uff13\050\uff13\051\uff13\053\uff13\064\uff13\071" +
    "\uff13\073\uff13\074\uff13\076\uff13\100\uff13\101\uff13\104\uff13" +
    "\147\uff13\150\uff13\155\uff13\156\uff13\157\uff13\160\uff13\161" +
    "\uff13\162\uff13\163\uff13\001\002\000\044\051\101\073\066" +
    "\074\077\076\141\135\153\136\142\145\143\146\150\147" +
    "\134\150\156\155\122\156\051\157\120\160\117\161\052" +
    "\162\067\163\200\001\002\000\004\077\u01bd\001\002\000" +
    "\004\100\u01be\001\002\000\010\037\u01c6\041\u01c1\101\uff1c" +
    "\001\002\000\150\004\uff1f\005\uff1f\006\uff1f\007\uff1f\010" +
    "\uff1f\011\uff1f\012\uff1f\013\uff1f\014\uff1f\016\uff1f\021\uff1f" +
    "\022\uff1f\023\uff1f\024\uff1f\026\uff1f\030\uff1f\031\uff1f\032" +
    "\uff1f\033\uff1f\034\uff1f\035\uff1f\036\uff1f\037\uff1f\040\uff1f" +
    "\041\uff1f\042\uff1f\043\uff1f\044\uff1f\045\uff1f\046\uff1f\047" +
    "\uff1f\050\uff1f\051\uff1f\053\uff1f\064\uff1f\071\uff1f\073\uff1f" +
    "\074\uff1f\076\uff1f\100\uff1f\101\uff1f\104\uff1f\147\uff1f\150" +
    "\uff1f\155\uff1f\156\uff1f\157\uff1f\160\uff1f\161\uff1f\162\uff1f" +
    "\163\uff1f\001\002\000\004\101\u01cf\001\002\000\004\152" +
    "\u01ce\001\002\000\010\037\u01c6\041\u01c1\101\uff1d\001\002" +
    "\000\010\037\uff1b\041\uff1b\101\uff1b\001\002\000\144\004" +
    "\uff18\005\uff18\006\uff18\007\uff18\010\uff18\011\uff18\012\uff18" +
    "\013\uff18\014\uff18\016\uff18\021\uff18\022\uff18\023\uff18\024" +
    "\uff18\026\uff18\030\uff18\031\uff18\032\uff18\034\uff18\035\uff18" +
    "\036\uff18\037\uff18\040\uff18\041\uff18\042\uff18\043\uff18\044" +
    "\uff18\045\uff18\046\uff18\047\uff18\050\uff18\051\uff18\053\uff18" +
    "\064\uff18\071\uff18\073\uff18\074\uff18\076\uff18\100\uff18\104" +
    "\uff18\147\uff18\150\uff18\155\uff18\156\uff18\157\uff18\160\uff18" +
    "\161\uff18\162\uff18\163\uff18\001\002\000\144\004\100\005" +
    "\105\006\053\007\065\010\113\011\111\012\060\013\055" +
    "\014\115\016\057\021\054\022\230\023\056\024\243\026" +
    "\107\030\261\031\242\032\304\034\263\035\253\036\260" +
    "\037\u01c6\040\262\041\u01c1\042\266\043\303\044\264\045" +
    "\302\046\254\047\305\050\234\051\101\053\276\064\307" +
    "\071\233\073\066\074\077\076\061\100\220\104\270\147" +
    "\134\150\156\155\122\156\051\157\120\160\117\161\052" +
    "\162\067\163\226\001\002\000\044\051\101\073\066\074" +
    "\077\076\141\135\153\136\142\145\143\146\150\147\134" +
    "\150\156\155\122\156\051\157\120\160\117\161\052\162" +
    "\067\163\200\001\002\000\004\152\u01c9\001\002\000\004" +
    "\152\ufe93\001\002\000\144\004\uff16\005\uff16\006\uff16\007" +
    "\uff16\010\uff16\011\uff16\012\uff16\013\uff16\014\uff16\016\uff16" +
    "\021\uff16\022\uff16\023\uff16\024\uff16\026\uff16\030\uff16\031" +
    "\uff16\032\uff16\034\uff16\035\uff16\036\uff16\037\uff16\040\uff16" +
    "\041\uff16\042\uff16\043\uff16\044\uff16\045\uff16\046\uff16\047" +
    "\uff16\050\uff16\051\uff16\053\uff16\064\uff16\071\uff16\073\uff16" +
    "\074\uff16\076\uff16\100\uff16\104\uff16\147\uff16\150\uff16\155" +
    "\uff16\156\uff16\157\uff16\160\uff16\161\uff16\162\uff16\163\uff16" +
    "\001\002\000\146\004\100\005\105\006\053\007\065\010" +
    "\113\011\111\012\060\013\055\014\115\016\057\021\054" +
    "\022\230\023\056\024\243\026\107\030\261\031\242\032" +
    "\304\034\263\035\253\036\260\037\uff19\040\262\041\uff19" +
    "\042\266\043\303\044\264\045\302\046\254\047\305\050" +
    "\234\051\101\053\276\064\307\071\233\073\066\074\077" +
    "\076\061\100\220\101\uff19\104\270\147\134\150\156\155" +
    "\122\156\051\157\120\160\117\161\052\162\067\163\226" +
    "\001\002\000\144\004\uff17\005\uff17\006\uff17\007\uff17\010" +
    "\uff17\011\uff17\012\uff17\013\uff17\014\uff17\016\uff17\021\uff17" +
    "\022\uff17\023\uff17\024\uff17\026\uff17\030\uff17\031\uff17\032" +
    "\uff17\034\uff17\035\uff17\036\uff17\037\uff17\040\uff17\041\uff17" +
    "\042\uff17\043\uff17\044\uff17\045\uff17\046\uff17\047\uff17\050" +
    "\uff17\051\uff17\053\uff17\064\uff17\071\uff17\073\uff17\074\uff17" +
    "\076\uff17\100\uff17\104\uff17\147\uff17\150\uff17\155\uff17\156" +
    "\uff17\157\uff17\160\uff17\161\uff17\162\uff17\163\uff17\001\002" +
    "\000\146\004\uff78\005\uff78\006\uff78\007\uff78\010\uff78\011" +
    "\uff78\012\uff78\013\uff78\014\uff78\016\uff78\021\uff78\022\uff78" +
    "\023\uff78\024\uff78\026\uff78\030\uff78\031\uff78\032\uff78\034" +
    "\uff78\035\uff78\036\uff78\037\uff78\040\uff78\041\uff78\042\uff78" +
    "\043\uff78\044\uff78\045\uff78\046\uff78\047\uff78\050\uff78\051" +
    "\uff78\053\uff78\064\uff78\071\uff78\073\uff78\074\uff78\076\uff78" +
    "\100\uff78\101\uff78\104\uff78\147\uff78\150\uff78\155\uff78\156" +
    "\uff78\157\uff78\160\uff78\161\uff78\162\uff78\163\uff78\001\002" +
    "\000\010\037\uff1a\041\uff1a\101\uff1a\001\002\000\144\004" +
    "\uff15\005\uff15\006\uff15\007\uff15\010\uff15\011\uff15\012\uff15" +
    "\013\uff15\014\uff15\016\uff15\021\uff15\022\uff15\023\uff15\024" +
    "\uff15\026\uff15\030\uff15\031\uff15\032\uff15\034\uff15\035\uff15" +
    "\036\uff15\037\uff15\040\uff15\041\uff15\042\uff15\043\uff15\044" +
    "\uff15\045\uff15\046\uff15\047\uff15\050\uff15\051\uff15\053\uff15" +
    "\064\uff15\071\uff15\073\uff15\074\uff15\076\uff15\100\uff15\104" +
    "\uff15\147\uff15\150\uff15\155\uff15\156\uff15\157\uff15\160\uff15" +
    "\161\uff15\162\uff15\163\uff15\001\002\000\150\004\uff1e\005" +
    "\uff1e\006\uff1e\007\uff1e\010\uff1e\011\uff1e\012\uff1e\013\uff1e" +
    "\014\uff1e\016\uff1e\021\uff1e\022\uff1e\023\uff1e\024\uff1e\026" +
    "\uff1e\030\uff1e\031\uff1e\032\uff1e\033\uff1e\034\uff1e\035\uff1e" +
    "\036\uff1e\037\uff1e\040\uff1e\041\uff1e\042\uff1e\043\uff1e\044" +
    "\uff1e\045\uff1e\046\uff1e\047\uff1e\050\uff1e\051\uff1e\053\uff1e" +
    "\064\uff1e\071\uff1e\073\uff1e\074\uff1e\076\uff1e\100\uff1e\101" +
    "\uff1e\104\uff1e\147\uff1e\150\uff1e\155\uff1e\156\uff1e\157\uff1e" +
    "\160\uff1e\161\uff1e\162\uff1e\163\uff1e\001\002\000\006\104" +
    "\uff6f\105\324\001\002\000\004\076\u01d2\001\002\000\074" +
    "\004\100\005\105\006\053\007\065\010\113\011\111\012" +
    "\060\013\055\014\115\016\057\021\054\023\056\026\107" +
    "\051\101\064\307\071\233\073\066\074\077\076\061\104" +
    "\uff43\147\134\150\156\155\122\156\051\157\120\160\117" +
    "\161\052\162\067\163\337\001\002\000\004\104\u01d4\001" +
    "\002\000\046\051\101\073\066\074\077\076\141\104\ufe95" +
    "\135\153\136\142\145\143\146\150\147\134\150\156\155" +
    "\122\156\051\157\120\160\117\161\052\162\067\163\200" +
    "\001\002\000\004\104\u01d6\001\002\000\036\051\101\073" +
    "\066\074\077\076\061\077\uff3f\147\134\150\156\155\122" +
    "\156\051\157\120\160\117\161\052\162\067\163\362\001" +
    "\002\000\004\077\u01d8\001\002\000\104\022\230\024\243" +
    "\025\u01d9\030\261\031\242\032\304\034\263\035\253\036" +
    "\260\040\262\042\266\043\303\044\264\045\302\046\254" +
    "\047\305\050\234\051\101\053\276\073\066\074\077\076" +
    "\061\100\220\104\270\147\134\150\156\155\122\156\051" +
    "\157\120\160\117\161\052\162\067\163\u0125\001\002\000" +
    "\004\076\u01da\001\002\000\044\051\101\073\066\074\077" +
    "\076\141\135\153\136\142\145\143\146\150\147\134\150" +
    "\156\155\122\156\051\157\120\160\117\161\052\162\067" +
    "\163\200\001\002\000\006\077\u01dc\105\214\001\002\000" +
    "\102\022\230\024\243\030\261\031\242\032\304\034\263" +
    "\035\253\036\260\040\262\042\266\043\303\044\264\045" +
    "\302\046\254\047\305\050\234\051\101\053\276\073\066" +
    "\074\077\076\061\100\220\104\270\147\134\150\156\155" +
    "\122\156\051\157\120\160\117\161\052\162\067\163\u0125" +
    "\001\002\000\044\051\101\073\066\074\077\076\141\135" +
    "\153\136\142\145\143\146\150\147\134\150\156\155\122" +
    "\156\051\157\120\160\117\161\052\162\067\163\200\001" +
    "\002\000\004\077\u01df\001\002\000\102\022\230\024\243" +
    "\030\261\031\242\032\304\034\263\035\253\036\260\040" +
    "\262\042\266\043\303\044\264\045\302\046\254\047\305" +
    "\050\234\051\101\053\276\073\066\074\077\076\061\100" +
    "\220\104\270\147\134\150\156\155\122\156\051\157\120" +
    "\160\117\161\052\162\067\163\u0125\001\002\000\146\004" +
    "\uff72\005\uff72\006\uff72\007\uff72\010\uff72\011\uff72\012\uff72" +
    "\013\uff72\014\uff72\016\uff72\021\uff72\022\uff72\023\uff72\024" +
    "\uff72\026\uff72\030\uff72\031\uff72\032\uff72\034\uff72\035\uff72" +
    "\036\uff72\037\uff72\040\uff72\041\uff72\042\uff72\043\uff72\044" +
    "\uff72\045\uff72\046\uff72\047\uff72\050\uff72\051\uff72\053\uff72" +
    "\064\uff72\071\uff72\073\uff72\074\uff72\076\uff72\100\uff72\101" +
    "\uff72\104\uff72\147\uff72\150\uff72\155\uff72\156\uff72\157\uff72" +
    "\160\uff72\161\uff72\162\uff72\163\uff72\001\002\000\012\102" +
    "\u018f\104\u01e2\153\uff07\154\uff07\001\002\000\150\004\uff32" +
    "\005\uff32\006\uff32\007\uff32\010\uff32\011\uff32\012\uff32\013" +
    "\uff32\014\uff32\016\uff32\021\uff32\022\uff32\023\uff32\024\uff32" +
    "\026\uff32\030\uff32\031\uff32\032\uff32\033\uff32\034\uff32\035" +
    "\uff32\036\uff32\037\uff32\040\uff32\041\uff32\042\uff32\043\uff32" +
    "\044\uff32\045\uff32\046\uff32\047\uff32\050\uff32\051\uff32\053" +
    "\uff32\064\uff32\071\uff32\073\uff32\074\uff32\076\uff32\100\uff32" +
    "\101\uff32\104\uff32\147\uff32\150\uff32\155\uff32\156\uff32\157" +
    "\uff32\160\uff32\161\uff32\162\uff32\163\uff32\001\002\000\150" +
    "\004\uff14\005\uff14\006\uff14\007\uff14\010\uff14\011\uff14\012" +
    "\uff14\013\uff14\014\uff14\016\uff14\021\uff14\022\uff14\023\uff14" +
    "\024\uff14\026\uff14\030\uff14\031\uff14\032\uff14\033\uff14\034" +
    "\uff14\035\uff14\036\uff14\037\uff14\040\uff14\041\uff14\042\uff14" +
    "\043\uff14\044\uff14\045\uff14\046\uff14\047\uff14\050\uff14\051" +
    "\uff14\053\uff14\064\uff14\071\uff14\073\uff14\074\uff14\076\uff14" +
    "\100\uff14\101\uff14\104\uff14\147\uff14\150\uff14\155\uff14\156" +
    "\uff14\157\uff14\160\uff14\161\uff14\162\uff14\163\uff14\001\002" +
    "\000\072\077\ufed5\101\ufed5\103\ufed5\104\ufed5\105\ufed5\122" +
    "\ufed5\123\ufed5\124\ufed5\125\ufed5\126\ufed5\127\ufed5\130\ufed5" +
    "\131\ufed5\132\ufed5\133\ufed5\134\ufed5\135\ufed5\136\ufed5\137" +
    "\ufed5\140\ufed5\141\ufed5\142\ufed5\143\ufed5\144\ufed5\147\ufed5" +
    "\150\ufed5\151\ufed5\152\ufed5\001\002\000\072\077\ufed6\101" +
    "\ufed6\103\ufed6\104\ufed6\105\ufed6\122\ufed6\123\ufed6\124\ufed6" +
    "\125\ufed6\126\ufed6\127\ufed6\130\ufed6\131\ufed6\132\ufed6\133" +
    "\ufed6\134\ufed6\135\ufed6\136\ufed6\137\ufed6\140\ufed6\141\ufed6" +
    "\142\ufed6\143\ufed6\144\ufed6\147\ufed6\150\ufed6\151\ufed6\152" +
    "\ufed6\001\002\000\150\004\uff2e\005\uff2e\006\uff2e\007\uff2e" +
    "\010\uff2e\011\uff2e\012\uff2e\013\uff2e\014\uff2e\016\uff2e\021" +
    "\uff2e\022\uff2e\023\uff2e\024\uff2e\026\uff2e\030\uff2e\031\uff2e" +
    "\032\uff2e\033\uff2e\034\uff2e\035\uff2e\036\uff2e\037\uff2e\040" +
    "\uff2e\041\uff2e\042\uff2e\043\uff2e\044\uff2e\045\uff2e\046\uff2e" +
    "\047\uff2e\050\uff2e\051\uff2e\053\uff2e\064\uff2e\071\uff2e\073" +
    "\uff2e\074\uff2e\076\uff2e\100\uff2e\101\uff2e\104\uff2e\147\uff2e" +
    "\150\uff2e\155\uff2e\156\uff2e\157\uff2e\160\uff2e\161\uff2e\162" +
    "\uff2e\163\uff2e\001\002\000\032\030\u0114\051\101\073\066" +
    "\074\077\076\u010f\155\122\156\051\157\120\160\117\161" +
    "\052\162\067\163\u010d\001\002\000\074\004\100\005\105" +
    "\006\053\007\065\010\113\011\111\012\060\013\055\014" +
    "\115\016\057\021\054\023\056\026\107\051\101\064\307" +
    "\071\233\073\066\074\077\076\061\104\uff43\147\134\150" +
    "\156\155\122\156\051\157\120\160\117\161\052\162\067" +
    "\163\337\001\002\000\004\104\u01ea\001\002\000\046\051" +
    "\101\073\066\074\077\076\141\104\ufe95\135\153\136\142" +
    "\145\143\146\150\147\134\150\156\155\122\156\051\157" +
    "\120\160\117\161\052\162\067\163\200\001\002\000\004" +
    "\104\u01ec\001\002\000\036\051\101\073\066\074\077\076" +
    "\061\077\uff3f\147\134\150\156\155\122\156\051\157\120" +
    "\160\117\161\052\162\067\163\362\001\002\000\004\077" +
    "\u01ee\001\002\000\004\100\u01ef\001\002\000\032\030\u0114" +
    "\051\101\073\066\074\077\076\u010f\155\122\156\051\157" +
    "\120\160\117\161\052\162\067\163\u010d\001\002\000\034" +
    "\030\u0114\051\101\073\066\074\077\076\u010f\101\u01f1\155" +
    "\122\156\051\157\120\160\117\161\052\162\067\163\u010d" +
    "\001\002\000\150\004\uff0f\005\uff0f\006\uff0f\007\uff0f\010" +
    "\uff0f\011\uff0f\012\uff0f\013\uff0f\014\uff0f\016\uff0f\021\uff0f" +
    "\022\uff0f\023\uff0f\024\uff0f\026\uff0f\030\uff0f\031\uff0f\032" +
    "\uff0f\033\uff0f\034\uff0f\035\uff0f\036\uff0f\037\uff0f\040\uff0f" +
    "\041\uff0f\042\uff0f\043\uff0f\044\uff0f\045\uff0f\046\uff0f\047" +
    "\uff0f\050\uff0f\051\uff0f\053\uff0f\064\uff0f\071\uff0f\073\uff0f" +
    "\074\uff0f\076\uff0f\100\uff0f\101\uff0f\104\uff0f\147\uff0f\150" +
    "\uff0f\155\uff0f\156\uff0f\157\uff0f\160\uff0f\161\uff0f\162\uff0f" +
    "\163\uff0f\001\002\000\034\030\u0114\051\101\073\066\074" +
    "\077\076\u010f\101\u01f3\155\122\156\051\157\120\160\117" +
    "\161\052\162\067\163\u010d\001\002\000\150\004\uff10\005" +
    "\uff10\006\uff10\007\uff10\010\uff10\011\uff10\012\uff10\013\uff10" +
    "\014\uff10\016\uff10\021\uff10\022\uff10\023\uff10\024\uff10\026" +
    "\uff10\030\uff10\031\uff10\032\uff10\033\uff10\034\uff10\035\uff10" +
    "\036\uff10\037\uff10\040\uff10\041\uff10\042\uff10\043\uff10\044" +
    "\uff10\045\uff10\046\uff10\047\uff10\050\uff10\051\uff10\053\uff10" +
    "\064\uff10\071\uff10\073\uff10\074\uff10\076\uff10\100\uff10\101" +
    "\uff10\104\uff10\147\uff10\150\uff10\155\uff10\156\uff10\157\uff10" +
    "\160\uff10\161\uff10\162\uff10\163\uff10\001\002\000\004\163" +
    "\126\001\002\000\006\104\uff70\105\324\001\002\000\150" +
    "\004\uff5c\005\uff5c\006\uff5c\007\uff5c\010\uff5c\011\uff5c\012" +
    "\uff5c\013\uff5c\014\uff5c\016\uff5c\021\uff5c\022\uff5c\023\uff5c" +
    "\024\uff5c\026\uff5c\030\uff5c\031\uff5c\032\uff5c\033\uff5c\034" +
    "\uff5c\035\uff5c\036\uff5c\037\uff5c\040\uff5c\041\uff5c\042\uff5c" +
    "\043\uff5c\044\uff5c\045\uff5c\046\uff5c\047\uff5c\050\uff5c\051" +
    "\uff5c\053\uff5c\064\uff5c\071\uff5c\073\uff5c\074\uff5c\076\uff5c" +
    "\100\uff5c\101\uff5c\104\uff5c\147\uff5c\150\uff5c\155\uff5c\156" +
    "\uff5c\157\uff5c\160\uff5c\161\uff5c\162\uff5c\163\uff5c\001\002" +
    "\000\034\016\057\021\054\051\101\073\066\074\077\076" +
    "\061\155\122\156\051\157\120\160\117\161\052\162\067" +
    "\163\u0188\001\002\000\006\077\u01f9\105\u0192\001\002\000" +
    "\102\022\230\024\243\030\261\031\242\032\304\034\263" +
    "\035\253\036\260\040\262\042\266\043\303\044\264\045" +
    "\302\046\254\047\305\050\234\051\101\053\276\073\066" +
    "\074\077\076\061\100\220\104\270\147\134\150\156\155" +
    "\122\156\051\157\120\160\117\161\052\162\067\163\u0125" +
    "\001\002\000\004\077\u01fb\001\002\000\100\077\ufee3\101" +
    "\ufee3\102\ufee3\103\ufee3\104\ufee3\105\ufee3\122\ufee3\123\ufee3" +
    "\124\ufee3\125\ufee3\126\ufee3\127\ufee3\130\ufee3\131\ufee3\132" +
    "\ufee3\133\ufee3\134\ufee3\135\ufee3\136\ufee3\137\ufee3\140\ufee3" +
    "\141\ufee3\142\ufee3\143\ufee3\144\ufee3\147\ufee3\150\ufee3\151" +
    "\ufee3\152\ufee3\153\ufee3\154\ufee3\001\002\000\100\076\u01fd" +
    "\077\uff01\101\uff01\103\uff01\104\uff01\105\uff01\122\uff01\123" +
    "\uff01\124\uff01\125\uff01\126\uff01\127\uff01\130\uff01\131\uff01" +
    "\132\uff01\133\uff01\134\uff01\135\uff01\136\uff01\137\uff01\140" +
    "\uff01\141\uff01\142\uff01\143\uff01\144\uff01\147\uff01\150\uff01" +
    "\151\uff01\152\uff01\153\uff01\154\uff01\001\002\000\046\051" +
    "\101\073\066\074\077\076\141\077\ufedd\135\153\136\142" +
    "\145\143\146\150\147\134\150\156\155\122\156\051\157" +
    "\120\160\117\161\052\162\067\163\200\001\002\000\004" +
    "\077\u01ff\001\002\000\100\077\ufee0\101\ufee0\102\ufee0\103" +
    "\ufee0\104\ufee0\105\ufee0\122\ufee0\123\ufee0\124\ufee0\125\ufee0" +
    "\126\ufee0\127\ufee0\130\ufee0\131\ufee0\132\ufee0\133\ufee0\134" +
    "\ufee0\135\ufee0\136\ufee0\137\ufee0\140\ufee0\141\ufee0\142\ufee0" +
    "\143\ufee0\144\ufee0\147\ufee0\150\ufee0\151\ufee0\152\ufee0\153" +
    "\ufee0\154\ufee0\001\002\000\044\051\101\073\066\074\077" +
    "\076\141\135\153\136\142\145\143\146\150\147\134\150" +
    "\156\155\122\156\051\157\120\160\117\161\052\162\067" +
    "\163\u0205\001\002\000\044\051\101\073\066\074\077\076" +
    "\141\135\153\136\142\145\143\146\150\147\134\150\156" +
    "\155\122\156\051\157\120\160\117\161\052\162\067\163" +
    "\u0205\001\002\000\044\051\101\073\066\074\077\076\141" +
    "\135\153\136\142\145\143\146\150\147\134\150\156\155" +
    "\122\156\051\157\120\160\117\161\052\162\067\163\u0205" +
    "\001\002\000\044\051\101\073\066\074\077\076\141\135" +
    "\153\136\142\145\143\146\150\147\134\150\156\155\122" +
    "\156\051\157\120\160\117\161\052\162\067\163\u0205\001" +
    "\002\000\054\077\ufeb9\101\ufeb9\103\ufeb9\104\ufeb9\105\ufeb9" +
    "\122\ufeb9\123\ufeb9\124\ufeb9\125\ufeb9\126\ufeb9\127\ufeb9\130" +
    "\u0206\131\u0207\132\u0208\133\ufeb9\134\ufeb9\141\ufeb9\142\ufeb9" +
    "\143\ufeb9\151\ufeb9\152\ufeb9\001\002\000\102\076\203\077" +
    "\ufed7\101\ufed7\102\202\103\ufed7\104\ufed7\105\ufed7\122\ufed7" +
    "\123\ufed7\124\ufed7\125\ufed7\126\ufed7\127\ufed7\130\ufed7\131" +
    "\ufed7\132\ufed7\133\ufed7\134\ufed7\135\ufed7\136\ufed7\137\ufed7" +
    "\140\ufed7\141\ufed7\142\ufed7\143\ufed7\144\ufed7\147\ufed7\150" +
    "\ufed7\151\ufed7\152\ufed7\153\201\154\204\001\002\000\044" +
    "\051\101\073\066\074\077\076\141\135\153\136\142\145" +
    "\143\146\150\147\134\150\156\155\122\156\051\157\120" +
    "\160\117\161\052\162\067\163\u0205\001\002\000\044\051" +
    "\101\073\066\074\077\076\141\135\153\136\142\145\143" +
    "\146\150\147\134\150\156\155\122\156\051\157\120\160" +
    "\117\161\052\162\067\163\u0205\001\002\000\044\051\101" +
    "\073\066\074\077\076\141\135\153\136\142\145\143\146" +
    "\150\147\134\150\156\155\122\156\051\157\120\160\117" +
    "\161\052\162\067\163\u0205\001\002\000\060\077\ufebd\101" +
    "\ufebd\103\ufebd\104\ufebd\105\ufebd\122\ufebd\123\ufebd\124\ufebd" +
    "\125\ufebd\126\ufebd\127\ufebd\130\ufebd\131\ufebd\132\ufebd\133" +
    "\ufebd\134\ufebd\135\u020a\136\u020b\141\ufebd\142\ufebd\143\ufebd" +
    "\151\ufebd\152\ufebd\001\002\000\044\051\101\073\066\074" +
    "\077\076\141\135\153\136\142\145\143\146\150\147\134" +
    "\150\156\155\122\156\051\157\120\160\117\161\052\162" +
    "\067\163\u0205\001\002\000\044\051\101\073\066\074\077" +
    "\076\141\135\153\136\142\145\143\146\150\147\134\150" +
    "\156\155\122\156\051\157\120\160\117\161\052\162\067" +
    "\163\u0205\001\002\000\066\077\ufec1\101\ufec1\103\ufec1\104" +
    "\ufec1\105\ufec1\122\ufec1\123\ufec1\124\ufec1\125\ufec1\126\ufec1" +
    "\127\ufec1\130\ufec1\131\ufec1\132\ufec1\133\ufec1\134\ufec1\135" +
    "\ufec1\136\ufec1\137\u020e\140\u020f\141\ufec1\142\ufec1\143\ufec1" +
    "\144\u020d\151\ufec1\152\ufec1\001\002\000\044\051\101\073" +
    "\066\074\077\076\141\135\153\136\142\145\143\146\150" +
    "\147\134\150\156\155\122\156\051\157\120\160\117\161" +
    "\052\162\067\163\u0205\001\002\000\044\051\101\073\066" +
    "\074\077\076\141\135\153\136\142\145\143\146\150\147" +
    "\134\150\156\155\122\156\051\157\120\160\117\161\052" +
    "\162\067\163\u0205\001\002\000\044\051\101\073\066\074" +
    "\077\076\141\135\153\136\142\145\143\146\150\147\134" +
    "\150\156\155\122\156\051\157\120\160\117\161\052\162" +
    "\067\163\u0205\001\002\000\066\077\ufec5\101\ufec5\103\ufec5" +
    "\104\ufec5\105\ufec5\122\ufec5\123\ufec5\124\ufec5\125\ufec5\126" +
    "\ufec5\127\ufec5\130\ufec5\131\ufec5\132\ufec5\133\ufec5\134\ufec5" +
    "\135\ufec5\136\ufec5\137\ufec5\140\ufec5\141\ufec5\142\ufec5\143" +
    "\ufec5\144\ufec5\151\ufec5\152\ufec5\001\002\000\066\077\ufec6" +
    "\101\ufec6\103\ufec6\104\ufec6\105\ufec6\122\ufec6\123\ufec6\124" +
    "\ufec6\125\ufec6\126\ufec6\127\ufec6\130\ufec6\131\ufec6\132\ufec6" +
    "\133\ufec6\134\ufec6\135\ufec6\136\ufec6\137\ufec6\140\ufec6\141" +
    "\ufec6\142\ufec6\143\ufec6\144\ufec6\151\ufec6\152\ufec6\001\002" +
    "\000\066\077\ufec4\101\ufec4\103\ufec4\104\ufec4\105\ufec4\122" +
    "\ufec4\123\ufec4\124\ufec4\125\ufec4\126\ufec4\127\ufec4\130\ufec4" +
    "\131\ufec4\132\ufec4\133\ufec4\134\ufec4\135\ufec4\136\ufec4\137" +
    "\ufec4\140\ufec4\141\ufec4\142\ufec4\143\ufec4\144\ufec4\151\ufec4" +
    "\152\ufec4\001\002\000\066\077\ufec2\101\ufec2\103\ufec2\104" +
    "\ufec2\105\ufec2\122\ufec2\123\ufec2\124\ufec2\125\ufec2\126\ufec2" +
    "\127\ufec2\130\ufec2\131\ufec2\132\ufec2\133\ufec2\134\ufec2\135" +
    "\ufec2\136\ufec2\137\u020e\140\u020f\141\ufec2\142\ufec2\143\ufec2" +
    "\144\u020d\151\ufec2\152\ufec2\001\002\000\060\077\ufebe\101" +
    "\ufebe\103\ufebe\104\ufebe\105\ufebe\122\ufebe\123\ufebe\124\ufebe" +
    "\125\ufebe\126\ufebe\127\ufebe\130\ufebe\131\ufebe\132\ufebe\133" +
    "\ufebe\134\ufebe\135\u020a\136\u020b\141\ufebe\142\ufebe\143\ufebe" +
    "\151\ufebe\152\ufebe\001\002\000\060\077\ufebf\101\ufebf\103" +
    "\ufebf\104\ufebf\105\ufebf\122\ufebf\123\ufebf\124\ufebf\125\ufebf" +
    "\126\ufebf\127\ufebf\130\ufebf\131\ufebf\132\ufebf\133\ufebf\134" +
    "\ufebf\135\u020a\136\u020b\141\ufebf\142\ufebf\143\ufebf\151\ufebf" +
    "\152\ufebf\001\002\000\054\077\ufeb8\101\ufeb8\103\ufeb8\104" +
    "\ufeb8\105\ufeb8\122\ufeb8\123\ufeb8\124\ufeb8\125\ufeb8\126\ufeb8" +
    "\127\ufeb8\130\u0206\131\u0207\132\u0208\133\ufeb8\134\ufeb8\141" +
    "\ufeb8\142\ufeb8\143\ufeb8\151\ufeb8\152\ufeb8\001\002\000\054" +
    "\077\ufeba\101\ufeba\103\ufeba\104\ufeba\105\ufeba\122\ufeba\123" +
    "\ufeba\124\ufeba\125\ufeba\126\ufeba\127\ufeba\130\u0206\131\u0207" +
    "\132\u0208\133\ufeba\134\ufeba\141\ufeba\142\ufeba\143\ufeba\151" +
    "\ufeba\152\ufeba\001\002\000\054\077\ufebb\101\ufebb\103\ufebb" +
    "\104\ufebb\105\ufebb\122\ufebb\123\ufebb\124\ufebb\125\ufebb\126" +
    "\ufebb\127\ufebb\130\u0206\131\u0207\132\u0208\133\ufebb\134\ufebb" +
    "\141\ufebb\142\ufebb\143\ufebb\151\ufebb\152\ufebb\001\002\000" +
    "\044\051\101\073\066\074\077\076\141\135\153\136\142" +
    "\145\143\146\150\147\134\150\156\155\122\156\051\157" +
    "\120\160\117\161\052\162\067\163\u0205\001\002\000\030" +
    "\077\ufeaf\101\ufeaf\103\ufeaf\104\ufeaf\105\ufeaf\133\ufeaf\134" +
    "\ufeaf\142\ufeaf\143\u021b\151\ufeaf\152\ufeaf\001\002\000\044" +
    "\051\101\073\066\074\077\076\141\135\153\136\142\145" +
    "\143\146\150\147\134\150\156\155\122\156\051\157\120" +
    "\160\117\161\052\162\067\163\u0205\001\002\000\032\077" +
    "\ufeb1\101\ufeb1\103\ufeb1\104\ufeb1\105\ufeb1\133\ufeb1\134\ufeb1" +
    "\141\u021d\142\ufeb1\143\ufeb1\151\ufeb1\152\ufeb1\001\002\000" +
    "\044\051\101\073\066\074\077\076\141\135\153\136\142" +
    "\145\143\146\150\147\134\150\156\155\122\156\051\157" +
    "\120\160\117\161\052\162\067\163\u0205\001\002\000\036" +
    "\077\ufeb3\101\ufeb3\103\ufeb3\104\ufeb3\105\ufeb3\124\u0220\127" +
    "\u021f\133\ufeb3\134\ufeb3\141\ufeb3\142\ufeb3\143\ufeb3\151\ufeb3" +
    "\152\ufeb3\001\002\000\044\051\101\073\066\074\077\076" +
    "\141\135\153\136\142\145\143\146\150\147\134\150\156" +
    "\155\122\156\051\157\120\160\117\161\052\162\067\163" +
    "\u0205\001\002\000\044\051\101\073\066\074\077\076\141" +
    "\135\153\136\142\145\143\146\150\147\134\150\156\155" +
    "\122\156\051\157\120\160\117\161\052\162\067\163\u0205" +
    "\001\002\000\046\077\ufeb6\101\ufeb6\103\ufeb6\104\ufeb6\105" +
    "\ufeb6\122\u0201\123\u0200\124\ufeb6\125\u0203\126\u0202\127\ufeb6" +
    "\133\ufeb6\134\ufeb6\141\ufeb6\142\ufeb6\143\ufeb6\151\ufeb6\152" +
    "\ufeb6\001\002\000\046\077\ufeb5\101\ufeb5\103\ufeb5\104\ufeb5" +
    "\105\ufeb5\122\u0201\123\u0200\124\ufeb5\125\u0203\126\u0202\127" +
    "\ufeb5\133\ufeb5\134\ufeb5\141\ufeb5\142\ufeb5\143\ufeb5\151\ufeb5" +
    "\152\ufeb5\001\002\000\006\101\uff81\105\u0227\001\002\000" +
    "\006\101\uff7e\105\uff7e\001\002\000\004\101\u0226\001\002" +
    "\000\076\077\uff82\101\uff82\103\uff82\104\uff82\105\uff82\122" +
    "\uff82\123\uff82\124\uff82\125\uff82\126\uff82\127\uff82\130\uff82" +
    "\131\uff82\132\uff82\133\uff82\134\uff82\135\uff82\136\uff82\137" +
    "\uff82\140\uff82\141\uff82\142\uff82\143\uff82\144\uff82\147\uff82" +
    "\150\uff82\151\uff82\152\uff82\153\uff82\154\uff82\001\002\000" +
    "\046\051\101\073\066\074\077\076\141\100\171\135\153" +
    "\136\142\145\143\146\150\147\134\150\156\155\122\156" +
    "\051\157\120\160\117\161\052\162\067\163\200\001\002" +
    "\000\006\101\uff7f\105\uff7f\001\002\000\044\051\101\073" +
    "\066\074\077\076\141\135\153\136\142\145\143\146\150" +
    "\147\134\150\156\155\122\156\051\157\120\160\117\161" +
    "\052\162\067\163\200\001\002\000\044\051\101\073\066" +
    "\074\077\076\141\135\153\136\142\145\143\146\150\147" +
    "\134\150\156\155\122\156\051\157\120\160\117\161\052" +
    "\162\067\163\u0205\001\002\000\024\077\ufeab\101\ufeab\103" +
    "\ufeab\104\ufeab\105\ufeab\133\u022c\134\ufeab\151\ufeab\152\ufeab" +
    "\001\002\000\044\051\101\073\066\074\077\076\141\135" +
    "\153\136\142\145\143\146\150\147\134\150\156\155\122" +
    "\156\051\157\120\160\117\161\052\162\067\163\u0205\001" +
    "\002\000\026\077\ufead\101\ufead\103\ufead\104\ufead\105\ufead" +
    "\133\ufead\134\ufead\142\u0219\151\ufead\152\ufead\001\002\000" +
    "\004\152\u022f\001\002\000\044\051\101\073\066\074\077" +
    "\076\141\135\153\136\142\145\143\146\150\147\134\150" +
    "\156\155\122\156\051\157\120\160\117\161\052\162\067" +
    "\163\u0205\001\002\000\016\077\ufea9\101\ufea9\103\ufea9\104" +
    "\ufea9\105\ufea9\152\ufea9\001\002\000\066\077\ufece\101\ufece" +
    "\103\ufece\104\ufece\105\ufece\122\ufece\123\ufece\124\ufece\125" +
    "\ufece\126\ufece\127\ufece\130\ufece\131\ufece\132\ufece\133\ufece" +
    "\134\ufece\135\ufece\136\ufece\137\ufece\140\ufece\141\ufece\142" +
    "\ufece\143\ufece\144\ufece\151\ufece\152\ufece\001\002\000\066" +
    "\077\ufed2\101\ufed2\103\ufed2\104\ufed2\105\ufed2\122\ufed2\123" +
    "\ufed2\124\ufed2\125\ufed2\126\ufed2\127\ufed2\130\ufed2\131\ufed2" +
    "\132\ufed2\133\ufed2\134\ufed2\135\ufed2\136\ufed2\137\ufed2\140" +
    "\ufed2\141\ufed2\142\ufed2\143\ufed2\144\ufed2\151\ufed2\152\ufed2" +
    "\001\002\000\066\077\ufecc\101\ufecc\103\ufecc\104\ufecc\105" +
    "\ufecc\122\ufecc\123\ufecc\124\ufecc\125\ufecc\126\ufecc\127\ufecc" +
    "\130\ufecc\131\ufecc\132\ufecc\133\ufecc\134\ufecc\135\ufecc\136" +
    "\ufecc\137\ufecc\140\ufecc\141\ufecc\142\ufecc\143\ufecc\144\ufecc" +
    "\151\ufecc\152\ufecc\001\002\000\066\077\ufecb\101\ufecb\103" +
    "\ufecb\104\ufecb\105\ufecb\122\ufecb\123\ufecb\124\ufecb\125\ufecb" +
    "\126\ufecb\127\ufecb\130\ufecb\131\ufecb\132\ufecb\133\ufecb\134" +
    "\ufecb\135\ufecb\136\ufecb\137\ufecb\140\ufecb\141\ufecb\142\ufecb" +
    "\143\ufecb\144\ufecb\151\ufecb\152\ufecb\001\002\000\066\077" +
    "\ufed1\101\ufed1\103\ufed1\104\ufed1\105\ufed1\122\ufed1\123\ufed1" +
    "\124\ufed1\125\ufed1\126\ufed1\127\ufed1\130\ufed1\131\ufed1\132" +
    "\ufed1\133\ufed1\134\ufed1\135\ufed1\136\ufed1\137\ufed1\140\ufed1" +
    "\141\ufed1\142\ufed1\143\ufed1\144\ufed1\151\ufed1\152\ufed1\001" +
    "\002\000\004\077\u023a\001\002\000\004\077\u0238\001\002" +
    "\000\044\051\101\073\066\074\077\076\141\135\153\136" +
    "\142\145\143\146\150\147\134\150\156\155\122\156\051" +
    "\157\120\160\117\161\052\162\067\163\u0205\001\002\000" +
    "\066\077\ufec8\101\ufec8\103\ufec8\104\ufec8\105\ufec8\122\ufec8" +
    "\123\ufec8\124\ufec8\125\ufec8\126\ufec8\127\ufec8\130\ufec8\131" +
    "\ufec8\132\ufec8\133\ufec8\134\ufec8\135\ufec8\136\ufec8\137\ufec8" +
    "\140\ufec8\141\ufec8\142\ufec8\143\ufec8\144\ufec8\151\ufec8\152" +
    "\ufec8\001\002\000\132\051\101\073\066\074\077\076\141" +
    "\077\ufeff\101\ufeff\102\ufeff\103\ufeff\104\ufeff\105\ufeff\122" +
    "\ufeff\123\ufeff\124\ufeff\125\ufeff\126\ufeff\127\ufeff\130\ufeff" +
    "\131\ufeff\132\ufeff\133\ufeff\134\ufeff\135\ufeff\136\ufeff\137" +
    "\ufeff\140\ufeff\141\ufeff\142\ufeff\143\ufeff\144\ufeff\145\143" +
    "\146\150\147\ufeff\150\ufeff\151\ufeff\152\ufeff\153\ufeff\154" +
    "\ufeff\155\122\156\051\157\120\160\117\161\052\162\067" +
    "\163\u0205\001\002\000\066\077\ufec9\101\ufec9\103\ufec9\104" +
    "\ufec9\105\ufec9\122\ufec9\123\ufec9\124\ufec9\125\ufec9\126\ufec9" +
    "\127\ufec9\130\ufec9\131\ufec9\132\ufec9\133\ufec9\134\ufec9\135" +
    "\ufec9\136\ufec9\137\ufec9\140\ufec9\141\ufec9\142\ufec9\143\ufec9" +
    "\144\ufec9\151\ufec9\152\ufec9\001\002\000\044\051\ufe9b\073" +
    "\ufe9b\074\ufe9b\076\ufe9b\135\ufe9b\136\ufe9b\145\ufe9b\146\ufe9b" +
    "\147\ufe9b\150\ufe9b\155\ufe9b\156\ufe9b\157\ufe9b\160\ufe9b\161" +
    "\ufe9b\162\ufe9b\163\ufe9b\001\002\000\044\051\ufea4\073\ufea4" +
    "\074\ufea4\076\ufea4\135\ufea4\136\ufea4\145\ufea4\146\ufea4\147" +
    "\ufea4\150\ufea4\155\ufea4\156\ufea4\157\ufea4\160\ufea4\161\ufea4" +
    "\162\ufea4\163\ufea4\001\002\000\044\051\ufea3\073\ufea3\074" +
    "\ufea3\076\ufea3\135\ufea3\136\ufea3\145\ufea3\146\ufea3\147\ufea3" +
    "\150\ufea3\155\ufea3\156\ufea3\157\ufea3\160\ufea3\161\ufea3\162" +
    "\ufea3\163\ufea3\001\002\000\044\051\ufe9c\073\ufe9c\074\ufe9c" +
    "\076\ufe9c\135\ufe9c\136\ufe9c\145\ufe9c\146\ufe9c\147\ufe9c\150" +
    "\ufe9c\155\ufe9c\156\ufe9c\157\ufe9c\160\ufe9c\161\ufe9c\162\ufe9c" +
    "\163\ufe9c\001\002\000\044\051\ufea1\073\ufea1\074\ufea1\076" +
    "\ufea1\135\ufea1\136\ufea1\145\ufea1\146\ufea1\147\ufea1\150\ufea1" +
    "\155\ufea1\156\ufea1\157\ufea1\160\ufea1\161\ufea1\162\ufea1\163" +
    "\ufea1\001\002\000\044\051\ufe9e\073\ufe9e\074\ufe9e\076\ufe9e" +
    "\135\ufe9e\136\ufe9e\145\ufe9e\146\ufe9e\147\ufe9e\150\ufe9e\155" +
    "\ufe9e\156\ufe9e\157\ufe9e\160\ufe9e\161\ufe9e\162\ufe9e\163\ufe9e" +
    "\001\002\000\044\051\ufe9f\073\ufe9f\074\ufe9f\076\ufe9f\135" +
    "\ufe9f\136\ufe9f\145\ufe9f\146\ufe9f\147\ufe9f\150\ufe9f\155\ufe9f" +
    "\156\ufe9f\157\ufe9f\160\ufe9f\161\ufe9f\162\ufe9f\163\ufe9f\001" +
    "\002\000\044\051\ufea5\073\ufea5\074\ufea5\076\ufea5\135\ufea5" +
    "\136\ufea5\145\ufea5\146\ufea5\147\ufea5\150\ufea5\155\ufea5\156" +
    "\ufea5\157\ufea5\160\ufea5\161\ufea5\162\ufea5\163\ufea5\001\002" +
    "\000\044\051\ufea0\073\ufea0\074\ufea0\076\ufea0\135\ufea0\136" +
    "\ufea0\145\ufea0\146\ufea0\147\ufea0\150\ufea0\155\ufea0\156\ufea0" +
    "\157\ufea0\160\ufea0\161\ufea0\162\ufea0\163\ufea0\001\002\000" +
    "\044\051\101\073\066\074\077\076\141\135\153\136\142" +
    "\145\143\146\150\147\134\150\156\155\122\156\051\157" +
    "\120\160\117\161\052\162\067\163\200\001\002\000\044" +
    "\051\ufe9a\073\ufe9a\074\ufe9a\076\ufe9a\135\ufe9a\136\ufe9a\145" +
    "\ufe9a\146\ufe9a\147\ufe9a\150\ufe9a\155\ufe9a\156\ufe9a\157\ufe9a" +
    "\160\ufe9a\161\ufe9a\162\ufe9a\163\ufe9a\001\002\000\044\051" +
    "\ufe9d\073\ufe9d\074\ufe9d\076\ufe9d\135\ufe9d\136\ufe9d\145\ufe9d" +
    "\146\ufe9d\147\ufe9d\150\ufe9d\155\ufe9d\156\ufe9d\157\ufe9d\160" +
    "\ufe9d\161\ufe9d\162\ufe9d\163\ufe9d\001\002\000\044\051\ufea2" +
    "\073\ufea2\074\ufea2\076\ufea2\135\ufea2\136\ufea2\145\ufea2\146" +
    "\ufea2\147\ufea2\150\ufea2\155\ufea2\156\ufea2\157\ufea2\160\ufea2" +
    "\161\ufea2\162\ufea2\163\ufea2\001\002\000\016\077\ufea6\101" +
    "\ufea6\103\ufea6\104\ufea6\105\ufea6\152\ufea6\001\002\000\066" +
    "\077\ufecf\101\ufecf\103\ufecf\104\ufecf\105\ufecf\122\ufecf\123" +
    "\ufecf\124\ufecf\125\ufecf\126\ufecf\127\ufecf\130\ufecf\131\ufecf" +
    "\132\ufecf\133\ufecf\134\ufecf\135\ufecf\136\ufecf\137\ufecf\140" +
    "\ufecf\141\ufecf\142\ufecf\143\ufecf\144\ufecf\151\ufecf\152\ufecf" +
    "\001\002\000\004\163\126\001\002\000\110\002\uff8f\004" +
    "\uff8f\005\uff8f\006\uff8f\007\uff8f\010\uff8f\011\uff8f\012\uff8f" +
    "\013\uff8f\014\uff8f\016\uff8f\021\uff8f\023\uff8f\026\uff8f\051" +
    "\uff8f\055\uff8f\056\uff8f\057\uff8f\064\uff8f\065\uff8f\066\uff8f" +
    "\067\uff8f\070\uff8f\071\uff8f\072\uff8f\073\uff8f\074\uff8f\076" +
    "\uff8f\155\uff8f\156\uff8f\157\uff8f\160\uff8f\161\uff8f\162\uff8f" +
    "\163\uff8f\001\002\000\006\104\uff8e\105\uff8e\001\002\000" +
    "\004\163\u0271\001\002\000\004\163\u0250\001\002\000\004" +
    "\076\u0251\001\002\000\066\004\100\005\105\006\053\007" +
    "\065\010\113\011\111\012\060\013\055\014\115\016\057" +
    "\021\054\023\056\026\107\051\101\071\u019e\073\066\074" +
    "\077\076\061\077\uffdd\155\122\156\051\157\120\160\117" +
    "\161\052\162\067\163\123\001\002\000\006\077\uffde\105" +
    "\u01a3\001\002\000\004\077\u0254\001\002\000\012\061\ufff1" +
    "\100\ufff1\102\u0255\104\ufff1\001\002\000\004\163\u0265\001" +
    "\002\000\010\061\u0258\100\uffe5\104\uffe5\001\002\000\006" +
    "\100\220\104\u0261\001\002\000\004\163\u0259\001\002\000" +
    "\020\077\uffe2\100\uffe2\102\uffe2\104\uffe2\105\uffe2\153\uffe0" +
    "\154\uffe0\001\002\000\012\100\uffe3\102\uffe3\104\uffe3\105" +
    "\uffe3\001\002\000\006\153\u025f\154\022\001\002\000\010" +
    "\100\uffe6\104\uffe6\105\u025d\001\002\000\004\163\u0259\001" +
    "\002\000\012\100\uffe4\102\uffe4\104\uffe4\105\uffe4\001\002" +
    "\000\004\163\u0260\001\002\000\014\077\uffe1\100\uffe1\102" +
    "\uffe1\104\uffe1\105\uffe1\001\002\000\110\002\uffe7\004\uffe7" +
    "\005\uffe7\006\uffe7\007\uffe7\010\uffe7\011\uffe7\012\uffe7\013" +
    "\uffe7\014\uffe7\016\uffe7\021\uffe7\023\uffe7\026\uffe7\051\uffe7" +
    "\055\uffe7\056\uffe7\057\uffe7\064\uffe7\065\uffe7\066\uffe7\067" +
    "\uffe7\070\uffe7\071\uffe7\072\uffe7\073\uffe7\074\uffe7\076\uffe7" +
    "\155\uffe7\156\uffe7\157\uffe7\160\uffe7\161\uffe7\162\uffe7\163" +
    "\uffe7\001\002\000\110\002\ufff4\004\ufff4\005\ufff4\006\ufff4" +
    "\007\ufff4\010\ufff4\011\ufff4\012\ufff4\013\ufff4\014\ufff4\016" +
    "\ufff4\021\ufff4\023\ufff4\026\ufff4\051\ufff4\055\ufff4\056\ufff4" +
    "\057\ufff4\064\ufff4\065\ufff4\066\ufff4\067\ufff4\070\ufff4\071" +
    "\ufff4\072\ufff4\073\ufff4\074\ufff4\076\ufff4\155\ufff4\156\ufff4" +
    "\157\ufff4\160\ufff4\161\ufff4\162\ufff4\163\ufff4\001\002\000" +
    "\110\002\uffe8\004\uffe8\005\uffe8\006\uffe8\007\uffe8\010\uffe8" +
    "\011\uffe8\012\uffe8\013\uffe8\014\uffe8\016\uffe8\021\uffe8\023" +
    "\uffe8\026\uffe8\051\uffe8\055\uffe8\056\uffe8\057\uffe8\064\uffe8" +
    "\065\uffe8\066\uffe8\067\uffe8\070\uffe8\071\uffe8\072\uffe8\073" +
    "\uffe8\074\uffe8\076\uffe8\155\uffe8\156\uffe8\157\uffe8\160\uffe8" +
    "\161\uffe8\162\uffe8\163\uffe8\001\002\000\006\103\ufff0\105" +
    "\ufff0\001\002\000\004\106\u026a\001\002\000\006\103\u0267" +
    "\105\u0268\001\002\000\010\061\ufff2\100\ufff2\104\ufff2\001" +
    "\002\000\004\163\u0265\001\002\000\006\103\uffef\105\uffef" +
    "\001\002\000\016\073\u026d\155\u026b\156\u0270\157\u026e\160" +
    "\u026c\163\u026f\001\002\000\006\103\uffec\105\uffec\001\002" +
    "\000\006\103\uffe9\105\uffe9\001\002\000\006\103\uffed\105" +
    "\uffed\001\002\000\006\103\uffea\105\uffea\001\002\000\006" +
    "\103\uffee\105\uffee\001\002\000\006\103\uffeb\105\uffeb\001" +
    "\002\000\004\076\u0272\001\002\000\066\004\100\005\105" +
    "\006\053\007\065\010\113\011\111\012\060\013\055\014" +
    "\115\016\057\021\054\023\056\026\107\051\101\071\u019e" +
    "\073\066\074\077\076\061\077\uffdd\155\122\156\051\157" +
    "\120\160\117\161\052\162\067\163\123\001\002\000\004" +
    "\077\u0274\001\002\000\012\061\ufff1\100\ufff1\102\u0255\104" +
    "\ufff1\001\002\000\010\061\u0258\100\uffe5\104\uffe5\001\002" +
    "\000\006\100\220\104\u0261\001\002\000\110\002\ufff3\004" +
    "\ufff3\005\ufff3\006\ufff3\007\ufff3\010\ufff3\011\ufff3\012\ufff3" +
    "\013\ufff3\014\ufff3\016\ufff3\021\ufff3\023\ufff3\026\ufff3\051" +
    "\ufff3\055\ufff3\056\ufff3\057\ufff3\064\ufff3\065\ufff3\066\ufff3" +
    "\067\ufff3\070\ufff3\071\ufff3\072\ufff3\073\ufff3\074\ufff3\076" +
    "\ufff3\155\ufff3\156\ufff3\157\ufff3\160\ufff3\161\ufff3\162\ufff3" +
    "\163\ufff3\001\002\000\010\102\350\122\uffb5\163\uffb5\001" +
    "\002\000\012\100\uffe2\102\u0289\153\uffe0\154\uffe0\001\002" +
    "\000\004\102\u0289\001\002\000\004\102\u0289\001\002\000" +
    "\004\076\u0285\001\002\000\004\100\u027e\001\002\000\044" +
    "\051\101\073\066\074\077\076\141\135\153\136\142\145" +
    "\143\146\150\147\134\150\156\155\122\156\051\157\120" +
    "\160\117\161\052\162\067\163\u0280\001\002\000\006\101" +
    "\u0284\105\214\001\002\000\124\076\203\101\ufed7\102\202" +
    "\105\ufed7\106\ufe99\107\ufe99\110\ufe99\111\ufe99\112\ufe99\113" +
    "\ufe99\114\ufe99\115\ufe99\116\ufe99\117\ufe99\120\ufe99\121\ufe99" +
    "\122\ufed7\123\ufed7\124\ufed7\125\ufed7\126\ufed7\127\ufed7\130" +
    "\ufed7\131\ufed7\132\ufed7\133\ufed7\134\ufed7\135\ufed7\136\ufed7" +
    "\137\ufed7\140\ufed7\141\ufed7\142\ufed7\143\ufed7\144\ufed7\147" +
    "\ufed7\150\ufed7\151\ufed7\152\u0281\153\201\154\204\001\002" +
    "\000\046\051\101\073\066\074\077\076\141\101\ufedd\135" +
    "\153\136\142\145\143\146\150\147\134\150\156\155\122" +
    "\156\051\157\120\160\117\161\052\162\067\163\200\001" +
    "\002\000\004\101\u0283\001\002\000\100\077\ufe87\101\ufe87" +
    "\102\ufe87\103\ufe87\104\ufe87\105\ufe87\122\ufe87\123\ufe87\124" +
    "\ufe87\125\ufe87\126\ufe87\127\ufe87\130\ufe87\131\ufe87\132\ufe87" +
    "\133\ufe87\134\ufe87\135\ufe87\136\ufe87\137\ufe87\140\ufe87\141" +
    "\ufe87\142\ufe87\143\ufe87\144\ufe87\147\ufe87\150\ufe87\151\ufe87" +
    "\152\ufe87\153\ufe87\154\ufe87\001\002\000\100\077\ufe88\101" +
    "\ufe88\102\ufe88\103\ufe88\104\ufe88\105\ufe88\122\ufe88\123\ufe88" +
    "\124\ufe88\125\ufe88\126\ufe88\127\ufe88\130\ufe88\131\ufe88\132" +
    "\ufe88\133\ufe88\134\ufe88\135\ufe88\136\ufe88\137\ufe88\140\ufe88" +
    "\141\ufe88\142\ufe88\143\ufe88\144\ufe88\147\ufe88\150\ufe88\151" +
    "\ufe88\152\ufe88\153\ufe88\154\ufe88\001\002\000\004\163\u0259" +
    "\001\002\000\004\077\u0287\001\002\000\076\077\ufeee\101" +
    "\ufeee\103\ufeee\104\ufeee\105\ufeee\122\ufeee\123\ufeee\124\ufeee" +
    "\125\ufeee\126\ufeee\127\ufeee\130\ufeee\131\ufeee\132\ufeee\133" +
    "\ufeee\134\ufeee\135\ufeee\136\ufeee\137\ufeee\140\ufeee\141\ufeee" +
    "\142\ufeee\143\ufeee\144\ufeee\147\ufeee\150\ufeee\151\ufeee\152" +
    "\ufeee\153\ufeee\154\ufeee\001\002\000\100\077\ufef5\101\ufef5" +
    "\102\ufef5\103\ufef5\104\ufef5\105\ufef5\122\ufef5\123\ufef5\124" +
    "\ufef5\125\ufef5\126\ufef5\127\ufef5\130\ufef5\131\ufef5\132\ufef5" +
    "\133\ufef5\134\ufef5\135\ufef5\136\ufef5\137\ufef5\140\ufef5\141" +
    "\ufef5\142\ufef5\143\ufef5\144\ufef5\147\ufef5\150\ufef5\151\ufef5" +
    "\152\ufef5\153\ufef5\154\ufef5\001\002\000\046\051\101\073" +
    "\066\074\077\076\141\103\353\135\153\136\142\145\143" +
    "\146\150\147\134\150\156\155\122\156\051\157\120\160" +
    "\117\161\052\162\067\163\200\001\002\000\100\077\ufef1" +
    "\101\ufef1\102\u0289\103\ufef1\104\ufef1\105\ufef1\122\ufef1\123" +
    "\ufef1\124\ufef1\125\ufef1\126\ufef1\127\ufef1\130\ufef1\131\ufef1" +
    "\132\ufef1\133\ufef1\134\ufef1\135\ufef1\136\ufef1\137\ufef1\140" +
    "\ufef1\141\ufef1\142\ufef1\143\ufef1\144\ufef1\147\ufef1\150\ufef1" +
    "\151\ufef1\152\ufef1\153\ufef1\154\ufef1\001\002\000\006\100" +
    "\171\102\350\001\002\000\076\077\ufef6\101\ufef6\103\ufef6" +
    "\104\ufef6\105\ufef6\122\ufef6\123\ufef6\124\ufef6\125\ufef6\126" +
    "\ufef6\127\ufef6\130\ufef6\131\ufef6\132\ufef6\133\ufef6\134\ufef6" +
    "\135\ufef6\136\ufef6\137\ufef6\140\ufef6\141\ufef6\142\ufef6\143" +
    "\ufef6\144\ufef6\147\ufef6\150\ufef6\151\ufef6\152\ufef6\153\ufef6" +
    "\154\ufef6\001\002\000\076\077\ufef7\101\ufef7\103\ufef7\104" +
    "\ufef7\105\ufef7\122\ufef7\123\ufef7\124\ufef7\125\ufef7\126\ufef7" +
    "\127\ufef7\130\ufef7\131\ufef7\132\ufef7\133\ufef7\134\ufef7\135" +
    "\ufef7\136\ufef7\137\ufef7\140\ufef7\141\ufef7\142\ufef7\143\ufef7" +
    "\144\ufef7\147\ufef7\150\ufef7\151\ufef7\152\ufef7\153\ufef7\154" +
    "\ufef7\001\002\000\100\077\ufef4\101\ufef4\102\ufef4\103\ufef4" +
    "\104\ufef4\105\ufef4\122\ufef4\123\ufef4\124\ufef4\125\ufef4\126" +
    "\ufef4\127\ufef4\130\ufef4\131\ufef4\132\ufef4\133\ufef4\134\ufef4" +
    "\135\ufef4\136\ufef4\137\ufef4\140\ufef4\141\ufef4\142\ufef4\143" +
    "\ufef4\144\ufef4\147\ufef4\150\ufef4\151\ufef4\152\ufef4\153\ufef4" +
    "\154\ufef4\001\002\000\100\077\ufef2\101\ufef2\102\350\103" +
    "\ufef2\104\ufef2\105\ufef2\122\ufef2\123\ufef2\124\ufef2\125\ufef2" +
    "\126\ufef2\127\ufef2\130\ufef2\131\ufef2\132\ufef2\133\ufef2\134" +
    "\ufef2\135\ufef2\136\ufef2\137\ufef2\140\ufef2\141\ufef2\142\ufef2" +
    "\143\ufef2\144\ufef2\147\ufef2\150\ufef2\151\ufef2\152\ufef2\153" +
    "\ufef2\154\ufef2\001\002\000\004\103\u0291\001\002\000\100" +
    "\077\ufef3\101\ufef3\102\ufef3\103\ufef3\104\ufef3\105\ufef3\122" +
    "\ufef3\123\ufef3\124\ufef3\125\ufef3\126\ufef3\127\ufef3\130\ufef3" +
    "\131\ufef3\132\ufef3\133\ufef3\134\ufef3\135\ufef3\136\ufef3\137" +
    "\ufef3\140\ufef3\141\ufef3\142\ufef3\143\ufef3\144\ufef3\147\ufef3" +
    "\150\ufef3\151\ufef3\152\ufef3\153\ufef3\154\ufef3\001\002\000" +
    "\100\077\ufef1\101\ufef1\102\u0289\103\ufef1\104\ufef1\105\ufef1" +
    "\122\ufef1\123\ufef1\124\ufef1\125\ufef1\126\ufef1\127\ufef1\130" +
    "\ufef1\131\ufef1\132\ufef1\133\ufef1\134\ufef1\135\ufef1\136\ufef1" +
    "\137\ufef1\140\ufef1\141\ufef1\142\ufef1\143\ufef1\144\ufef1\147" +
    "\ufef1\150\ufef1\151\ufef1\152\ufef1\153\ufef1\154\ufef1\001\002" +
    "\000\006\100\171\102\350\001\002\000\076\077\ufefa\101" +
    "\ufefa\103\ufefa\104\ufefa\105\ufefa\122\ufefa\123\ufefa\124\ufefa" +
    "\125\ufefa\126\ufefa\127\ufefa\130\ufefa\131\ufefa\132\ufefa\133" +
    "\ufefa\134\ufefa\135\ufefa\136\ufefa\137\ufefa\140\ufefa\141\ufefa" +
    "\142\ufefa\143\ufefa\144\ufefa\147\ufefa\150\ufefa\151\ufefa\152" +
    "\ufefa\153\ufefa\154\ufefa\001\002\000\076\077\ufefb\101\ufefb" +
    "\103\ufefb\104\ufefb\105\ufefb\122\ufefb\123\ufefb\124\ufefb\125" +
    "\ufefb\126\ufefb\127\ufefb\130\ufefb\131\ufefb\132\ufefb\133\ufefb" +
    "\134\ufefb\135\ufefb\136\ufefb\137\ufefb\140\ufefb\141\ufefb\142" +
    "\ufefb\143\ufefb\144\ufefb\147\ufefb\150\ufefb\151\ufefb\152\ufefb" +
    "\153\ufefb\154\ufefb\001\002\000\100\077\ufef1\101\ufef1\102" +
    "\u0289\103\ufef1\104\ufef1\105\ufef1\122\ufef1\123\ufef1\124\ufef1" +
    "\125\ufef1\126\ufef1\127\ufef1\130\ufef1\131\ufef1\132\ufef1\133" +
    "\ufef1\134\ufef1\135\ufef1\136\ufef1\137\ufef1\140\ufef1\141\ufef1" +
    "\142\ufef1\143\ufef1\144\ufef1\147\ufef1\150\ufef1\151\ufef1\152" +
    "\ufef1\153\ufef1\154\ufef1\001\002\000\006\100\171\102\350" +
    "\001\002\000\076\077\ufef8\101\ufef8\103\ufef8\104\ufef8\105" +
    "\ufef8\122\ufef8\123\ufef8\124\ufef8\125\ufef8\126\ufef8\127\ufef8" +
    "\130\ufef8\131\ufef8\132\ufef8\133\ufef8\134\ufef8\135\ufef8\136" +
    "\ufef8\137\ufef8\140\ufef8\141\ufef8\142\ufef8\143\ufef8\144\ufef8" +
    "\147\ufef8\150\ufef8\151\ufef8\152\ufef8\153\ufef8\154\ufef8\001" +
    "\002\000\076\077\ufef9\101\ufef9\103\ufef9\104\ufef9\105\ufef9" +
    "\122\ufef9\123\ufef9\124\ufef9\125\ufef9\126\ufef9\127\ufef9\130" +
    "\ufef9\131\ufef9\132\ufef9\133\ufef9\134\ufef9\135\ufef9\136\ufef9" +
    "\137\ufef9\140\ufef9\141\ufef9\142\ufef9\143\ufef9\144\ufef9\147" +
    "\ufef9\150\ufef9\151\ufef9\152\ufef9\153\ufef9\154\ufef9\001\002" +
    "\000\010\102\350\122\uffb4\163\uffb4\001\002\000\012\060" +
    "\u029c\100\uffd5\102\uffd5\104\uffd5\001\002\000\004\163\u0259" +
    "\001\002\000\010\100\ufff1\102\u0255\104\ufff1\001\002\000" +
    "\006\100\u029f\104\u02a0\001\002\000\004\163\u02a3\001\002" +
    "\000\110\002\uffd7\004\uffd7\005\uffd7\006\uffd7\007\uffd7\010" +
    "\uffd7\011\uffd7\012\uffd7\013\uffd7\014\uffd7\016\uffd7\021\uffd7" +
    "\023\uffd7\026\uffd7\051\uffd7\055\uffd7\056\uffd7\057\uffd7\064" +
    "\uffd7\065\uffd7\066\uffd7\067\uffd7\070\uffd7\071\uffd7\072\uffd7" +
    "\073\uffd7\074\uffd7\076\uffd7\155\uffd7\156\uffd7\157\uffd7\160" +
    "\uffd7\161\uffd7\162\uffd7\163\uffd7\001\002\000\110\002\uffd8" +
    "\004\uffd8\005\uffd8\006\uffd8\007\uffd8\010\uffd8\011\uffd8\012" +
    "\uffd8\013\uffd8\014\uffd8\016\uffd8\021\uffd8\023\uffd8\026\uffd8" +
    "\051\uffd8\055\uffd8\056\uffd8\057\uffd8\064\uffd8\065\uffd8\066" +
    "\uffd8\067\uffd8\070\uffd8\071\uffd8\072\uffd8\073\uffd8\074\uffd8" +
    "\076\uffd8\155\uffd8\156\uffd8\157\uffd8\160\uffd8\161\uffd8\162" +
    "\uffd8\163\uffd8\001\002\000\006\101\uffd2\163\uffd2\001\002" +
    "\000\004\152\u02a7\001\002\000\006\101\u02a6\163\u02a3\001" +
    "\002\000\006\101\uffd3\163\uffd3\001\002\000\110\002\uffd4" +
    "\004\uffd4\005\uffd4\006\uffd4\007\uffd4\010\uffd4\011\uffd4\012" +
    "\uffd4\013\uffd4\014\uffd4\016\uffd4\021\uffd4\023\uffd4\026\uffd4" +
    "\051\uffd4\055\uffd4\056\uffd4\057\uffd4\064\uffd4\065\uffd4\066" +
    "\uffd4\067\uffd4\070\uffd4\071\uffd4\072\uffd4\073\uffd4\074\uffd4" +
    "\076\uffd4\155\uffd4\156\uffd4\157\uffd4\160\uffd4\161\uffd4\162" +
    "\uffd4\163\uffd4\001\002\000\004\100\u02a8\001\002\000\064" +
    "\004\100\005\105\006\053\007\065\010\113\011\111\012" +
    "\060\013\055\014\115\016\057\021\054\023\056\026\107" +
    "\051\101\073\066\074\077\076\061\101\u02ac\155\122\156" +
    "\051\157\120\160\117\161\052\162\067\163\123\001\002" +
    "\000\006\101\uffd1\163\uffd1\001\002\000\006\101\uffd0\163" +
    "\uffd0\001\002\000\064\004\uffcb\005\uffcb\006\uffcb\007\uffcb" +
    "\010\uffcb\011\uffcb\012\uffcb\013\uffcb\014\uffcb\016\uffcb\021" +
    "\uffcb\023\uffcb\026\uffcb\051\uffcb\073\uffcb\074\uffcb\076\uffcb" +
    "\101\uffcb\155\uffcb\156\uffcb\157\uffcb\160\uffcb\161\uffcb\162" +
    "\uffcb\163\uffcb\001\002\000\006\101\uffcf\163\uffcf\001\002" +
    "\000\064\004\100\005\105\006\053\007\065\010\113\011" +
    "\111\012\060\013\055\014\115\016\057\021\054\023\056" +
    "\026\107\051\101\073\066\074\077\076\061\101\u02b6\155" +
    "\122\156\051\157\120\160\117\161\052\162\067\163\123" +
    "\001\002\000\004\163\126\001\002\000\006\104\uffc8\105" +
    "\uffc8\001\002\000\006\104\u02b3\105\u02b2\001\002\000\010" +
    "\102\132\104\uffc7\105\uffc7\001\002\000\004\163\126\001" +
    "\002\000\064\004\uffca\005\uffca\006\uffca\007\uffca\010\uffca" +
    "\011\uffca\012\uffca\013\uffca\014\uffca\016\uffca\021\uffca\023" +
    "\uffca\026\uffca\051\uffca\073\uffca\074\uffca\076\uffca\101\uffca" +
    "\155\uffca\156\uffca\157\uffca\160\uffca\161\uffca\162\uffca\163" +
    "\uffca\001\002\000\006\104\uffc9\105\uffc9\001\002\000\064" +
    "\004\uffcc\005\uffcc\006\uffcc\007\uffcc\010\uffcc\011\uffcc\012" +
    "\uffcc\013\uffcc\014\uffcc\016\uffcc\021\uffcc\023\uffcc\026\uffcc" +
    "\051\uffcc\073\uffcc\074\uffcc\076\uffcc\101\uffcc\155\uffcc\156" +
    "\uffcc\157\uffcc\160\uffcc\161\uffcc\162\uffcc\163\uffcc\001\002" +
    "\000\112\002\uffcd\004\uffcd\005\uffcd\006\uffcd\007\uffcd\010" +
    "\uffcd\011\uffcd\012\uffcd\013\uffcd\014\uffcd\016\uffcd\021\uffcd" +
    "\023\uffcd\026\uffcd\051\uffcd\055\uffcd\056\uffcd\057\uffcd\064" +
    "\uffcd\065\uffcd\066\uffcd\067\uffcd\070\uffcd\071\uffcd\072\uffcd" +
    "\073\uffcd\074\uffcd\076\uffcd\101\uffcd\155\uffcd\156\uffcd\157" +
    "\uffcd\160\uffcd\161\uffcd\162\uffcd\163\uffcd\001\002\000\012" +
    "\100\uffd6\102\uffd6\104\uffd6\105\u025d\001\002\000\010\060" +
    "\u029c\100\uffd5\102\uffd5\001\002\000\006\100\ufff1\102\u0255" +
    "\001\002\000\004\100\u02bb\001\002\000\062\004\100\005" +
    "\105\006\053\007\065\010\113\011\111\012\060\013\055" +
    "\014\115\016\057\021\054\023\056\026\107\051\101\073" +
    "\066\074\077\076\061\155\122\156\051\157\120\160\117" +
    "\161\052\162\067\163\123\001\002\000\110\002\uffce\004" +
    "\uffce\005\uffce\006\uffce\007\uffce\010\uffce\011\uffce\012\uffce" +
    "\013\uffce\014\uffce\016\uffce\021\uffce\023\uffce\026\uffce\051" +
    "\uffce\055\uffce\056\uffce\057\uffce\064\uffce\065\uffce\066\uffce" +
    "\067\uffce\070\uffce\071\uffce\072\uffce\073\uffce\074\uffce\076" +
    "\uffce\155\uffce\156\uffce\157\uffce\160\uffce\161\uffce\162\uffce" +
    "\163\uffce\001\002\000\004\077\u02be\001\002\000\022\077" +
    "\ufeff\102\ufeff\104\ufeff\105\ufeff\147\ufeff\150\ufeff\153\ufeff" +
    "\154\ufeff\001\002\000\062\004\100\005\105\006\053\007" +
    "\065\010\113\011\111\012\060\013\055\014\115\016\057" +
    "\021\054\023\056\026\107\051\101\073\066\074\077\076" +
    "\061\155\122\156\051\157\120\160\117\161\052\162\067" +
    "\163\123\001\002\000\004\122\u02c1\001\002\000\012\102" +
    "\uffae\122\uffae\154\u02c2\163\uffae\001\002\000\006\017\u02c3" +
    "\020\u02c4\001\002\000\010\102\uffad\122\uffad\163\uffad\001" +
    "\002\000\010\102\uffac\122\uffac\163\uffac\001\002\000\004" +
    "\016\u02d2\001\002\000\004\123\u02cc\001\002\000\004\016" +
    "\u02c8\001\002\000\004\123\u02c9\001\002\000\062\004\100" +
    "\005\105\006\053\007\065\010\113\011\111\012\060\013" +
    "\055\014\115\016\057\021\054\023\056\026\107\051\101" +
    "\073\066\074\077\076\061\155\122\156\051\157\120\160" +
    "\117\161\052\162\067\163\123\001\002\000\004\122\u02cb" +
    "\001\002\000\010\102\uffb0\122\uffb0\163\uffb0\001\002\000" +
    "\062\004\100\005\105\006\053\007\065\010\113\011\111" +
    "\012\060\013\055\014\115\016\057\021\054\023\056\026" +
    "\107\051\101\073\066\074\077\076\061\155\122\156\051" +
    "\157\120\160\117\161\052\162\067\163\123\001\002\000" +
    "\004\122\u02ce\001\002\000\012\102\uffaf\122\uffaf\154\u02cf" +
    "\163\uffaf\001\002\000\006\017\u02d0\020\u02d1\001\002\000" +
    "\010\102\uffab\122\uffab\163\uffab\001\002\000\010\102\uffaa" +
    "\122\uffaa\163\uffaa\001\002\000\004\123\u02d3\001\002\000" +
    "\062\004\100\005\105\006\053\007\065\010\113\011\111" +
    "\012\060\013\055\014\115\016\057\021\054\023\056\026" +
    "\107\051\101\073\066\074\077\076\061\155\122\156\051" +
    "\157\120\160\117\161\052\162\067\163\123\001\002\000" +
    "\004\122\u02d5\001\002\000\010\102\uffb1\122\uffb1\163\uffb1" +
    "\001\002\000\104\004\uff97\005\uff97\006\uff97\007\uff97\010" +
    "\uff97\011\uff97\012\uff97\013\uff97\014\uff97\016\uff97\021\uff97" +
    "\023\uff97\026\uff97\051\uff97\055\uff97\056\uff97\057\uff97\064" +
    "\uff97\065\uff97\066\uff97\067\uff97\070\uff97\071\uff97\073\uff97" +
    "\074\uff97\076\uff97\155\uff97\156\uff97\157\uff97\160\uff97\161" +
    "\uff97\162\uff97\163\uff97\001\002\000\006\154\ufff6\163\ufff6" +
    "\001\002\000\006\154\u02da\163\u02d9\001\002\000\110\002" +
    "\ufff7\004\ufff7\005\ufff7\006\ufff7\007\ufff7\010\ufff7\011\ufff7" +
    "\012\ufff7\013\ufff7\014\ufff7\016\ufff7\021\ufff7\023\ufff7\026" +
    "\ufff7\051\ufff7\055\ufff7\056\ufff7\057\ufff7\064\ufff7\065\ufff7" +
    "\066\ufff7\067\ufff7\070\ufff7\071\ufff7\072\ufff7\073\ufff7\074" +
    "\ufff7\076\ufff7\155\ufff7\156\ufff7\157\ufff7\160\ufff7\161\ufff7" +
    "\162\ufff7\163\ufff7\001\002\000\004\163\u02db\001\002\000" +
    "\006\154\ufff5\163\ufff5\001\002\000\110\002\ufffd\004\ufffd" +
    "\005\ufffd\006\ufffd\007\ufffd\010\ufffd\011\ufffd\012\ufffd\013" +
    "\ufffd\014\ufffd\016\ufffd\021\ufffd\023\ufffd\026\ufffd\051\ufffd" +
    "\055\ufffd\056\ufffd\057\ufffd\064\ufffd\065\ufffd\066\ufffd\067" +
    "\ufffd\070\ufffd\071\ufffd\072\ufffd\073\ufffd\074\ufffd\076\ufffd" +
    "\155\ufffd\156\ufffd\157\ufffd\160\ufffd\161\ufffd\162\ufffd\163" +
    "\ufffd\001\002\000\112\002\uff9d\004\uff9d\005\uff9d\006\uff9d" +
    "\007\uff9d\010\uff9d\011\uff9d\012\uff9d\013\uff9d\014\uff9d\016" +
    "\uff9d\021\uff9d\023\uff9d\026\uff9d\051\uff9d\055\uff9d\056\uff9d" +
    "\057\uff9d\063\uff9d\064\uff9d\065\uff9d\066\uff9d\067\uff9d\070" +
    "\uff9d\071\uff9d\072\uff9d\073\uff9d\074\uff9d\076\uff9d\155\uff9d" +
    "\156\uff9d\157\uff9d\160\uff9d\161\uff9d\162\uff9d\163\uff9d\001" +
    "\002\000\006\104\u02df\154\u02e0\001\002\000\112\002\uff9b" +
    "\004\uff9b\005\uff9b\006\uff9b\007\uff9b\010\uff9b\011\uff9b\012" +
    "\uff9b\013\uff9b\014\uff9b\016\uff9b\021\uff9b\023\uff9b\026\uff9b" +
    "\051\uff9b\055\uff9b\056\uff9b\057\uff9b\063\uff9b\064\uff9b\065" +
    "\uff9b\066\uff9b\067\uff9b\070\uff9b\071\uff9b\072\uff9b\073\uff9b" +
    "\074\uff9b\076\uff9b\155\uff9b\156\uff9b\157\uff9b\160\uff9b\161" +
    "\uff9b\162\uff9b\163\uff9b\001\002\000\006\137\u02e1\163\023" +
    "\001\002\000\004\104\u02e2\001\002\000\112\002\uff9a\004" +
    "\uff9a\005\uff9a\006\uff9a\007\uff9a\010\uff9a\011\uff9a\012\uff9a" +
    "\013\uff9a\014\uff9a\016\uff9a\021\uff9a\023\uff9a\026\uff9a\051" +
    "\uff9a\055\uff9a\056\uff9a\057\uff9a\063\uff9a\064\uff9a\065\uff9a" +
    "\066\uff9a\067\uff9a\070\uff9a\071\uff9a\072\uff9a\073\uff9a\074" +
    "\uff9a\076\uff9a\155\uff9a\156\uff9a\157\uff9a\160\uff9a\161\uff9a" +
    "\162\uff9a\163\uff9a\001\002\000\006\104\u02e4\161\u02e5\001" +
    "\002\000\116\002\uffa3\004\uffa3\005\uffa3\006\uffa3\007\uffa3" +
    "\010\uffa3\011\uffa3\012\uffa3\013\uffa3\014\uffa3\016\uffa3\021" +
    "\uffa3\023\uffa3\026\uffa3\051\uffa3\055\uffa3\056\uffa3\057\uffa3" +
    "\062\uffa3\063\uffa3\064\uffa3\065\uffa3\066\uffa3\067\uffa3\070" +
    "\uffa3\071\uffa3\072\uffa3\073\uffa3\074\uffa3\075\uffa3\076\uffa3" +
    "\155\uffa3\156\uffa3\157\uffa3\160\uffa3\161\uffa3\162\uffa3\163" +
    "\uffa3\001\002\000\004\104\u02e6\001\002\000\116\002\uffa4" +
    "\004\uffa4\005\uffa4\006\uffa4\007\uffa4\010\uffa4\011\uffa4\012" +
    "\uffa4\013\uffa4\014\uffa4\016\uffa4\021\uffa4\023\uffa4\026\uffa4" +
    "\051\uffa4\055\uffa4\056\uffa4\057\uffa4\062\uffa4\063\uffa4\064" +
    "\uffa4\065\uffa4\066\uffa4\067\uffa4\070\uffa4\071\uffa4\072\uffa4" +
    "\073\uffa4\074\uffa4\075\uffa4\076\uffa4\155\uffa4\156\uffa4\157" +
    "\uffa4\160\uffa4\161\uffa4\162\uffa4\163\uffa4\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u02e4\000\014\003\006\045\007\050\005\051\010\052" +
    "\004\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\046\013\047\015\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\052\011\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\053\026\054\025\055\024\001\001\000" +
    "\004\017\017\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\017\u02dd\001\001\000\002\001\001" +
    "\000\004\055\u02dc\001\001\000\026\004\044\005\031\006" +
    "\041\010\046\024\032\032\030\056\045\057\043\060\034" +
    "\061\035\001\001\000\002\001\001\000\002\001\001\000" +
    "\022\006\u02db\010\046\024\032\032\030\056\045\057\043" +
    "\060\034\061\035\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\007\u02d7\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\060\u02d5\001\001\000\002" +
    "\001\001\000\044\040\123\041\103\042\101\043\067\044" +
    "\072\160\074\161\115\162\063\167\061\170\102\171\107" +
    "\172\075\173\120\174\111\231\062\232\105\233\073\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\110\160\150\161\115\162\063\167\061\170" +
    "\102\171\107\172\151\173\175\174\111\177\162\200\161" +
    "\201\176\202\154\203\167\204\135\205\163\206\145\207" +
    "\173\210\136\211\164\212\174\213\143\214\166\215\144" +
    "\216\171\217\137\220\165\221\160\222\172\223\146\225" +
    "\134\227\u02bc\231\062\232\105\233\073\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\166\u0299\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\017\u025a\020" +
    "\u027c\041\u0279\044\u027a\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\166\u0277\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\044\040" +
    "\u024e\041\103\042\101\043\067\044\072\160\074\161\115" +
    "\162\063\167\061\170\102\171\107\172\075\173\120\174" +
    "\111\231\062\232\105\233\073\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\166\341\234\337" +
    "\001\001\000\010\062\126\063\124\066\127\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\114\067\156\070\157\160\150\161\115\162" +
    "\063\167\061\170\102\171\107\172\151\173\175\174\111" +
    "\177\162\200\161\201\176\202\154\203\167\204\135\205" +
    "\163\206\145\207\173\210\136\211\164\212\174\213\143" +
    "\214\166\215\144\216\171\217\137\220\165\221\160\222" +
    "\172\223\146\225\134\227\153\231\062\232\105\233\073" +
    "\001\001\000\002\001\001\000\002\001\001\000\052\160" +
    "\150\161\115\162\063\167\061\170\102\171\107\172\075" +
    "\173\120\174\111\177\162\200\161\201\176\202\u0249\203" +
    "\167\204\135\205\163\206\145\231\062\232\105\233\073" +
    "\001\001\000\004\224\u0244\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\112\041\u0236\160\150" +
    "\161\115\162\063\167\061\170\102\171\107\172\151\173" +
    "\175\174\111\177\162\200\161\201\176\202\154\203\167" +
    "\204\135\205\163\206\145\207\173\210\136\211\164\212" +
    "\174\213\143\214\166\215\144\216\171\217\137\220\165" +
    "\221\160\222\172\223\146\225\134\227\u0235\231\062\232" +
    "\105\233\073\001\001\000\052\160\150\161\115\162\063" +
    "\167\061\170\102\171\107\172\075\173\120\174\111\177" +
    "\162\200\161\201\176\202\u0234\203\167\204\135\205\163" +
    "\206\145\231\062\232\105\233\073\001\001\000\052\160" +
    "\150\161\115\162\063\167\061\170\102\171\107\172\075" +
    "\173\120\174\111\177\162\200\161\201\176\202\u0233\203" +
    "\167\204\135\205\163\206\145\231\062\232\105\233\073" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\052\160\150\161\115\162\063" +
    "\167\061\170\102\171\107\172\075\173\120\174\111\177" +
    "\162\200\161\201\176\202\u0232\203\167\204\135\205\163" +
    "\206\145\231\062\232\105\233\073\001\001\000\002\001" +
    "\001\000\002\001\001\000\052\160\150\161\115\162\063" +
    "\167\061\170\102\171\107\172\075\173\120\174\111\177" +
    "\162\200\161\201\176\202\u0231\203\167\204\135\205\163" +
    "\206\145\231\062\232\105\233\073\001\001\000\002\001" +
    "\001\000\002\001\001\000\052\160\150\161\115\162\063" +
    "\167\061\170\102\171\107\172\075\173\120\174\111\177" +
    "\162\200\161\201\176\202\u0230\203\167\204\135\205\163" +
    "\206\145\231\062\232\105\233\073\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\120" +
    "\067\u0223\070\157\071\u0224\072\u0222\160\150\161\115\162" +
    "\063\167\061\170\102\171\107\172\151\173\175\174\111" +
    "\177\162\200\161\201\176\202\154\203\167\204\135\205" +
    "\163\206\145\207\173\210\136\211\164\212\174\213\143" +
    "\214\166\215\144\216\171\217\137\220\165\221\160\222" +
    "\172\223\146\225\134\227\153\231\062\232\105\233\073" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\110\160\150\161" +
    "\115\162\063\167\061\170\102\171\107\172\151\173\175" +
    "\174\111\177\162\200\161\201\176\202\154\203\167\204" +
    "\135\205\163\206\145\207\173\210\136\211\164\212\174" +
    "\213\143\214\166\215\144\216\171\217\137\220\165\221" +
    "\160\222\172\223\146\225\134\227\351\231\062\232\105" +
    "\233\073\001\001\000\114\160\150\161\115\162\063\167" +
    "\061\170\102\171\107\172\151\173\175\174\111\175\u01f9" +
    "\176\212\177\162\200\161\201\176\202\154\203\167\204" +
    "\135\205\163\206\145\207\173\210\136\211\164\212\174" +
    "\213\143\214\166\215\144\216\171\217\137\220\165\221" +
    "\160\222\172\223\146\225\134\227\211\231\062\232\105" +
    "\233\073\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\114\160\150\161\115" +
    "\162\063\167\061\170\102\171\107\172\151\173\175\174" +
    "\111\175\210\176\212\177\162\200\161\201\176\202\154" +
    "\203\167\204\135\205\163\206\145\207\173\210\136\211" +
    "\164\212\174\213\143\214\166\215\144\216\171\217\137" +
    "\220\165\221\160\222\172\223\146\225\134\227\211\231" +
    "\062\232\105\233\073\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\110\160\150\161\115\162" +
    "\063\167\061\170\102\171\107\172\151\173\175\174\111" +
    "\177\162\200\161\201\176\202\154\203\167\204\135\205" +
    "\163\206\145\207\173\210\136\211\164\212\174\213\143" +
    "\214\166\215\144\216\171\217\137\220\165\221\160\222" +
    "\172\223\146\225\134\227\214\231\062\232\105\233\073" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\073" +
    "\220\074\221\001\001\000\152\040\255\041\103\042\101" +
    "\043\067\044\072\074\235\075\270\076\223\077\254\101" +
    "\226\102\245\103\311\105\256\106\251\107\277\111\272" +
    "\113\224\123\313\124\310\130\246\131\305\132\230\133" +
    "\240\134\264\135\234\136\300\137\243\140\276\142\247" +
    "\143\231\152\266\153\250\154\314\160\274\161\115\162" +
    "\063\167\061\170\102\171\107\172\151\173\175\174\273" +
    "\177\236\200\312\201\244\203\307\204\237\223\271\225" +
    "\134\231\062\232\105\233\073\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\146\040\255\041" +
    "\103\042\101\043\067\044\072\074\235\077\254\101\u01cb" +
    "\102\245\103\311\105\256\106\251\107\277\111\272\113" +
    "\224\123\313\124\310\130\246\131\305\132\230\133\240" +
    "\134\264\135\234\136\300\137\243\140\276\142\247\143" +
    "\231\152\266\153\250\154\314\160\274\161\115\162\063" +
    "\167\061\170\102\171\107\172\151\173\175\174\273\177" +
    "\236\200\312\201\244\203\307\204\237\223\271\225\134" +
    "\231\062\232\105\233\073\001\001\000\002\001\001\000" +
    "\006\166\341\234\337\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\044\040" +
    "\u01f3\041\103\042\101\043\067\044\072\160\074\161\115" +
    "\162\063\167\061\170\102\171\107\172\075\173\120\174" +
    "\111\231\062\232\105\233\073\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\032" +
    "\160\u013f\161\u01e0\162\063\167\061\170\102\171\107\172" +
    "\075\173\120\174\111\231\062\232\105\233\073\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\074\u0169\001\001\000" +
    "\002\001\001\000\010\064\u01cf\065\316\066\320\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\130\074\235\077\254\103\u01b4\105\256\106\251\107\277" +
    "\111\272\113\224\123\313\124\310\130\246\131\305\132" +
    "\230\133\240\134\264\135\234\136\300\137\243\140\276" +
    "\142\247\143\231\152\266\153\250\154\314\160\u0125\161" +
    "\115\162\063\167\061\170\102\171\107\172\151\173\175" +
    "\174\273\177\236\200\312\201\244\203\307\204\237\223" +
    "\271\225\134\231\062\232\105\233\073\001\001\000\002" +
    "\001\001\000\112\160\150\161\115\162\063\167\061\170" +
    "\102\171\107\172\151\173\175\174\111\177\162\200\161" +
    "\201\176\202\154\203\167\204\135\205\163\206\145\207" +
    "\173\210\136\211\164\212\174\213\143\214\166\215\144" +
    "\216\171\217\137\220\165\221\160\222\172\223\146\225" +
    "\134\226\u01ab\227\u0103\231\062\232\105\233\073\001\001" +
    "\000\002\001\001\000\004\141\u01a9\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\074\u0199\001\001\000\004\141\u0196\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\044\040\315\041\103\042\101\043\067\044\072\160" +
    "\074\161\115\162\063\167\061\170\102\171\107\172\075" +
    "\173\120\174\111\231\062\232\105\233\073\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\064" +
    "\317\065\316\066\320\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\114\067\322\070\157\160" +
    "\150\161\115\162\063\167\061\170\102\171\107\172\151" +
    "\173\175\174\111\177\162\200\161\201\176\202\154\203" +
    "\167\204\135\205\163\206\145\207\173\210\136\211\164" +
    "\212\174\213\143\214\166\215\144\216\171\217\137\220" +
    "\165\221\160\222\172\223\146\225\134\227\153\231\062" +
    "\232\105\233\073\001\001\000\002\001\001\000\006\065" +
    "\324\066\320\001\001\000\002\001\001\000\002\001\001" +
    "\000\044\132\u0110\155\u0145\156\u0111\157\u010d\160\u010f\161" +
    "\115\162\063\167\061\170\102\171\107\172\151\173\175" +
    "\174\111\225\u010b\231\062\232\105\233\073\001\001\000" +
    "\074\040\255\041\103\042\101\043\067\044\072\102\331" +
    "\115\333\116\335\121\334\135\330\160\332\161\115\162" +
    "\063\167\061\170\102\171\107\172\151\173\175\174\273" +
    "\177\236\200\312\201\244\203\307\204\237\223\271\225" +
    "\134\231\062\232\105\233\073\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\166\341\234\337" +
    "\001\001\000\004\017\354\001\001\000\110\160\150\161" +
    "\115\162\063\167\061\170\102\171\107\172\151\173\175" +
    "\174\111\177\162\200\161\201\176\202\154\203\167\204" +
    "\135\205\163\206\145\207\173\210\136\211\164\212\174" +
    "\213\143\214\166\215\144\216\171\217\137\220\165\221" +
    "\160\222\172\223\146\225\134\227\351\231\062\232\105" +
    "\233\073\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\073\345\074\221\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\052\135\360\160\362\161\115\162\063\167\061\170\102" +
    "\171\107\172\151\173\175\174\273\177\236\200\312\201" +
    "\244\203\307\204\237\223\271\225\134\231\062\232\105" +
    "\233\073\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\114\160" +
    "\150\161\115\162\063\167\061\170\102\171\107\172\151" +
    "\173\175\174\111\175\371\176\212\177\162\200\161\201" +
    "\176\202\154\203\167\204\135\205\163\206\145\207\173" +
    "\210\136\211\164\212\174\213\143\214\166\215\144\216" +
    "\171\217\137\220\165\221\160\222\172\223\146\225\134" +
    "\227\211\231\062\232\105\233\073\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\073\374\074\221\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\114\160\150\161\115\162\063\167\061\170\102\171\107" +
    "\172\151\173\175\174\111\175\u0100\176\212\177\162\200" +
    "\161\201\176\202\154\203\167\204\135\205\163\206\145" +
    "\207\173\210\136\211\164\212\174\213\143\214\166\215" +
    "\144\216\171\217\137\220\165\221\160\222\172\223\146" +
    "\225\134\227\211\231\062\232\105\233\073\001\001\000" +
    "\002\001\001\000\002\001\001\000\112\160\150\161\115" +
    "\162\063\167\061\170\102\171\107\172\151\173\175\174" +
    "\111\177\162\200\161\201\176\202\154\203\167\204\135" +
    "\205\163\206\145\207\173\210\136\211\164\212\174\213" +
    "\143\214\166\215\144\216\171\217\137\220\165\221\160" +
    "\222\172\223\146\225\134\226\u0104\227\u0103\231\062\232" +
    "\105\233\073\001\001\000\002\001\001\000\002\001\001" +
    "\000\060\117\u0107\120\u0106\121\u0108\135\330\160\362\161" +
    "\115\162\063\167\061\170\102\171\107\172\151\173\175" +
    "\174\273\177\236\200\312\201\244\203\307\204\237\223" +
    "\271\225\134\231\062\232\105\233\073\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\044\132\u0110\155\u0112\156\u0111\157\u010d\160\u010f" +
    "\161\115\162\063\167\061\170\102\171\107\172\151\173" +
    "\175\174\111\225\u010b\231\062\232\105\233\073\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\110\160\150\161\115\162\063\167\061\170\102\171\107" +
    "\172\151\173\175\174\111\177\162\200\161\201\176\202" +
    "\154\203\167\204\135\205\163\206\145\207\173\210\136" +
    "\211\164\212\174\213\143\214\166\215\144\216\171\217" +
    "\137\220\165\221\160\222\172\223\146\225\134\227\u011f" +
    "\231\062\232\105\233\073\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\042\132\u0110\156\u0115" +
    "\157\u010d\160\u010f\161\115\162\063\167\061\170\102\171" +
    "\107\172\151\173\175\174\111\225\u010b\231\062\232\105" +
    "\233\073\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\110\160\150\161\115\162\063\167\061\170" +
    "\102\171\107\172\151\173\175\174\111\177\162\200\161" +
    "\201\176\202\154\203\167\204\135\205\163\206\145\207" +
    "\173\210\136\211\164\212\174\213\143\214\166\215\144" +
    "\216\171\217\137\220\165\221\160\222\172\223\146\225" +
    "\134\227\u011a\231\062\232\105\233\073\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\073\u011d\074\221\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\040\132\u0110\157\u0122\160\u010f\161" +
    "\115\162\063\167\061\170\102\171\107\172\151\173\175" +
    "\174\111\225\u010b\231\062\232\105\233\073\001\001\000" +
    "\002\001\001\000\130\074\235\077\254\103\u0126\105\256" +
    "\106\251\107\277\111\272\113\224\123\313\124\310\130" +
    "\246\131\305\132\230\133\240\134\264\135\234\136\300" +
    "\137\243\140\276\142\247\143\231\152\266\153\250\154" +
    "\314\160\u0125\161\115\162\063\167\061\170\102\171\107" +
    "\172\151\173\175\174\273\177\236\200\312\201\244\203" +
    "\307\204\237\223\271\225\134\231\062\232\105\233\073" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\110\160\150" +
    "\161\115\162\063\167\061\170\102\171\107\172\151\173" +
    "\175\174\111\177\162\200\161\201\176\202\154\203\167" +
    "\204\135\205\163\206\145\207\173\210\136\211\164\212" +
    "\174\213\143\214\166\215\144\216\171\217\137\220\165" +
    "\221\160\222\172\223\146\225\134\227\u012a\231\062\232" +
    "\105\233\073\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\130\074\235\077\254\103\u0138\105" +
    "\256\106\251\107\277\111\272\113\224\123\313\124\310" +
    "\130\246\131\305\132\230\133\240\134\264\135\234\136" +
    "\300\137\243\140\276\142\247\143\231\152\266\153\250" +
    "\154\314\160\u0125\161\115\162\063\167\061\170\102\171" +
    "\107\172\151\173\175\174\273\177\236\200\312\201\244" +
    "\203\307\204\237\223\271\225\134\231\062\232\105\233" +
    "\073\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\110\160\150\161\115\162\063\167\061\170" +
    "\102\171\107\172\151\173\175\174\111\177\162\200\161" +
    "\201\176\202\154\203\167\204\135\205\163\206\145\207" +
    "\173\210\136\211\164\212\174\213\143\214\166\215\144" +
    "\216\171\217\137\220\165\221\160\222\172\223\146\225" +
    "\134\227\u0132\231\062\232\105\233\073\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\110\160" +
    "\150\161\115\162\063\167\061\170\102\171\107\172\151" +
    "\173\175\174\111\177\162\200\161\201\176\202\154\203" +
    "\167\204\135\205\163\206\145\207\173\210\136\211\164" +
    "\212\174\213\143\214\166\215\144\216\171\217\137\220" +
    "\165\221\160\222\172\223\146\225\134\227\u0136\231\062" +
    "\232\105\233\073\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\130\074\235\077\254\103\u013a" +
    "\105\256\106\251\107\277\111\272\113\224\123\313\124" +
    "\310\130\246\131\305\132\230\133\240\134\264\135\234" +
    "\136\300\137\243\140\276\142\247\143\231\152\266\153" +
    "\250\154\314\160\u0125\161\115\162\063\167\061\170\102" +
    "\171\107\172\151\173\175\174\273\177\236\200\312\201" +
    "\244\203\307\204\237\223\271\225\134\231\062\232\105" +
    "\233\073\001\001\000\002\001\001\000\002\001\001\000" +
    "\032\160\u013f\161\115\162\063\167\061\170\102\171\u013e" +
    "\172\075\173\120\174\111\231\062\232\105\233\073\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\166\u0144\001" +
    "\001\000\002\001\001\000\002\001\001\000\042\132\u0110" +
    "\156\u0115\157\u010d\160\u010f\161\115\162\063\167\061\170" +
    "\102\171\107\172\151\173\175\174\111\225\u010b\231\062" +
    "\232\105\233\073\001\001\000\002\001\001\000\110\160" +
    "\150\161\115\162\063\167\061\170\102\171\107\172\151" +
    "\173\175\174\111\177\162\200\161\201\176\202\154\203" +
    "\167\204\135\205\163\206\145\207\173\210\136\211\164" +
    "\212\174\213\143\214\166\215\144\216\171\217\137\220" +
    "\165\221\160\222\172\223\146\225\134\227\u0148\231\062" +
    "\232\105\233\073\001\001\000\002\001\001\000\142\074" +
    "\235\077\254\103\u0155\104\u0152\105\u014f\106\251\107\277" +
    "\110\u014b\111\272\112\u0151\113\224\114\u014c\123\313\124" +
    "\310\125\u0154\130\246\131\305\132\230\133\240\134\264" +
    "\135\234\136\300\137\243\140\276\142\247\143\231\152" +
    "\266\153\250\154\314\160\u0125\161\115\162\063\167\061" +
    "\170\102\171\107\172\151\173\175\174\273\177\236\200" +
    "\312\201\244\203\307\204\237\223\271\225\134\231\062" +
    "\232\105\233\073\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\074\u0169" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\110\160\150\161\115\162\063\167" +
    "\061\170\102\171\107\172\151\173\175\174\111\177\162" +
    "\200\161\201\176\202\154\203\167\204\135\205\163\206" +
    "\145\207\173\210\136\211\164\212\174\213\143\214\166" +
    "\215\144\216\171\217\137\220\165\221\160\222\172\223" +
    "\146\225\134\227\u0157\231\062\232\105\233\073\001\001" +
    "\000\002\001\001\000\142\074\235\077\254\103\u0155\104" +
    "\u0159\105\u014f\106\251\107\277\110\u014b\111\272\112\u0151" +
    "\113\224\114\u014c\123\313\124\310\125\u0154\130\246\131" +
    "\305\132\230\133\240\134\264\135\234\136\300\137\243" +
    "\140\276\142\247\143\231\152\266\153\250\154\314\160" +
    "\u0125\161\115\162\063\167\061\170\102\171\107\172\151" +
    "\173\175\174\273\177\236\200\312\201\244\203\307\204" +
    "\237\223\271\225\134\231\062\232\105\233\073\001\001" +
    "\000\002\001\001\000\142\074\235\077\254\103\u015c\104" +
    "\u015b\105\u014f\106\251\107\277\110\u014b\111\272\112\u0151" +
    "\113\224\114\u014c\123\313\124\310\125\u0154\130\246\131" +
    "\305\132\230\133\240\134\264\135\234\136\300\137\243" +
    "\140\276\142\247\143\231\152\266\153\250\154\314\160" +
    "\u0125\161\115\162\063\167\061\170\102\171\107\172\151" +
    "\173\175\174\273\177\236\200\312\201\244\203\307\204" +
    "\237\223\271\225\134\231\062\232\105\233\073\001\001" +
    "\000\002\001\001\000\002\001\001\000\130\074\235\077" +
    "\254\103\u015c\105\256\106\251\107\277\111\272\113\224" +
    "\123\313\124\310\130\246\131\305\132\230\133\240\134" +
    "\264\135\234\136\300\137\243\140\276\142\247\143\231" +
    "\152\266\153\250\154\314\160\u0125\161\115\162\063\167" +
    "\061\170\102\171\107\172\151\173\175\174\273\177\236" +
    "\200\312\201\244\203\307\204\237\223\271\225\134\231" +
    "\062\232\105\233\073\001\001\000\074\040\255\041\103" +
    "\042\101\043\067\044\072\102\331\115\u015f\116\335\121" +
    "\334\135\330\160\332\161\115\162\063\167\061\170\102" +
    "\171\107\172\151\173\175\174\273\177\236\200\312\201" +
    "\244\203\307\204\237\223\271\225\134\231\062\232\105" +
    "\233\073\001\001\000\002\001\001\000\112\160\150\161" +
    "\115\162\063\167\061\170\102\171\107\172\151\173\175" +
    "\174\111\177\162\200\161\201\176\202\154\203\167\204" +
    "\135\205\163\206\145\207\173\210\136\211\164\212\174" +
    "\213\143\214\166\215\144\216\171\217\137\220\165\221" +
    "\160\222\172\223\146\225\134\226\u0161\227\u0103\231\062" +
    "\232\105\233\073\001\001\000\002\001\001\000\060\117" +
    "\u0163\120\u0106\121\u0108\135\330\160\362\161\115\162\063" +
    "\167\061\170\102\171\107\172\151\173\175\174\273\177" +
    "\236\200\312\201\244\203\307\204\237\223\271\225\134" +
    "\231\062\232\105\233\073\001\001\000\002\001\001\000" +
    "\142\074\235\077\254\103\u0166\104\u0165\105\u014f\106\251" +
    "\107\277\110\u014b\111\272\112\u0151\113\224\114\u014c\123" +
    "\313\124\310\125\u0154\130\246\131\305\132\230\133\240" +
    "\134\264\135\234\136\300\137\243\140\276\142\247\143" +
    "\231\152\266\153\250\154\314\160\u0125\161\115\162\063" +
    "\167\061\170\102\171\107\172\151\173\175\174\273\177" +
    "\236\200\312\201\244\203\307\204\237\223\271\225\134" +
    "\231\062\232\105\233\073\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\074\040\255\041\103\042\101\043\067\044" +
    "\072\102\331\115\u016b\116\335\121\334\135\330\160\332" +
    "\161\115\162\063\167\061\170\102\171\107\172\151\173" +
    "\175\174\273\177\236\200\312\201\244\203\307\204\237" +
    "\223\271\225\134\231\062\232\105\233\073\001\001\000" +
    "\002\001\001\000\112\160\150\161\115\162\063\167\061" +
    "\170\102\171\107\172\151\173\175\174\111\177\162\200" +
    "\161\201\176\202\154\203\167\204\135\205\163\206\145" +
    "\207\173\210\136\211\164\212\174\213\143\214\166\215" +
    "\144\216\171\217\137\220\165\221\160\222\172\223\146" +
    "\225\134\226\u016d\227\u0103\231\062\232\105\233\073\001" +
    "\001\000\002\001\001\000\060\117\u016f\120\u0106\121\u0108" +
    "\135\330\160\362\161\115\162\063\167\061\170\102\171" +
    "\107\172\151\173\175\174\273\177\236\200\312\201\244" +
    "\203\307\204\237\223\271\225\134\231\062\232\105\233" +
    "\073\001\001\000\002\001\001\000\142\074\235\077\254" +
    "\103\u0173\104\u0172\105\u014f\106\251\107\277\110\u014b\111" +
    "\272\112\u0151\113\224\114\u014c\123\313\124\310\125\u0154" +
    "\130\246\131\305\132\230\133\240\134\264\135\234\136" +
    "\300\137\243\140\276\142\247\143\231\152\266\153\250" +
    "\154\314\160\u0125\161\115\162\063\167\061\170\102\171" +
    "\107\172\151\173\175\174\273\177\236\200\312\201\244" +
    "\203\307\204\237\223\271\225\134\231\062\232\105\233" +
    "\073\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\112\160\150\161\115\162\063\167\061\170" +
    "\102\171\107\172\151\173\175\174\111\176\u0175\177\162" +
    "\200\161\201\176\202\154\203\167\204\135\205\163\206" +
    "\145\207\173\210\136\211\164\212\174\213\143\214\166" +
    "\215\144\216\171\217\137\220\165\221\160\222\172\223" +
    "\146\225\134\227\211\231\062\232\105\233\073\001\001" +
    "\000\002\001\001\000\142\074\235\077\254\103\u0178\104" +
    "\u0177\105\u014f\106\251\107\277\110\u014b\111\272\112\u0151" +
    "\113\224\114\u014c\123\313\124\310\125\u0154\130\246\131" +
    "\305\132\230\133\240\134\264\135\234\136\300\137\243" +
    "\140\276\142\247\143\231\152\266\153\250\154\314\160" +
    "\u0125\161\115\162\063\167\061\170\102\171\107\172\151" +
    "\173\175\174\273\177\236\200\312\201\244\203\307\204" +
    "\237\223\271\225\134\231\062\232\105\233\073\001\001" +
    "\000\002\001\001\000\002\001\001\000\112\100\u017b\160" +
    "\150\161\115\162\063\167\061\170\102\171\107\172\151" +
    "\173\175\174\111\177\162\200\161\201\176\202\154\203" +
    "\167\204\135\205\163\206\145\207\173\210\136\211\164" +
    "\212\174\213\143\214\166\215\144\216\171\217\137\220" +
    "\165\221\160\222\172\223\146\225\134\227\u017a\231\062" +
    "\232\105\233\073\001\001\000\002\001\001\000\002\001" +
    "\001\000\110\160\150\161\115\162\063\167\061\170\102" +
    "\171\107\172\151\173\175\174\111\177\162\200\161\201" +
    "\176\202\154\203\167\204\135\205\163\206\145\207\173" +
    "\210\136\211\164\212\174\213\143\214\166\215\144\216" +
    "\171\217\137\220\165\221\160\222\172\223\146\225\134" +
    "\227\u017f\231\062\232\105\233\073\001\001\000\004\074" +
    "\u017e\001\001\000\002\001\001\000\002\001\001\000\110" +
    "\160\150\161\115\162\063\167\061\170\102\171\107\172" +
    "\151\173\175\174\111\177\162\200\161\201\176\202\154" +
    "\203\167\204\135\205\163\206\145\207\173\210\136\211" +
    "\164\212\174\213\143\214\166\215\144\216\171\217\137" +
    "\220\165\221\160\222\172\223\146\225\134\227\u0181\231" +
    "\062\232\105\233\073\001\001\000\002\001\001\000\142" +
    "\074\235\077\254\103\u0184\104\u0183\105\u014f\106\251\107" +
    "\277\110\u014b\111\272\112\u0151\113\224\114\u014c\123\313" +
    "\124\310\125\u0154\130\246\131\305\132\230\133\240\134" +
    "\264\135\234\136\300\137\243\140\276\142\247\143\231" +
    "\152\266\153\250\154\314\160\u0125\161\115\162\063\167" +
    "\061\170\102\171\107\172\151\173\175\174\273\177\236" +
    "\200\312\201\244\203\307\204\237\223\271\225\134\231" +
    "\062\232\105\233\073\001\001\000\002\001\001\000\002" +
    "\001\001\000\040\044\u0188\126\u0186\127\u018a\160\u013f\161" +
    "\115\162\063\167\061\170\u0189\171\107\172\075\173\120" +
    "\174\111\231\062\232\105\233\073\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\032\160\u013f\161" +
    "\u018d\162\063\167\061\170\102\171\107\172\075\173\120" +
    "\174\111\231\062\232\105\233\073\001\001\000\002\001" +
    "\001\000\110\160\150\161\115\162\063\167\061\170\102" +
    "\171\107\172\151\173\175\174\111\177\162\200\161\201" +
    "\176\202\154\203\167\204\135\205\163\206\145\207\173" +
    "\210\136\211\164\212\174\213\143\214\166\215\144\216" +
    "\171\217\137\220\165\221\160\222\172\223\146\225\134" +
    "\227\u018f\231\062\232\105\233\073\001\001\000\002\001" +
    "\001\000\002\001\001\000\036\044\u0188\127\u0195\160\u013f" +
    "\161\115\162\063\167\061\170\u0189\171\107\172\075\173" +
    "\120\174\111\231\062\232\105\233\073\001\001\000\142" +
    "\074\235\077\254\103\u0194\104\u0193\105\u014f\106\251\107" +
    "\277\110\u014b\111\272\112\u0151\113\224\114\u014c\123\313" +
    "\124\310\125\u0154\130\246\131\305\132\230\133\240\134" +
    "\264\135\234\136\300\137\243\140\276\142\247\143\231" +
    "\152\266\153\250\154\314\160\u0125\161\115\162\063\167" +
    "\061\170\102\171\107\172\151\173\175\174\273\177\236" +
    "\200\312\201\244\203\307\204\237\223\271\225\134\231" +
    "\062\232\105\233\073\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\050\015\u019f\016\u019e\040\u01a0\041" +
    "\103\042\101\043\067\044\072\160\074\161\115\162\063" +
    "\167\061\170\102\171\107\172\075\173\120\174\111\231" +
    "\062\232\105\233\073\001\001\000\044\040\u01a6\041\103" +
    "\042\101\043\067\044\072\160\074\161\115\162\063\167" +
    "\061\170\102\171\107\172\075\173\120\174\111\231\062" +
    "\232\105\233\073\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\066\u01a1\001\001\000\002\001\001\000\046" +
    "\016\u01a5\040\u01a0\041\103\042\101\043\067\044\072\160" +
    "\074\161\115\162\063\167\061\170\102\171\107\172\075" +
    "\173\120\174\111\231\062\232\105\233\073\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\066\u01a7\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\074\040\255\041\103\042\101\043\067\044" +
    "\072\102\331\115\u01ae\116\335\121\334\135\330\160\332" +
    "\161\115\162\063\167\061\170\102\171\107\172\151\173" +
    "\175\174\273\177\236\200\312\201\244\203\307\204\237" +
    "\223\271\225\134\231\062\232\105\233\073\001\001\000" +
    "\002\001\001\000\112\160\150\161\115\162\063\167\061" +
    "\170\102\171\107\172\151\173\175\174\111\177\162\200" +
    "\161\201\176\202\154\203\167\204\135\205\163\206\145" +
    "\207\173\210\136\211\164\212\174\213\143\214\166\215" +
    "\144\216\171\217\137\220\165\221\160\222\172\223\146" +
    "\225\134\226\u01b0\227\u0103\231\062\232\105\233\073\001" +
    "\001\000\002\001\001\000\060\117\u01b2\120\u0106\121\u0108" +
    "\135\330\160\362\161\115\162\063\167\061\170\102\171" +
    "\107\172\151\173\175\174\273\177\236\200\312\201\244" +
    "\203\307\204\237\223\271\225\134\231\062\232\105\233" +
    "\073\001\001\000\002\001\001\000\130\074\235\077\254" +
    "\103\u0166\105\256\106\251\107\277\111\272\113\224\123" +
    "\313\124\310\130\246\131\305\132\230\133\240\134\264" +
    "\135\234\136\300\137\243\140\276\142\247\143\231\152" +
    "\266\153\250\154\314\160\u0125\161\115\162\063\167\061" +
    "\170\102\171\107\172\151\173\175\174\273\177\236\200" +
    "\312\201\244\203\307\204\237\223\271\225\134\231\062" +
    "\232\105\233\073\001\001\000\002\001\001\000\002\001" +
    "\001\000\110\160\150\161\115\162\063\167\061\170\102" +
    "\171\107\172\151\173\175\174\111\177\162\200\161\201" +
    "\176\202\154\203\167\204\135\205\163\206\145\207\173" +
    "\210\136\211\164\212\174\213\143\214\166\215\144\216" +
    "\171\217\137\220\165\221\160\222\172\223\146\225\134" +
    "\227\u01b7\231\062\232\105\233\073\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\110\160\150" +
    "\161\115\162\063\167\061\170\102\171\107\172\151\173" +
    "\175\174\111\177\162\200\161\201\176\202\154\203\167" +
    "\204\135\205\163\206\145\207\173\210\136\211\164\212" +
    "\174\213\143\214\166\215\144\216\171\217\137\220\165" +
    "\221\160\222\172\223\146\225\134\227\u01bb\231\062\232" +
    "\105\233\073\001\001\000\002\001\001\000\004\144\u01be" +
    "\001\001\000\014\145\u01bf\146\u01c1\147\u01c2\150\u01c4\151" +
    "\u01c3\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\147\u01cc\150\u01c4\151\u01c3\001\001\000" +
    "\002\001\001\000\002\001\001\000\152\040\255\041\103" +
    "\042\101\043\067\044\072\074\235\076\u01c9\077\254\101" +
    "\226\102\245\103\311\105\256\106\251\107\277\111\272" +
    "\113\224\123\313\124\310\130\246\131\305\132\230\133" +
    "\240\134\264\135\234\136\300\137\243\140\276\142\247" +
    "\143\231\151\u01ca\152\266\153\250\154\314\160\274\161" +
    "\115\162\063\167\061\170\102\171\107\172\151\173\175" +
    "\174\273\177\236\200\312\201\244\203\307\204\237\223" +
    "\271\225\134\231\062\232\105\233\073\001\001\000\112" +
    "\160\150\161\115\162\063\167\061\170\102\171\107\172" +
    "\151\173\175\174\111\177\162\200\161\201\176\202\154" +
    "\203\167\204\135\205\163\206\145\207\173\210\136\211" +
    "\164\212\174\213\143\214\166\215\144\216\171\217\137" +
    "\220\165\221\160\222\172\223\146\225\134\227\u01c7\230" +
    "\u01c6\231\062\232\105\233\073\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\146\040\255\041" +
    "\103\042\101\043\067\044\072\074\235\077\254\101\u01cb" +
    "\102\245\103\311\105\256\106\251\107\277\111\272\113" +
    "\224\123\313\124\310\130\246\131\305\132\230\133\240" +
    "\134\264\135\234\136\300\137\243\140\276\142\247\143" +
    "\231\152\266\153\250\154\314\160\274\161\115\162\063" +
    "\167\061\170\102\171\107\172\151\173\175\174\273\177" +
    "\236\200\312\201\244\203\307\204\237\223\271\225\134" +
    "\231\062\232\105\233\073\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\074\040" +
    "\255\041\103\042\101\043\067\044\072\102\331\115\u01d2" +
    "\116\335\121\334\135\330\160\332\161\115\162\063\167" +
    "\061\170\102\171\107\172\151\173\175\174\273\177\236" +
    "\200\312\201\244\203\307\204\237\223\271\225\134\231" +
    "\062\232\105\233\073\001\001\000\002\001\001\000\112" +
    "\160\150\161\115\162\063\167\061\170\102\171\107\172" +
    "\151\173\175\174\111\177\162\200\161\201\176\202\154" +
    "\203\167\204\135\205\163\206\145\207\173\210\136\211" +
    "\164\212\174\213\143\214\166\215\144\216\171\217\137" +
    "\220\165\221\160\222\172\223\146\225\134\226\u01d4\227" +
    "\u0103\231\062\232\105\233\073\001\001\000\002\001\001" +
    "\000\060\117\u01d6\120\u0106\121\u0108\135\330\160\362\161" +
    "\115\162\063\167\061\170\102\171\107\172\151\173\175" +
    "\174\273\177\236\200\312\201\244\203\307\204\237\223" +
    "\271\225\134\231\062\232\105\233\073\001\001\000\002" +
    "\001\001\000\130\074\235\077\254\103\u0173\105\256\106" +
    "\251\107\277\111\272\113\224\123\313\124\310\130\246" +
    "\131\305\132\230\133\240\134\264\135\234\136\300\137" +
    "\243\140\276\142\247\143\231\152\266\153\250\154\314" +
    "\160\u0125\161\115\162\063\167\061\170\102\171\107\172" +
    "\151\173\175\174\273\177\236\200\312\201\244\203\307" +
    "\204\237\223\271\225\134\231\062\232\105\233\073\001" +
    "\001\000\002\001\001\000\112\160\150\161\115\162\063" +
    "\167\061\170\102\171\107\172\151\173\175\174\111\176" +
    "\u01da\177\162\200\161\201\176\202\154\203\167\204\135" +
    "\205\163\206\145\207\173\210\136\211\164\212\174\213" +
    "\143\214\166\215\144\216\171\217\137\220\165\221\160" +
    "\222\172\223\146\225\134\227\211\231\062\232\105\233" +
    "\073\001\001\000\002\001\001\000\130\074\235\077\254" +
    "\103\u0178\105\256\106\251\107\277\111\272\113\224\123" +
    "\313\124\310\130\246\131\305\132\230\133\240\134\264" +
    "\135\234\136\300\137\243\140\276\142\247\143\231\152" +
    "\266\153\250\154\314\160\u0125\161\115\162\063\167\061" +
    "\170\102\171\107\172\151\173\175\174\273\177\236\200" +
    "\312\201\244\203\307\204\237\223\271\225\134\231\062" +
    "\232\105\233\073\001\001\000\110\160\150\161\115\162" +
    "\063\167\061\170\102\171\107\172\151\173\175\174\111" +
    "\177\162\200\161\201\176\202\154\203\167\204\135\205" +
    "\163\206\145\207\173\210\136\211\164\212\174\213\143" +
    "\214\166\215\144\216\171\217\137\220\165\221\160\222" +
    "\172\223\146\225\134\227\u01dd\231\062\232\105\233\073" +
    "\001\001\000\002\001\001\000\130\074\235\077\254\103" +
    "\u0184\105\256\106\251\107\277\111\272\113\224\123\313" +
    "\124\310\130\246\131\305\132\230\133\240\134\264\135" +
    "\234\136\300\137\243\140\276\142\247\143\231\152\266" +
    "\153\250\154\314\160\u0125\161\115\162\063\167\061\170" +
    "\102\171\107\172\151\173\175\174\273\177\236\200\312" +
    "\201\244\203\307\204\237\223\271\225\134\231\062\232" +
    "\105\233\073\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\044\132\u0110\155\u01f1" +
    "\156\u0111\157\u010d\160\u010f\161\115\162\063\167\061\170" +
    "\102\171\107\172\151\173\175\174\111\225\u010b\231\062" +
    "\232\105\233\073\001\001\000\074\040\255\041\103\042" +
    "\101\043\067\044\072\102\331\115\u01e8\116\335\121\334" +
    "\135\330\160\332\161\115\162\063\167\061\170\102\171" +
    "\107\172\151\173\175\174\273\177\236\200\312\201\244" +
    "\203\307\204\237\223\271\225\134\231\062\232\105\233" +
    "\073\001\001\000\002\001\001\000\112\160\150\161\115" +
    "\162\063\167\061\170\102\171\107\172\151\173\175\174" +
    "\111\177\162\200\161\201\176\202\154\203\167\204\135" +
    "\205\163\206\145\207\173\210\136\211\164\212\174\213" +
    "\143\214\166\215\144\216\171\217\137\220\165\221\160" +
    "\222\172\223\146\225\134\226\u01ea\227\u0103\231\062\232" +
    "\105\233\073\001\001\000\002\001\001\000\060\117\u01ec" +
    "\120\u0106\121\u0108\135\330\160\362\161\115\162\063\167" +
    "\061\170\102\171\107\172\151\173\175\174\273\177\236" +
    "\200\312\201\244\203\307\204\237\223\271\225\134\231" +
    "\062\232\105\233\073\001\001\000\002\001\001\000\002" +
    "\001\001\000\044\132\u0110\155\u01ef\156\u0111\157\u010d\160" +
    "\u010f\161\115\162\063\167\061\170\102\171\107\172\151" +
    "\173\175\174\111\225\u010b\231\062\232\105\233\073\001" +
    "\001\000\042\132\u0110\156\u0115\157\u010d\160\u010f\161\115" +
    "\162\063\167\061\170\102\171\107\172\151\173\175\174" +
    "\111\225\u010b\231\062\232\105\233\073\001\001\000\002" +
    "\001\001\000\042\132\u0110\156\u0115\157\u010d\160\u010f\161" +
    "\115\162\063\167\061\170\102\171\107\172\151\173\175" +
    "\174\111\225\u010b\231\062\232\105\233\073\001\001\000" +
    "\002\001\001\000\010\064\u01f4\065\316\066\320\001\001" +
    "\000\002\001\001\000\002\001\001\000\040\044\u0188\126" +
    "\u01f7\127\u018a\160\u013f\161\115\162\063\167\061\170\u0189" +
    "\171\107\172\075\173\120\174\111\231\062\232\105\233" +
    "\073\001\001\000\002\001\001\000\130\074\235\077\254" +
    "\103\u0194\105\256\106\251\107\277\111\272\113\224\123" +
    "\313\124\310\130\246\131\305\132\230\133\240\134\264" +
    "\135\234\136\300\137\243\140\276\142\247\143\231\152" +
    "\266\153\250\154\314\160\u0125\161\115\162\063\167\061" +
    "\170\102\171\107\172\151\173\175\174\273\177\236\200" +
    "\312\201\244\203\307\204\237\223\271\225\134\231\062" +
    "\232\105\233\073\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\114\160\150\161\115\162\063" +
    "\167\061\170\102\171\107\172\151\173\175\174\111\175" +
    "\u01fd\176\212\177\162\200\161\201\176\202\154\203\167" +
    "\204\135\205\163\206\145\207\173\210\136\211\164\212" +
    "\174\213\143\214\166\215\144\216\171\217\137\220\165" +
    "\221\160\222\172\223\146\225\134\227\211\231\062\232" +
    "\105\233\073\001\001\000\002\001\001\000\002\001\001" +
    "\000\060\160\150\161\115\162\063\167\061\170\102\171" +
    "\107\172\075\173\120\174\111\177\162\200\161\201\176" +
    "\202\154\203\167\204\135\205\163\206\145\207\173\210" +
    "\136\211\u0217\231\062\232\105\233\073\001\001\000\060" +
    "\160\150\161\115\162\063\167\061\170\102\171\107\172" +
    "\075\173\120\174\111\177\162\200\161\201\176\202\154" +
    "\203\167\204\135\205\163\206\145\207\173\210\136\211" +
    "\u0216\231\062\232\105\233\073\001\001\000\060\160\150" +
    "\161\115\162\063\167\061\170\102\171\107\172\075\173" +
    "\120\174\111\177\162\200\161\201\176\202\154\203\167" +
    "\204\135\205\163\206\145\207\173\210\136\211\u0215\231" +
    "\062\232\105\233\073\001\001\000\060\160\150\161\115" +
    "\162\063\167\061\170\102\171\107\172\075\173\120\174" +
    "\111\177\162\200\161\201\176\202\154\203\167\204\135" +
    "\205\163\206\145\207\173\210\136\211\u0203\231\062\232" +
    "\105\233\073\001\001\000\002\001\001\000\002\001\001" +
    "\000\056\160\150\161\115\162\063\167\061\170\102\171" +
    "\107\172\075\173\120\174\111\177\162\200\161\201\176" +
    "\202\154\203\167\204\135\205\163\206\145\207\173\210" +
    "\u0214\231\062\232\105\233\073\001\001\000\056\160\150" +
    "\161\115\162\063\167\061\170\102\171\107\172\075\173" +
    "\120\174\111\177\162\200\161\201\176\202\154\203\167" +
    "\204\135\205\163\206\145\207\173\210\u0213\231\062\232" +
    "\105\233\073\001\001\000\056\160\150\161\115\162\063" +
    "\167\061\170\102\171\107\172\075\173\120\174\111\177" +
    "\162\200\161\201\176\202\154\203\167\204\135\205\163" +
    "\206\145\207\173\210\u0208\231\062\232\105\233\073\001" +
    "\001\000\002\001\001\000\054\160\150\161\115\162\063" +
    "\167\061\170\102\171\107\172\075\173\120\174\111\177" +
    "\162\200\161\201\176\202\154\203\167\204\135\205\163" +
    "\206\145\207\u0212\231\062\232\105\233\073\001\001\000" +
    "\054\160\150\161\115\162\063\167\061\170\102\171\107" +
    "\172\075\173\120\174\111\177\162\200\161\201\176\202" +
    "\154\203\167\204\135\205\163\206\145\207\u020b\231\062" +
    "\232\105\233\073\001\001\000\002\001\001\000\052\160" +
    "\150\161\115\162\063\167\061\170\102\171\107\172\075" +
    "\173\120\174\111\177\162\200\161\201\176\202\u0211\203" +
    "\167\204\135\205\163\206\145\231\062\232\105\233\073" +
    "\001\001\000\052\160\150\161\115\162\063\167\061\170" +
    "\102\171\107\172\075\173\120\174\111\177\162\200\161" +
    "\201\176\202\u0210\203\167\204\135\205\163\206\145\231" +
    "\062\232\105\233\073\001\001\000\052\160\150\161\115" +
    "\162\063\167\061\170\102\171\107\172\075\173\120\174" +
    "\111\177\162\200\161\201\176\202\u020f\203\167\204\135" +
    "\205\163\206\145\231\062\232\105\233\073\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\070\160\150" +
    "\161\115\162\063\167\061\170\102\171\107\172\075\173" +
    "\120\174\111\177\162\200\161\201\176\202\154\203\167" +
    "\204\135\205\163\206\145\207\173\210\136\211\164\212" +
    "\174\213\143\214\166\215\u0219\231\062\232\105\233\073" +
    "\001\001\000\002\001\001\000\066\160\150\161\115\162" +
    "\063\167\061\170\102\171\107\172\075\173\120\174\111" +
    "\177\162\200\161\201\176\202\154\203\167\204\135\205" +
    "\163\206\145\207\173\210\136\211\164\212\174\213\143" +
    "\214\u021b\231\062\232\105\233\073\001\001\000\002\001" +
    "\001\000\064\160\150\161\115\162\063\167\061\170\102" +
    "\171\107\172\075\173\120\174\111\177\162\200\161\201" +
    "\176\202\154\203\167\204\135\205\163\206\145\207\173" +
    "\210\136\211\164\212\174\213\u021d\231\062\232\105\233" +
    "\073\001\001\000\002\001\001\000\062\160\150\161\115" +
    "\162\063\167\061\170\102\171\107\172\075\173\120\174" +
    "\111\177\162\200\161\201\176\202\154\203\167\204\135" +
    "\205\163\206\145\207\173\210\136\211\164\212\u0221\231" +
    "\062\232\105\233\073\001\001\000\062\160\150\161\115" +
    "\162\063\167\061\170\102\171\107\172\075\173\120\174" +
    "\111\177\162\200\161\201\176\202\154\203\167\204\135" +
    "\205\163\206\145\207\173\210\136\211\164\212\u0220\231" +
    "\062\232\105\233\073\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\114\067\u0227\070\157\160\150" +
    "\161\115\162\063\167\061\170\102\171\107\172\151\173" +
    "\175\174\111\177\162\200\161\201\176\202\154\203\167" +
    "\204\135\205\163\206\145\207\173\210\136\211\164\212" +
    "\174\213\143\214\166\215\144\216\171\217\137\220\165" +
    "\221\160\222\172\223\146\225\134\227\153\231\062\232" +
    "\105\233\073\001\001\000\002\001\001\000\110\160\150" +
    "\161\115\162\063\167\061\170\102\171\107\172\151\173" +
    "\175\174\111\177\162\200\161\201\176\202\154\203\167" +
    "\204\135\205\163\206\145\207\173\210\136\211\164\212" +
    "\174\213\143\214\166\215\144\216\171\217\137\220\165" +
    "\221\160\222\172\223\146\225\134\227\u022d\231\062\232" +
    "\105\233\073\001\001\000\074\160\150\161\115\162\063" +
    "\167\061\170\102\171\107\172\075\173\120\174\111\177" +
    "\162\200\161\201\176\202\154\203\167\204\135\205\163" +
    "\206\145\207\173\210\136\211\164\212\174\213\143\214" +
    "\166\215\144\216\171\217\u022a\231\062\232\105\233\073" +
    "\001\001\000\002\001\001\000\072\160\150\161\115\162" +
    "\063\167\061\170\102\171\107\172\075\173\120\174\111" +
    "\177\162\200\161\201\176\202\154\203\167\204\135\205" +
    "\163\206\145\207\173\210\136\211\164\212\174\213\143" +
    "\214\166\215\144\216\u022c\231\062\232\105\233\073\001" +
    "\001\000\002\001\001\000\002\001\001\000\100\160\150" +
    "\161\115\162\063\167\061\170\102\171\107\172\075\173" +
    "\120\174\111\177\162\200\161\201\176\202\154\203\167" +
    "\204\135\205\163\206\145\207\173\210\136\211\164\212" +
    "\174\213\143\214\166\215\144\216\171\217\137\220\165" +
    "\221\u022f\231\062\232\105\233\073\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\052\160\150\161\115\162\063\167\061" +
    "\170\102\171\107\172\075\173\120\174\111\177\162\200" +
    "\161\201\176\202\u0238\203\167\204\135\205\163\206\145" +
    "\231\062\232\105\233\073\001\001\000\002\001\001\000" +
    "\044\160\150\161\115\162\063\167\061\170\102\171\107" +
    "\172\075\173\120\174\111\177\162\200\161\201\176\205" +
    "\u023a\206\145\231\062\232\105\233\073\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\106\160\150\161\115\162\063\167\061\170\102\171\107" +
    "\172\151\173\175\174\111\177\162\200\161\201\176\202" +
    "\154\203\167\204\135\205\163\206\145\207\173\210\136" +
    "\211\164\212\174\213\143\214\166\215\144\216\171\217" +
    "\137\220\165\221\160\222\u0248\223\146\225\134\231\062" +
    "\232\105\233\073\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\063\u024c\066\127\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\052\014\u0252\015\u0251\016\u019e\040\u01a0\041" +
    "\103\042\101\043\067\044\072\160\074\161\115\162\063" +
    "\167\061\170\102\171\107\172\075\173\120\174\111\231" +
    "\062\232\105\233\073\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\021\u0255\001\001\000\006\022\u0265\023" +
    "\u0263\001\001\000\004\012\u0256\001\001\000\006\011\u0261" +
    "\074\u0262\001\001\000\010\013\u025b\017\u025a\020\u0259\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\017\u025a\020\u025d\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\023\u0268\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\052\014\u0272\015\u0251\016\u019e\040\u01a0" +
    "\041\103\042\101\043\067\044\072\160\074\161\115\162" +
    "\063\167\061\170\102\171\107\172\075\173\120\174\111" +
    "\231\062\232\105\233\073\001\001\000\002\001\001\000" +
    "\004\021\u0274\001\001\000\004\012\u0275\001\001\000\006" +
    "\011\u0276\074\u0262\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\163\u0295\164\u0287\166\u0296\001\001\000\010" +
    "\163\u0291\164\u0287\166\u0292\001\001\000\010\163\u0289\164" +
    "\u0287\166\u028a\001\001\000\002\001\001\000\002\001\001" +
    "\000\112\160\150\161\115\162\063\167\061\170\102\171" +
    "\107\172\151\173\175\174\111\176\u027e\177\162\200\161" +
    "\201\176\202\154\203\167\204\135\205\163\206\145\207" +
    "\173\210\136\211\164\212\174\213\143\214\166\215\144" +
    "\216\171\217\137\220\165\221\160\222\172\223\146\225" +
    "\134\227\211\231\062\232\105\233\073\001\001\000\002" +
    "\001\001\000\002\001\001\000\114\160\150\161\115\162" +
    "\063\167\061\170\102\171\107\172\151\173\175\174\111" +
    "\175\u0281\176\212\177\162\200\161\201\176\202\154\203" +
    "\167\204\135\205\163\206\145\207\173\210\136\211\164" +
    "\212\174\213\143\214\166\215\144\216\171\217\137\220" +
    "\165\221\160\222\172\223\146\225\134\227\211\231\062" +
    "\232\105\233\073\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\017\u025a\020\u0285\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\110\160\150\161\115\162\063\167\061\170\102\171\107" +
    "\172\151\173\175\174\111\177\162\200\161\201\176\202" +
    "\154\203\167\204\135\205\163\206\145\207\173\210\136" +
    "\211\164\212\174\213\143\214\166\215\144\216\171\217" +
    "\137\220\165\221\160\222\172\223\146\225\134\227\u028f" +
    "\231\062\232\105\233\073\001\001\000\010\164\u028d\165" +
    "\u028c\166\u028e\001\001\000\004\070\u028b\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\164\u028d" +
    "\165\u0294\166\u028e\001\001\000\004\070\u0293\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\164\u028d\165\u0298" +
    "\166\u028e\001\001\000\004\070\u0297\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\025\u029c" +
    "\001\001\000\010\013\u02b6\017\u025a\020\u0259\001\001\000" +
    "\004\021\u029d\001\001\000\004\026\u02a0\001\001\000\006" +
    "\027\u02a3\030\u02a1\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\030\u02a4" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\031" +
    "\u02a8\033\u02a9\001\001\000\050\034\u02ac\035\u02aa\040\u02ad" +
    "\041\103\042\101\043\067\044\072\160\074\161\115\162" +
    "\063\167\061\170\102\171\107\172\075\173\120\174\111" +
    "\231\062\232\105\233\073\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\046" +
    "\035\u02b4\040\u02ad\041\103\042\101\043\067\044\072\160" +
    "\074\161\115\162\063\167\061\170\102\171\107\172\075" +
    "\173\120\174\111\231\062\232\105\233\073\001\001\000" +
    "\010\036\u02af\037\u02ae\066\u02b0\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\037\u02b3\066" +
    "\u02b0\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\025" +
    "\u02b8\001\001\000\004\021\u02b9\001\001\000\004\033\u02bb" +
    "\001\001\000\050\034\u02ac\035\u02aa\040\u02ad\041\103\042" +
    "\101\043\067\044\072\160\074\161\115\162\063\167\061" +
    "\170\102\171\107\172\075\173\120\174\111\231\062\232" +
    "\105\233\073\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\044\040\u02bf\041\103\042\101\043" +
    "\067\044\072\160\074\161\115\162\063\167\061\170\102" +
    "\171\107\172\075\173\120\174\111\231\062\232\105\233" +
    "\073\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\044\040\u02c9\041\103\042\101\043\067\044\072\160" +
    "\074\161\115\162\063\167\061\170\102\171\107\172\075" +
    "\173\120\174\111\231\062\232\105\233\073\001\001\000" +
    "\002\001\001\000\002\001\001\000\044\040\u02cc\041\103" +
    "\042\101\043\067\044\072\160\074\161\115\162\063\167" +
    "\061\170\102\171\107\172\075\173\120\174\111\231\062" +
    "\232\105\233\073\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\044\040\u02d3\041\103\042\101\043" +
    "\067\044\072\160\074\161\115\162\063\167\061\170\102" +
    "\171\107\172\075\173\120\174\111\231\062\232\105\233" +
    "\073\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return lexer.next_token(); 
    }

 

  public Scanner lexer;

  public parser(Scanner l) {
    this();
    lexer=l;
  }

  public void syntax_error(java_cup.runtime.Symbol current) {
    if(current.value == null) {
      System.out.println("Unexpected end of file." + Scanner.curLine);
      System.exit(1);
    }	
    else {
      Token t = (Token)current.value;
	System.out.println(Error.fileName + ":" + Scanner.lineCount + ": Syntax error:\n\n" + Scanner.curLine);
	for (int i=1; i<Scanner.curLine.length()+1-t.lexeme.length(); i++) 
	  System.out.print(" ");
        System.out.println("^");

      System.exit(1);
    }
  }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {



// Converts a name or a nested record access expression
// to a package access
public Sequence<Name> primary2PackageAccess(Expression e) {
  if (e instanceof NameExpr) {
    // A name is OK - just turn it into a sequence with one member
    return new Sequence<Name>(((NameExpr)e).name());
  } else if (!(e instanceof RecordAccess)) {
    // Only a record access looks like a package access - everything
    // else should produce an error
    Error.error(e,"Syntax error in package access");
  } else {
    // Take the last (field) name off the record access and call
    // recursively on the rest - turn all into a sequence of names
    RecordAccess ra = (RecordAccess)e;
    return primary2PackageAccess(ra.record()).append(ra.field());
  }
  return null;  
}


  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 378: // protocol_literal ::= NEW type_name LBRACE IDENTIFIER COLON argument_list_opt RBRACE 
            {
              ProtocolLiteral RESULT = null;
		int tnleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int tnright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Name tn = (Name)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Token id2 = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Sequence l = (Sequence)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ProtocolLiteral(tn, new Name(id2), l); 
              CUP$parser$result = new java_cup.runtime.Symbol(153/*protocol_literal*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 377: // record_literal ::= NEW type_name LBRACE argument_list RBRACE 
            {
              RecordLiteral RESULT = null;
		int tnleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tnright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Name tn = (Name)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Sequence l = (Sequence)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new RecordLiteral(tn, l); 
              CUP$parser$result = new java_cup.runtime.Symbol(152/*record_literal*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 376: // literal ::= NULL_LITERAL 
            {
              Literal RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Token l = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new PrimitiveLiteral(l, PrimitiveLiteral.NullKind); 
              CUP$parser$result = new java_cup.runtime.Symbol(151/*literal*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 375: // literal ::= protocol_literal 
            {
              Literal RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		ProtocolLiteral l = (ProtocolLiteral)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = l; 
              CUP$parser$result = new java_cup.runtime.Symbol(151/*literal*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 374: // literal ::= record_literal 
            {
              Literal RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		RecordLiteral l = (RecordLiteral)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = l; 
              CUP$parser$result = new java_cup.runtime.Symbol(151/*literal*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 373: // literal ::= CHARACTER_LITERAL 
            {
              Literal RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Token l = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new PrimitiveLiteral(l, PrimitiveLiteral.CharKind); 
              CUP$parser$result = new java_cup.runtime.Symbol(151/*literal*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 372: // literal ::= STRING_LITERAL 
            {
              Literal RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Token l = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new PrimitiveLiteral(l, PrimitiveLiteral.StringKind); 
              CUP$parser$result = new java_cup.runtime.Symbol(151/*literal*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 371: // literal ::= BOOLEAN_LITERAL 
            {
              Literal RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Token l = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new PrimitiveLiteral(l, PrimitiveLiteral.BooleanKind); 
              CUP$parser$result = new java_cup.runtime.Symbol(151/*literal*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 370: // literal ::= DOUBLE_LITERAL 
            {
              Literal RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Token l = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new PrimitiveLiteral(l, PrimitiveLiteral.DoubleKind); 
              CUP$parser$result = new java_cup.runtime.Symbol(151/*literal*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 369: // literal ::= FLOAT_LITERAL 
            {
              Literal RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Token l = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new PrimitiveLiteral(l, PrimitiveLiteral.FloatKind); 
              CUP$parser$result = new java_cup.runtime.Symbol(151/*literal*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 368: // literal ::= LONG_LITERAL 
            {
              Literal RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Token l = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new PrimitiveLiteral(l, PrimitiveLiteral.LongKind); 
              CUP$parser$result = new java_cup.runtime.Symbol(151/*literal*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 367: // literal ::= INTEGER_LITERAL 
            {
              Literal RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Token l = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new PrimitiveLiteral(l, PrimitiveLiteral.IntKind); 
              CUP$parser$result = new java_cup.runtime.Symbol(151/*literal*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 366: // constant_expression ::= expression 
            {
              Expression RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = e; 
              CUP$parser$result = new java_cup.runtime.Symbol(150/*constant_expression*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 365: // expression ::= assignment_expression 
            {
              Expression RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = e; 
              CUP$parser$result = new java_cup.runtime.Symbol(149/*expression*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 364: // expression_opt ::= 
            {
              Expression RESULT = null;
		 RESULT = null; 
              CUP$parser$result = new java_cup.runtime.Symbol(148/*expression_opt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 363: // expression_opt ::= expression 
            {
              Expression RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = e; 
              CUP$parser$result = new java_cup.runtime.Symbol(148/*expression_opt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 362: // left_hand_side ::= array_access 
            {
              Expression RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		ArrayAccessExpr a = (ArrayAccessExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = a; 
              CUP$parser$result = new java_cup.runtime.Symbol(147/*left_hand_side*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 361: // left_hand_side ::= record_access 
            {
              Expression RESULT = null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Expression r = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = r; 
              CUP$parser$result = new java_cup.runtime.Symbol(147/*left_hand_side*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 360: // left_hand_side ::= IDENTIFIER 
            {
              Expression RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new NameExpr(new Name(id)); 
              CUP$parser$result = new java_cup.runtime.Symbol(147/*left_hand_side*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 359: // assignment_operator ::= OREQ 
            {
              Integer RESULT = null;
		 RESULT = Assignment.OREQ; 
              CUP$parser$result = new java_cup.runtime.Symbol(146/*assignment_operator*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 358: // assignment_operator ::= XOREQ 
            {
              Integer RESULT = null;
		 RESULT = Assignment.XOREQ; 
              CUP$parser$result = new java_cup.runtime.Symbol(146/*assignment_operator*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 357: // assignment_operator ::= ANDEQ 
            {
              Integer RESULT = null;
		 RESULT = Assignment.ANDEQ; 
              CUP$parser$result = new java_cup.runtime.Symbol(146/*assignment_operator*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 356: // assignment_operator ::= RRSHIFTEQ 
            {
              Integer RESULT = null;
		 RESULT = Assignment.RRSHIFTEQ; 
              CUP$parser$result = new java_cup.runtime.Symbol(146/*assignment_operator*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 355: // assignment_operator ::= RSHIFTEQ 
            {
              Integer RESULT = null;
		 RESULT = Assignment.RSHIFTEQ; 
              CUP$parser$result = new java_cup.runtime.Symbol(146/*assignment_operator*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 354: // assignment_operator ::= LSHIFTEQ 
            {
              Integer RESULT = null;
		 RESULT = Assignment.LSHIFTEQ; 
              CUP$parser$result = new java_cup.runtime.Symbol(146/*assignment_operator*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 353: // assignment_operator ::= MINUSEQ 
            {
              Integer RESULT = null;
		 RESULT = Assignment.MINUSEQ; 
              CUP$parser$result = new java_cup.runtime.Symbol(146/*assignment_operator*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 352: // assignment_operator ::= PLUSEQ 
            {
              Integer RESULT = null;
		 RESULT = Assignment.PLUSEQ; 
              CUP$parser$result = new java_cup.runtime.Symbol(146/*assignment_operator*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 351: // assignment_operator ::= MODEQ 
            {
              Integer RESULT = null;
		 RESULT = Assignment.MODEQ; 
              CUP$parser$result = new java_cup.runtime.Symbol(146/*assignment_operator*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 350: // assignment_operator ::= DIVEQ 
            {
              Integer RESULT = null;
		 RESULT = Assignment.DIVEQ; 
              CUP$parser$result = new java_cup.runtime.Symbol(146/*assignment_operator*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 349: // assignment_operator ::= MULTEQ 
            {
              Integer RESULT = null;
		 RESULT = Assignment.MULTEQ; 
              CUP$parser$result = new java_cup.runtime.Symbol(146/*assignment_operator*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 348: // assignment_operator ::= EQ 
            {
              Integer RESULT = null;
		 RESULT = Assignment.EQ; 
              CUP$parser$result = new java_cup.runtime.Symbol(146/*assignment_operator*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 347: // assignment ::= left_hand_side assignment_operator assignment_expression 
            {
              Assignment RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression l = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Integer o = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Assignment(l, e, o); 
              CUP$parser$result = new java_cup.runtime.Symbol(145/*assignment*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 346: // assignment_expression ::= assignment 
            {
              Expression RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Assignment a = (Assignment)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = a; 
              CUP$parser$result = new java_cup.runtime.Symbol(144/*assignment_expression*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 345: // assignment_expression ::= conditional_expression 
            {
              Expression RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = e; 
              CUP$parser$result = new java_cup.runtime.Symbol(144/*assignment_expression*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 344: // conditional_expression ::= conditional_or_expression QUEST expression COLON conditional_expression 
            {
              Expression RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Ternary(e ,e1, e2); 
              CUP$parser$result = new java_cup.runtime.Symbol(143/*conditional_expression*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 343: // conditional_expression ::= conditional_or_expression 
            {
              Expression RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = e; 
              CUP$parser$result = new java_cup.runtime.Symbol(143/*conditional_expression*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 342: // conditional_or_expression ::= conditional_or_expression OROR conditional_and_expression 
            {
              Expression RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new BinaryExpr(e1, e2, BinaryExpr.OROR); 
              CUP$parser$result = new java_cup.runtime.Symbol(142/*conditional_or_expression*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 341: // conditional_or_expression ::= conditional_and_expression 
            {
              Expression RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = e; 
              CUP$parser$result = new java_cup.runtime.Symbol(142/*conditional_or_expression*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 340: // conditional_and_expression ::= conditional_and_expression ANDAND inclusive_or_expression 
            {
              Expression RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new BinaryExpr(e1 ,e2, BinaryExpr.ANDAND); 
              CUP$parser$result = new java_cup.runtime.Symbol(141/*conditional_and_expression*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 339: // conditional_and_expression ::= inclusive_or_expression 
            {
              Expression RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = e; 
              CUP$parser$result = new java_cup.runtime.Symbol(141/*conditional_and_expression*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 338: // inclusive_or_expression ::= inclusive_or_expression OR exclusive_or_expression 
            {
              Expression RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new BinaryExpr(e1 ,e2 ,BinaryExpr.OR); 
              CUP$parser$result = new java_cup.runtime.Symbol(140/*inclusive_or_expression*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 337: // inclusive_or_expression ::= exclusive_or_expression 
            {
              Expression RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = e; 
              CUP$parser$result = new java_cup.runtime.Symbol(140/*inclusive_or_expression*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 336: // exclusive_or_expression ::= exclusive_or_expression XOR and_expression 
            {
              Expression RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new BinaryExpr(e1 ,e2, BinaryExpr.XOR); 
              CUP$parser$result = new java_cup.runtime.Symbol(139/*exclusive_or_expression*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 335: // exclusive_or_expression ::= and_expression 
            {
              Expression RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = e; 
              CUP$parser$result = new java_cup.runtime.Symbol(139/*exclusive_or_expression*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 334: // and_expression ::= and_expression AND equality_expression 
            {
              Expression RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new BinaryExpr(e1 ,e2, BinaryExpr.AND); 
              CUP$parser$result = new java_cup.runtime.Symbol(138/*and_expression*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 333: // and_expression ::= equality_expression 
            {
              Expression RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = e; 
              CUP$parser$result = new java_cup.runtime.Symbol(138/*and_expression*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 332: // equality_expression ::= equality_expression NOTEQ relational_expression 
            {
              Expression RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new BinaryExpr(e1, e2, BinaryExpr.NOTEQ); 
              CUP$parser$result = new java_cup.runtime.Symbol(137/*equality_expression*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 331: // equality_expression ::= equality_expression EQEQ relational_expression 
            {
              Expression RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new BinaryExpr(e1, e2, BinaryExpr.EQEQ); 
              CUP$parser$result = new java_cup.runtime.Symbol(137/*equality_expression*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 330: // equality_expression ::= relational_expression 
            {
              Expression RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = e; 
              CUP$parser$result = new java_cup.runtime.Symbol(137/*equality_expression*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 329: // relational_expression ::= relational_expression GTEQ shift_expression 
            {
              Expression RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new BinaryExpr(e1, e2, BinaryExpr.GTEQ); 
              CUP$parser$result = new java_cup.runtime.Symbol(136/*relational_expression*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 328: // relational_expression ::= relational_expression LTEQ shift_expression 
            {
              Expression RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new BinaryExpr(e1, e2, BinaryExpr.LTEQ); 
              CUP$parser$result = new java_cup.runtime.Symbol(136/*relational_expression*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 327: // relational_expression ::= relational_expression GT shift_expression 
            {
              Expression RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new BinaryExpr(e1, e2, BinaryExpr.GT); 
              CUP$parser$result = new java_cup.runtime.Symbol(136/*relational_expression*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 326: // relational_expression ::= relational_expression LT shift_expression 
            {
              Expression RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new BinaryExpr(e1, e2, BinaryExpr.LT); 
              CUP$parser$result = new java_cup.runtime.Symbol(136/*relational_expression*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 325: // relational_expression ::= shift_expression 
            {
              Expression RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = e; 
              CUP$parser$result = new java_cup.runtime.Symbol(136/*relational_expression*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 324: // shift_expression ::= shift_expression RRSHIFT additive_expression 
            {
              Expression RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new BinaryExpr(e1, e2, BinaryExpr.RRSHIFT); 
              CUP$parser$result = new java_cup.runtime.Symbol(135/*shift_expression*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 323: // shift_expression ::= shift_expression RSHIFT additive_expression 
            {
              Expression RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new BinaryExpr(e1, e2, BinaryExpr.RSHIFT); 
              CUP$parser$result = new java_cup.runtime.Symbol(135/*shift_expression*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 322: // shift_expression ::= shift_expression LSHIFT additive_expression 
            {
              Expression RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new BinaryExpr(e1, e2, BinaryExpr.LSHIFT); 
              CUP$parser$result = new java_cup.runtime.Symbol(135/*shift_expression*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 321: // shift_expression ::= additive_expression 
            {
              Expression RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = e; 
              CUP$parser$result = new java_cup.runtime.Symbol(135/*shift_expression*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 320: // additive_expression ::= additive_expression MINUS multiplicative_expression 
            {
              Expression RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new BinaryExpr(e1, e2, BinaryExpr.MINUS); 
              CUP$parser$result = new java_cup.runtime.Symbol(134/*additive_expression*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 319: // additive_expression ::= additive_expression PLUS multiplicative_expression 
            {
              Expression RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new BinaryExpr(e1, e2, BinaryExpr.PLUS); 
              CUP$parser$result = new java_cup.runtime.Symbol(134/*additive_expression*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 318: // additive_expression ::= multiplicative_expression 
            {
              Expression RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = e; 
              CUP$parser$result = new java_cup.runtime.Symbol(134/*additive_expression*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 317: // multiplicative_expression ::= multiplicative_expression MOD unary_expression 
            {
              Expression RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new BinaryExpr(e1, e2, BinaryExpr.MOD); 
              CUP$parser$result = new java_cup.runtime.Symbol(133/*multiplicative_expression*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 316: // multiplicative_expression ::= multiplicative_expression DIV unary_expression 
            {
              Expression RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new BinaryExpr(e1, e2, BinaryExpr.DIV); 
              CUP$parser$result = new java_cup.runtime.Symbol(133/*multiplicative_expression*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 315: // multiplicative_expression ::= multiplicative_expression MULT unary_expression 
            {
              Expression RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new BinaryExpr(e1, e2, BinaryExpr.MULT); 
              CUP$parser$result = new java_cup.runtime.Symbol(133/*multiplicative_expression*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 314: // multiplicative_expression ::= unary_expression 
            {
              Expression RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = e; 
              CUP$parser$result = new java_cup.runtime.Symbol(133/*multiplicative_expression*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 313: // cast_expression ::= LPAREN primitive_type RPAREN unary_expression 
            {
              CastExpr RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		PrimitiveType t = (PrimitiveType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new CastExpr(t, e); 
              CUP$parser$result = new java_cup.runtime.Symbol(132/*cast_expression*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 312: // cast_expression ::= LPAREN expression RPAREN unary_expression_not_plus_minus 
            {
              CastExpr RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Expression ex = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 if (e instanceof NameExpr) 
									    RESULT = new CastExpr(new NamedType(((NameExpr)e).name()), ex);
									  else
									    Error.error(e,"Illegal Expression in cast - Type names only"); 	
									  RESULT = null;
								        
              CUP$parser$result = new java_cup.runtime.Symbol(132/*cast_expression*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 311: // unary_expression_not_plus_minus ::= cast_expression 
            {
              Expression RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		CastExpr e = (CastExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = e; 
              CUP$parser$result = new java_cup.runtime.Symbol(131/*unary_expression_not_plus_minus*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 310: // unary_expression_not_plus_minus ::= NOT unary_expression 
            {
              Expression RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new UnaryPreExpr(e, UnaryPreExpr.NOT); 
              CUP$parser$result = new java_cup.runtime.Symbol(131/*unary_expression_not_plus_minus*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 309: // unary_expression_not_plus_minus ::= COMP unary_expression 
            {
              Expression RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new UnaryPreExpr(e, UnaryPreExpr.COMP); 
              CUP$parser$result = new java_cup.runtime.Symbol(131/*unary_expression_not_plus_minus*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 308: // unary_expression_not_plus_minus ::= postfix_expression 
            {
              Expression RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = e; 
              CUP$parser$result = new java_cup.runtime.Symbol(131/*unary_expression_not_plus_minus*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 307: // pre_decrement_expression ::= MINUSMINUS unary_expression 
            {
              UnaryPreExpr RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new UnaryPreExpr(e, UnaryPreExpr.PLUSPLUS); 
              CUP$parser$result = new java_cup.runtime.Symbol(130/*pre_decrement_expression*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 306: // pre_increment_expression ::= PLUSPLUS unary_expression 
            {
              UnaryPreExpr RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new UnaryPreExpr(e, UnaryPreExpr.PLUSPLUS); 
              CUP$parser$result = new java_cup.runtime.Symbol(129/*pre_increment_expression*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 305: // unary_expression ::= unary_expression_not_plus_minus 
            {
              Expression RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = e; 
              CUP$parser$result = new java_cup.runtime.Symbol(128/*unary_expression*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 304: // unary_expression ::= MINUS unary_expression 
            {
              Expression RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new UnaryPreExpr(e, UnaryPreExpr.MINUS); 
              CUP$parser$result = new java_cup.runtime.Symbol(128/*unary_expression*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 303: // unary_expression ::= PLUS unary_expression 
            {
              Expression RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = e; 
              CUP$parser$result = new java_cup.runtime.Symbol(128/*unary_expression*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 302: // unary_expression ::= pre_decrement_expression 
            {
              Expression RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		UnaryPreExpr e = (UnaryPreExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = e; 
              CUP$parser$result = new java_cup.runtime.Symbol(128/*unary_expression*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 301: // unary_expression ::= pre_increment_expression 
            {
              Expression RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		UnaryPreExpr e = (UnaryPreExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = e; 
              CUP$parser$result = new java_cup.runtime.Symbol(128/*unary_expression*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 300: // post_decrement_expression ::= postfix_expression MINUSMINUS 
            {
              UnaryPostExpr RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new UnaryPostExpr(e, UnaryPostExpr.MINUSMINUS); 
              CUP$parser$result = new java_cup.runtime.Symbol(127/*post_decrement_expression*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 299: // post_increment_expression ::= postfix_expression PLUSPLUS 
            {
              UnaryPostExpr RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new UnaryPostExpr(e, UnaryPostExpr.PLUSPLUS); 
              CUP$parser$result = new java_cup.runtime.Symbol(126/*post_increment_expression*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 298: // postfix_expression ::= IDENTIFIER 
            {
              Expression RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new NameExpr(new Name(id)); 
              CUP$parser$result = new java_cup.runtime.Symbol(125/*postfix_expression*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 297: // postfix_expression ::= post_decrement_expression 
            {
              Expression RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		UnaryPostExpr e = (UnaryPostExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = e; 
              CUP$parser$result = new java_cup.runtime.Symbol(125/*postfix_expression*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 296: // postfix_expression ::= post_increment_expression 
            {
              Expression RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		UnaryPostExpr e = (UnaryPostExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = e; 
              CUP$parser$result = new java_cup.runtime.Symbol(125/*postfix_expression*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 295: // postfix_expression ::= primary 
            {
              Expression RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = e; 
              CUP$parser$result = new java_cup.runtime.Symbol(125/*postfix_expression*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 294: // argument_list ::= argument_list COMMA expression 
            {
              Sequence RESULT = null;
		int lstleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Sequence lst = (Sequence)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = lst.append(e); 
              CUP$parser$result = new java_cup.runtime.Symbol(124/*argument_list*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 293: // argument_list ::= expression 
            {
              Sequence RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Sequence<Expression>(e); 
              CUP$parser$result = new java_cup.runtime.Symbol(124/*argument_list*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 292: // argument_list_opt ::= 
            {
              Sequence RESULT = null;
		 RESULT = new Sequence<Expression>(); 
              CUP$parser$result = new java_cup.runtime.Symbol(123/*argument_list_opt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 291: // argument_list_opt ::= argument_list 
            {
              Sequence RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Sequence a = (Sequence)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = a; 
              CUP$parser$result = new java_cup.runtime.Symbol(123/*argument_list_opt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 290: // invocation ::= IDENTIFIER DOT IDENTIFIER LPAREN argument_list_opt RPAREN 
            {
              Invocation RESULT = null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Token p = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Sequence l = (Sequence)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Invocation(new NameExpr(new Name(p)), new Name(id), l); 
              CUP$parser$result = new java_cup.runtime.Symbol(122/*invocation*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 289: // invocation ::= IDENTIFIER COLONCOLON IDENTIFIER LPAREN argument_list_opt RPAREN 
            {
              Invocation RESULT = null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Token p = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Sequence l = (Sequence)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Invocation(null, new Name(id, primary2PackageAccess(new NameExpr(new Name(p)))), l); 
              CUP$parser$result = new java_cup.runtime.Symbol(122/*invocation*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 288: // invocation ::= primary COLONCOLON IDENTIFIER LPAREN argument_list_opt RPAREN 
            {
              Invocation RESULT = null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Expression p = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Sequence l = (Sequence)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Invocation(null, new Name(id, primary2PackageAccess(p)), l); 
              CUP$parser$result = new java_cup.runtime.Symbol(122/*invocation*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 287: // invocation ::= primary DOT IDENTIFIER LPAREN argument_list_opt RPAREN 
            {
              Invocation RESULT = null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Expression p = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Sequence l = (Sequence)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Invocation(p, new Name(id), l); 
              CUP$parser$result = new java_cup.runtime.Symbol(122/*invocation*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 286: // invocation ::= IDENTIFIER LPAREN argument_list_opt RPAREN 
            {
              Invocation RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Sequence l = (Sequence)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Invocation(null, new Name(id), l); 
              CUP$parser$result = new java_cup.runtime.Symbol(122/*invocation*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 285: // array_access ::= primary_no_new_array_or_mobile LBRACK expression RBRACK 
            {
              ArrayAccessExpr RESULT = null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Expression p = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ArrayAccessExpr(p, e); 
              CUP$parser$result = new java_cup.runtime.Symbol(121/*array_access*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 284: // array_access ::= IDENTIFIER LBRACK expression RBRACK 
            {
              ArrayAccessExpr RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ArrayAccessExpr(new NameExpr(new Name(id)), e); 
              CUP$parser$result = new java_cup.runtime.Symbol(121/*array_access*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 283: // record_access ::= IDENTIFIER DOT IDENTIFIER 
            {
              Expression RESULT = null;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Token id1 = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Token id2 = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new RecordAccess(new NameExpr(new Name(id1)), new Name(id2)); 
              CUP$parser$result = new java_cup.runtime.Symbol(120/*record_access*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 282: // record_access ::= primary DOT IDENTIFIER 
            {
              Expression RESULT = null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression p = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new RecordAccess(p, new Name(id)); 
              CUP$parser$result = new java_cup.runtime.Symbol(120/*record_access*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 281: // chan_read_expression ::= IDENTIFIER DOT READ LPAREN block_opt RPAREN 
            {
              ChannelReadExpr RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Block b = (Block)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ChannelReadExpr(new NameExpr(new Name(id)), b); 
              CUP$parser$result = new java_cup.runtime.Symbol(119/*chan_read_expression*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 280: // chan_read_expression ::= primary DOT READ LPAREN block_opt RPAREN 
            {
              ChannelReadExpr RESULT = null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Expression p = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Block b = (Block)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ChannelReadExpr(p, b); 
              CUP$parser$result = new java_cup.runtime.Symbol(119/*chan_read_expression*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 279: // chan_expression ::= IDENTIFIER DOT WRITE 
            {
              ChannelEndExpr RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new ChannelEndExpr(new NameExpr(new Name(id)), ChannelEndExpr.WRITE); 
              CUP$parser$result = new java_cup.runtime.Symbol(118/*chan_expression*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 278: // chan_expression ::= IDENTIFIER DOT READ 
            {
              ChannelEndExpr RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new ChannelEndExpr(new NameExpr(new Name(id)), ChannelEndExpr.READ); 
              CUP$parser$result = new java_cup.runtime.Symbol(118/*chan_expression*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 277: // chan_expression ::= primary DOT WRITE 
            {
              ChannelEndExpr RESULT = null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression p = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new ChannelEndExpr(p, ChannelEndExpr.WRITE); 
              CUP$parser$result = new java_cup.runtime.Symbol(118/*chan_expression*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 276: // chan_expression ::= primary DOT READ 
            {
              ChannelEndExpr RESULT = null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression p = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new ChannelEndExpr(p, ChannelEndExpr.READ); 
              CUP$parser$result = new java_cup.runtime.Symbol(118/*chan_expression*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 275: // mobile_creation ::= NEW MOBILE LPAREN type_name RPAREN 
            {
              NewMobile RESULT = null;
		int tnleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tnright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Name tn = (Name)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new NewMobile(tn); 
              CUP$parser$result = new java_cup.runtime.Symbol(117/*mobile_creation*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 274: // dims ::= LBRACK RBRACK 
            {
              Sequence RESULT = null;
		 RESULT = new Sequence<AST>(null); 
              CUP$parser$result = new java_cup.runtime.Symbol(116/*dims*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 273: // dims ::= dims LBRACK RBRACK 
            {
              Sequence RESULT = null;
		int lstleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Sequence lst = (Sequence)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = lst.append(null); 
              CUP$parser$result = new java_cup.runtime.Symbol(116/*dims*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 272: // dims_opt ::= 
            {
              Sequence RESULT = null;
		 RESULT = new Sequence<AST>(); 
              CUP$parser$result = new java_cup.runtime.Symbol(115/*dims_opt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 271: // dims_opt ::= dims 
            {
              Sequence RESULT = null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Sequence d = (Sequence)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = d; 
              CUP$parser$result = new java_cup.runtime.Symbol(115/*dims_opt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 270: // dim_expr ::= LBRACK expression RBRACK 
            {
              Expression RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = e; 
              CUP$parser$result = new java_cup.runtime.Symbol(114/*dim_expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 269: // dim_exprs ::= dim_exprs dim_expr 
            {
              Sequence RESULT = null;
		int lstleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Sequence lst = (Sequence)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = lst.append(e); 
              CUP$parser$result = new java_cup.runtime.Symbol(113/*dim_exprs*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 268: // dim_exprs ::= dim_expr 
            {
              Sequence RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Sequence<Expression>(e); 
              CUP$parser$result = new java_cup.runtime.Symbol(113/*dim_exprs*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 267: // array_creation_expression ::= NEW channel_type dims array_initializer 
            {
              NewArray RESULT = null;
		int ctleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int ctright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Type ct = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Sequence d = (Sequence)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		ArrayLiteral i = (ArrayLiteral)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new NewArray(ct, new Sequence<Expression>(), d, i); 
              CUP$parser$result = new java_cup.runtime.Symbol(112/*array_creation_expression*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 266: // array_creation_expression ::= NEW channel_type dim_exprs dims_opt 
            {
              NewArray RESULT = null;
		int ctleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int ctright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Type ct = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int d1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int d1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Sequence d1 = (Sequence)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int d2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int d2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Sequence d2 = (Sequence)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new NewArray(ct, d1, d2, null); 
              CUP$parser$result = new java_cup.runtime.Symbol(112/*array_creation_expression*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 265: // array_creation_expression ::= NEW IDENTIFIER dims array_initializer 
            {
              NewArray RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Sequence d = (Sequence)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		ArrayLiteral i = (ArrayLiteral)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new NewArray(new NamedType(new Name(id)), new Sequence<Expression>(), d, i); 
              CUP$parser$result = new java_cup.runtime.Symbol(112/*array_creation_expression*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 264: // array_creation_expression ::= NEW IDENTIFIER dim_exprs dims_opt 
            {
              NewArray RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int d1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int d1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Sequence d1 = (Sequence)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int d2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int d2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Sequence d2 = (Sequence)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new NewArray(new NamedType(new Name(id)), d1, d2, null); 
              CUP$parser$result = new java_cup.runtime.Symbol(112/*array_creation_expression*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 263: // array_creation_expression ::= NEW primitive_type dims array_initializer 
            {
              NewArray RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		PrimitiveType t = (PrimitiveType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Sequence d = (Sequence)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		ArrayLiteral i = (ArrayLiteral)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new NewArray(t, new Sequence<Expression>(), d, i); 
              CUP$parser$result = new java_cup.runtime.Symbol(112/*array_creation_expression*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 262: // array_creation_expression ::= NEW primitive_type dim_exprs dims_opt 
            {
              NewArray RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		PrimitiveType t = (PrimitiveType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int d1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int d1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Sequence d1 = (Sequence)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int d2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int d2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Sequence d2 = (Sequence)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new NewArray(t, d1, d2, null); 
              CUP$parser$result = new java_cup.runtime.Symbol(112/*array_creation_expression*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 261: // primary_no_new_array_or_mobile ::= array_access 
            {
              Expression RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		ArrayAccessExpr e = (ArrayAccessExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = e; 
              CUP$parser$result = new java_cup.runtime.Symbol(111/*primary_no_new_array_or_mobile*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 260: // primary_no_new_array_or_mobile ::= invocation 
            {
              Expression RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Invocation e = (Invocation)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = e; 
              CUP$parser$result = new java_cup.runtime.Symbol(111/*primary_no_new_array_or_mobile*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 259: // primary_no_new_array_or_mobile ::= record_access 
            {
              Expression RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = e; 
              CUP$parser$result = new java_cup.runtime.Symbol(111/*primary_no_new_array_or_mobile*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 258: // primary_no_new_array_or_mobile ::= LPAREN expression RPAREN 
            {
              Expression RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = e; 
              CUP$parser$result = new java_cup.runtime.Symbol(111/*primary_no_new_array_or_mobile*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 257: // primary_no_new_array_or_mobile ::= literal 
            {
              Expression RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Literal e = (Literal)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = e; 
              CUP$parser$result = new java_cup.runtime.Symbol(111/*primary_no_new_array_or_mobile*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 256: // primary ::= IDENTIFIER COLONCOLON IDENTIFIER 
            {
              Expression RESULT = null;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Token id1 = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Token id2 = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new NameExpr(new Name(id2, new Sequence(new Name(id1)))); 
              CUP$parser$result = new java_cup.runtime.Symbol(110/*primary*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 255: // primary ::= primary COLONCOLON IDENTIFIER 
            {
              Expression RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new NameExpr(new Name(id, primary2PackageAccess(e))); 
              CUP$parser$result = new java_cup.runtime.Symbol(110/*primary*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 254: // primary ::= chan_expression 
            {
              Expression RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		ChannelEndExpr e = (ChannelEndExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = e; 
              CUP$parser$result = new java_cup.runtime.Symbol(110/*primary*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 253: // primary ::= chan_read_expression 
            {
              Expression RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		ChannelReadExpr e = (ChannelReadExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = e; 
              CUP$parser$result = new java_cup.runtime.Symbol(110/*primary*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 252: // primary ::= mobile_creation 
            {
              Expression RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		NewMobile e = (NewMobile)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = e; 
              CUP$parser$result = new java_cup.runtime.Symbol(110/*primary*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 251: // primary ::= array_creation_expression 
            {
              Expression RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		NewArray e = (NewArray)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = e; 
              CUP$parser$result = new java_cup.runtime.Symbol(110/*primary*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 250: // primary ::= primary_no_new_array_or_mobile 
            {
              Expression RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = e; 
              CUP$parser$result = new java_cup.runtime.Symbol(110/*primary*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 249: // guard ::= timeout_statement 
            {
              Guard RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		TimeoutStat s = (TimeoutStat)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Guard(s); 
              CUP$parser$result = new java_cup.runtime.Symbol(109/*guard*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 248: // guard ::= SKIP 
            {
              Guard RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Token s = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Guard(new SkipStat(s)); 
              CUP$parser$result = new java_cup.runtime.Symbol(109/*guard*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 247: // guard ::= left_hand_side EQ chan_read_expression 
            {
              Guard RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression l = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		ChannelReadExpr e = (ChannelReadExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Guard(new ExprStat(new Assignment(l, e, Assignment.EQ))); 
              CUP$parser$result = new java_cup.runtime.Symbol(109/*guard*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 246: // alt_case ::= guard COLON statement 
            {
              AltCase RESULT = null;
		int gleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int gright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Guard g = (Guard)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new AltCase(null, g, s); 
              CUP$parser$result = new java_cup.runtime.Symbol(108/*alt_case*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 245: // alt_case ::= LPAREN expression RPAREN ANDAND guard COLON statement 
            {
              AltCase RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int gleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int gright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Guard g = (Guard)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new AltCase(e, g, s); 
              CUP$parser$result = new java_cup.runtime.Symbol(108/*alt_case*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 244: // alt_body ::= alt_case 
            {
              Sequence RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		AltCase e = (AltCase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Sequence<AltCase>(e); 
              CUP$parser$result = new java_cup.runtime.Symbol(107/*alt_body*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 243: // alt_body ::= alt_body alt_case 
            {
              Sequence RESULT = null;
		int lstleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Sequence lst = (Sequence)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		AltCase e = (AltCase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = lst.append(e); 
              CUP$parser$result = new java_cup.runtime.Symbol(107/*alt_body*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 242: // alt_statement ::= ALT LPAREN for_init_opt SEMICOLON expression_opt SEMICOLON for_update_opt RPAREN LBRACE alt_body RBRACE 
            {
              AltStat RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Sequence i = (Sequence)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int uleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int uright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Sequence u = (Sequence)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Sequence b = (Sequence)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new AltStat(i, e, u, b, false /* ALT */); 
              CUP$parser$result = new java_cup.runtime.Symbol(106/*alt_statement*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 241: // alt_statement ::= ALT LBRACE alt_body RBRACE 
            {
              AltStat RESULT = null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Sequence b = (Sequence)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new AltStat(b, false /* ALT */); 
              CUP$parser$result = new java_cup.runtime.Symbol(106/*alt_statement*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 240: // alt_statement ::= PRI ALT LPAREN for_init_opt SEMICOLON expression_opt SEMICOLON for_update_opt RPAREN LBRACE alt_body RBRACE 
            {
              AltStat RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Sequence i = (Sequence)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int uleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int uright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Sequence u = (Sequence)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Sequence b = (Sequence)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new AltStat(i, e, u, b, true /* PRI ALT */); 
              CUP$parser$result = new java_cup.runtime.Symbol(106/*alt_statement*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 239: // alt_statement ::= PRI ALT LBRACE alt_body RBRACE 
            {
              AltStat RESULT = null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Sequence b = (Sequence)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new AltStat(b, true /* PRI ALT */); 
              CUP$parser$result = new java_cup.runtime.Symbol(106/*alt_statement*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 238: // skip_statement ::= SKIP SEMICOLON 
            {
              SkipStat RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Token s = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new SkipStat(s); 
              CUP$parser$result = new java_cup.runtime.Symbol(105/*skip_statement*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 237: // stop_statement ::= STOP SEMICOLON 
            {
              StopStat RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Token s = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new StopStat(s); 
              CUP$parser$result = new java_cup.runtime.Symbol(104/*stop_statement*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 236: // switch_label ::= DEFAULT COLON 
            {
              SwitchLabel RESULT = null;
		 RESULT = new SwitchLabel(null, true /* default: */); 
              CUP$parser$result = new java_cup.runtime.Symbol(103/*switch_label*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 235: // switch_label ::= CASE constant_expression COLON 
            {
              SwitchLabel RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new SwitchLabel(e, false /* not default: */); 
              CUP$parser$result = new java_cup.runtime.Symbol(103/*switch_label*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 234: // switch_labels ::= switch_labels switch_label 
            {
              Sequence RESULT = null;
		int lstleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Sequence lst = (Sequence)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		SwitchLabel e = (SwitchLabel)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = lst.append(e); 
              CUP$parser$result = new java_cup.runtime.Symbol(102/*switch_labels*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 233: // switch_labels ::= switch_label 
            {
              Sequence RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		SwitchLabel e = (SwitchLabel)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Sequence<SwitchLabel>(e); 
              CUP$parser$result = new java_cup.runtime.Symbol(102/*switch_labels*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 232: // switch_block_statement_group ::= switch_labels block_statements 
            {
              SwitchGroup RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Sequence s = (Sequence)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Sequence b = (Sequence)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new SwitchGroup(s, b); 
              CUP$parser$result = new java_cup.runtime.Symbol(101/*switch_block_statement_group*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 231: // switch_block_statement_groups ::= switch_block_statement_groups switch_block_statement_group 
            {
              Sequence RESULT = null;
		int lstleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Sequence lst = (Sequence)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		SwitchGroup e = (SwitchGroup)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = lst.append(e); 
              CUP$parser$result = new java_cup.runtime.Symbol(100/*switch_block_statement_groups*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 230: // switch_block_statement_groups ::= switch_block_statement_group 
            {
              Sequence RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		SwitchGroup e = (SwitchGroup)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Sequence<SwitchGroup>(e); 
              CUP$parser$result = new java_cup.runtime.Symbol(100/*switch_block_statement_groups*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 229: // switch_block_statement_groups_opt ::= 
            {
              Sequence RESULT = null;
		 RESULT = new Sequence<SwitchGroup>(); 
              CUP$parser$result = new java_cup.runtime.Symbol(99/*switch_block_statement_groups_opt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 228: // switch_block_statement_groups_opt ::= switch_block_statement_groups 
            {
              Sequence RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Sequence s = (Sequence)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = s; 
              CUP$parser$result = new java_cup.runtime.Symbol(99/*switch_block_statement_groups_opt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 227: // switch_block ::= LBRACE switch_block_statement_groups_opt RBRACE 
            {
              Sequence RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Sequence s = (Sequence)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = s; 
              CUP$parser$result = new java_cup.runtime.Symbol(98/*switch_block*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 226: // switch_statement ::= SWITCH LPAREN expression RPAREN switch_block 
            {
              SwitchStat RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Sequence b = (Sequence)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new SwitchStat(e, b); 
              CUP$parser$result = new java_cup.runtime.Symbol(97/*switch_statement*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 225: // return_statement ::= RETURN expression_opt SEMICOLON 
            {
              ReturnStat RESULT = null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Token r = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ReturnStat(r, e); 
              CUP$parser$result = new java_cup.runtime.Symbol(96/*return_statement*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 224: // identifier_opt ::= 
            {
              Name RESULT = null;
		 RESULT = null; 
              CUP$parser$result = new java_cup.runtime.Symbol(95/*identifier_opt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 223: // identifier_opt ::= IDENTIFIER 
            {
              Name RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Name(id); 
              CUP$parser$result = new java_cup.runtime.Symbol(95/*identifier_opt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 222: // continue_statement ::= CONTINUE identifier_opt SEMICOLON 
            {
              ContinueStat RESULT = null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Token c = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Name i = (Name)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ContinueStat(c,i); 
              CUP$parser$result = new java_cup.runtime.Symbol(94/*continue_statement*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 221: // break_statement ::= BREAK identifier_opt SEMICOLON 
            {
              BreakStat RESULT = null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Token b = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Name i = (Name)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new BreakStat(b, i); 
              CUP$parser$result = new java_cup.runtime.Symbol(93/*break_statement*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 220: // labeled_statement ::= IDENTIFIER COLON statement 
            {
              Statement RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 s.setLabel(id.lexeme); RESULT = s; 
              CUP$parser$result = new java_cup.runtime.Symbol(92/*labeled_statement*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 219: // statement_expression ::= IDENTIFIER DOT READ LPAREN block_opt RPAREN 
            {
              Expression RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Block b = (Block)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ChannelReadExpr(new NameExpr(new Name(id)), b); 
              CUP$parser$result = new java_cup.runtime.Symbol(91/*statement_expression*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 218: // statement_expression ::= primary DOT READ LPAREN block_opt RPAREN 
            {
              Expression RESULT = null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Expression p = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Block b = (Block)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ChannelReadExpr(p, b); 
              CUP$parser$result = new java_cup.runtime.Symbol(91/*statement_expression*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 217: // statement_expression ::= invocation 
            {
              Expression RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Invocation e = (Invocation)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = e; 
              CUP$parser$result = new java_cup.runtime.Symbol(91/*statement_expression*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 216: // statement_expression ::= post_decrement_expression 
            {
              Expression RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		UnaryPostExpr e = (UnaryPostExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = e; 
              CUP$parser$result = new java_cup.runtime.Symbol(91/*statement_expression*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 215: // statement_expression ::= post_increment_expression 
            {
              Expression RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		UnaryPostExpr e = (UnaryPostExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = e; 
              CUP$parser$result = new java_cup.runtime.Symbol(91/*statement_expression*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 214: // statement_expression ::= pre_decrement_expression 
            {
              Expression RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		UnaryPreExpr e = (UnaryPreExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = e; 
              CUP$parser$result = new java_cup.runtime.Symbol(91/*statement_expression*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 213: // statement_expression ::= pre_increment_expression 
            {
              Expression RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		UnaryPreExpr e = (UnaryPreExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = e; 
              CUP$parser$result = new java_cup.runtime.Symbol(91/*statement_expression*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 212: // statement_expression ::= assignment 
            {
              Expression RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Assignment e = (Assignment)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = e; 
              CUP$parser$result = new java_cup.runtime.Symbol(91/*statement_expression*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 211: // expression_statement ::= statement_expression SEMICOLON 
            {
              ExprStat RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ExprStat(e); 
              CUP$parser$result = new java_cup.runtime.Symbol(90/*expression_statement*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 210: // suspend_statement ::= SUSPEND RESUME WITH LPAREN formal_parameter_list RPAREN SEMICOLON 
            {
              SuspendStat RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Token s = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Sequence l = (Sequence)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new SuspendStat(s, l); 
              CUP$parser$result = new java_cup.runtime.Symbol(89/*suspend_statement*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 209: // timeout_statement ::= primary DOT TIMEOUT LPAREN expression RPAREN 
            {
              TimeoutStat RESULT = null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Expression p = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new TimeoutStat(p, e); 
              CUP$parser$result = new java_cup.runtime.Symbol(88/*timeout_statement*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 208: // timeout_statement ::= IDENTIFIER DOT TIMEOUT LPAREN expression RPAREN 
            {
              TimeoutStat RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new TimeoutStat(new NameExpr(new Name(id)), e); 
              CUP$parser$result = new java_cup.runtime.Symbol(88/*timeout_statement*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 207: // barrier_sync_statement ::= SYNC primary_no_new_array_or_mobile SEMICOLON 
            {
              SyncStat RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new SyncStat(e); 
              CUP$parser$result = new java_cup.runtime.Symbol(87/*barrier_sync_statement*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 206: // empty_statement ::= SEMICOLON 
            {
              Statement RESULT = null;
		 RESULT = null; 
              CUP$parser$result = new java_cup.runtime.Symbol(86/*empty_statement*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 205: // channel ::= chan_expression 
            {
              AST RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		ChannelEndExpr e = (ChannelEndExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = e; 
              CUP$parser$result = new java_cup.runtime.Symbol(85/*channel*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 204: // channel ::= channel_type IDENTIFIER EQ primary_no_new_array_or_mobile 
            {
              AST RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new LocalDecl(t, new Var(new Name(id), e), false); 
              CUP$parser$result = new java_cup.runtime.Symbol(85/*channel*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 203: // channel ::= IDENTIFIER 
            {
              AST RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new NameExpr(new Name(id)); 
              CUP$parser$result = new java_cup.runtime.Symbol(85/*channel*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 202: // channels ::= channel 
            {
              Sequence RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		AST e = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Sequence<AST>(e); 
              CUP$parser$result = new java_cup.runtime.Symbol(84/*channels*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 201: // channels ::= channels COMMA channel 
            {
              Sequence RESULT = null;
		int lstleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Sequence lst = (Sequence)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		AST e = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = lst.append(e); 
              CUP$parser$result = new java_cup.runtime.Symbol(84/*channels*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 200: // claim_statement_no_short_if ::= CLAIM LPAREN channels RPAREN statement_no_short_if 
            {
              ClaimStat RESULT = null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Sequence c = (Sequence)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new ClaimStat(c, s); 
              CUP$parser$result = new java_cup.runtime.Symbol(83/*claim_statement_no_short_if*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 199: // claim_statement ::= CLAIM LPAREN channels RPAREN statement 
            {
              ClaimStat RESULT = null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Sequence c = (Sequence)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new ClaimStat(c, s); 
              CUP$parser$result = new java_cup.runtime.Symbol(82/*claim_statement*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 198: // do_statement ::= DO statement WHILE LPAREN expression RPAREN 
            {
              DoStat RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new DoStat(s, e); 
              CUP$parser$result = new java_cup.runtime.Symbol(81/*do_statement*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 197: // statement_expressions ::= statement_expressions COMMA statement_expression 
            {
              Sequence RESULT = null;
		int lstleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Sequence lst = (Sequence)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = lst.append(new ExprStat(e)); 
              CUP$parser$result = new java_cup.runtime.Symbol(79/*statement_expressions*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 196: // statement_expressions ::= statement_expression 
            {
              Sequence RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Sequence<ExprStat>(new ExprStat(e)); 
              CUP$parser$result = new java_cup.runtime.Symbol(79/*statement_expressions*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 195: // for_update ::= statement_expressions 
            {
              Sequence RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Sequence s = (Sequence)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = s; 
              CUP$parser$result = new java_cup.runtime.Symbol(78/*for_update*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 194: // for_update_opt ::= 
            {
              Sequence RESULT = null;
		 RESULT = new Sequence<ExprStat>(); 
              CUP$parser$result = new java_cup.runtime.Symbol(77/*for_update_opt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 193: // for_update_opt ::= for_update 
            {
              Sequence RESULT = null;
		int uleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int uright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Sequence u = (Sequence)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = u; 
              CUP$parser$result = new java_cup.runtime.Symbol(77/*for_update_opt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 192: // for_init ::= local_variable_declaration 
            {
              Sequence RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Sequence e = (Sequence)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = e; 
              CUP$parser$result = new java_cup.runtime.Symbol(76/*for_init*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 191: // for_init ::= statement_expressions 
            {
              Sequence RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Sequence e = (Sequence)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = e; 
              CUP$parser$result = new java_cup.runtime.Symbol(76/*for_init*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 190: // for_init_opt ::= 
            {
              Sequence RESULT = null;
		 RESULT = new Sequence<AST>(); 
              CUP$parser$result = new java_cup.runtime.Symbol(75/*for_init_opt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // for_init_opt ::= for_init 
            {
              Sequence RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Sequence i = (Sequence)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = i; 
              CUP$parser$result = new java_cup.runtime.Symbol(75/*for_init_opt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // for_statement_no_short_if ::= PAR FOR LPAREN for_init_opt SEMICOLON expression_opt SEMICOLON for_update_opt RPAREN statement_no_short_if 
            {
              ForStat RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Token t = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Sequence i = (Sequence)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int uleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int uright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Sequence u = (Sequence)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new ForStat(t, i, e, u, new Sequence<Expression>(), s, true); 
              CUP$parser$result = new java_cup.runtime.Symbol(74/*for_statement_no_short_if*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // for_statement_no_short_if ::= PAR FOR LPAREN for_init_opt SEMICOLON expression_opt SEMICOLON for_update_opt RPAREN ENROLL LPAREN argument_list RPAREN statement_no_short_if 
            {
              ForStat RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)).right;
		Token t = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-12)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		Sequence i = (Sequence)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int uleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int uright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Sequence u = (Sequence)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Sequence b = (Sequence)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new ForStat(t, i, e, u, b, s, true); 
              CUP$parser$result = new java_cup.runtime.Symbol(74/*for_statement_no_short_if*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-13)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // for_statement_no_short_if ::= FOR LPAREN for_init_opt SEMICOLON expression_opt SEMICOLON for_update_opt RPAREN statement_no_short_if 
            {
              ForStat RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Token t = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Sequence i = (Sequence)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int uleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int uright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Sequence u = (Sequence)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new ForStat(t, i, e, u, new Sequence<Expression>(), s, false); 
              CUP$parser$result = new java_cup.runtime.Symbol(74/*for_statement_no_short_if*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // for_statement ::= PAR FOR LPAREN for_init_opt SEMICOLON expression_opt SEMICOLON for_update_opt RPAREN statement 
            {
              ForStat RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Token t = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Sequence i = (Sequence)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int uleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int uright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Sequence u = (Sequence)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new ForStat(t, i, e, u, new Sequence<Expression>(), s, true); 
              CUP$parser$result = new java_cup.runtime.Symbol(73/*for_statement*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // for_statement ::= PAR FOR LPAREN for_init_opt SEMICOLON expression_opt SEMICOLON for_update_opt RPAREN ENROLL LPAREN argument_list RPAREN statement 
            {
              ForStat RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)).right;
		Token t = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-12)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		Sequence i = (Sequence)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int uleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int uright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Sequence u = (Sequence)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Sequence b = (Sequence)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new ForStat(t, i, e, u, b, s, true); 
              CUP$parser$result = new java_cup.runtime.Symbol(73/*for_statement*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-13)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // for_statement ::= FOR LPAREN for_init_opt SEMICOLON expression_opt SEMICOLON for_update_opt RPAREN statement 
            {
              ForStat RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Token t = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Sequence i = (Sequence)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int uleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int uright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Sequence u = (Sequence)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new ForStat(t, i, e, u, new Sequence<Expression>(), s, false); 
              CUP$parser$result = new java_cup.runtime.Symbol(73/*for_statement*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // while_statement_no_short_if ::= WHILE LPAREN expression RPAREN statement_no_short_if 
            {
              WhileStat RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new WhileStat(e, s); 
              CUP$parser$result = new java_cup.runtime.Symbol(72/*while_statement_no_short_if*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // while_statement ::= WHILE LPAREN expression RPAREN statement 
            {
              WhileStat RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new WhileStat(e, s); 
              CUP$parser$result = new java_cup.runtime.Symbol(71/*while_statement*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // if_then_else_statement_no_short_if ::= IF LPAREN expression RPAREN statement_no_short_if ELSE statement_no_short_if 
            {
              IfStat RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int s1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Statement s1 = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Statement s2 = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new IfStat(e, s1, s2); 
              CUP$parser$result = new java_cup.runtime.Symbol(70/*if_then_else_statement_no_short_if*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // if_then_else_statement ::= IF LPAREN expression RPAREN statement_no_short_if ELSE statement 
            {
              IfStat RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int s1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Statement s1 = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Statement s2 = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new IfStat(e, s1, s2); 
              CUP$parser$result = new java_cup.runtime.Symbol(69/*if_then_else_statement*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // if_then_statement ::= IF LPAREN expression RPAREN statement 
            {
              IfStat RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new IfStat(e, s, null); 
              CUP$parser$result = new java_cup.runtime.Symbol(68/*if_then_statement*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // statement_without_trailing_substatement ::= alt_statement 
            {
              Statement RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		AltStat s = (AltStat)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = s; 
              CUP$parser$result = new java_cup.runtime.Symbol(67/*statement_without_trailing_substatement*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // statement_without_trailing_substatement ::= primary DOT WRITE LPAREN expression RPAREN SEMICOLON 
            {
              Statement RESULT = null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Expression p = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new ChannelWriteStat(p, e); 
              CUP$parser$result = new java_cup.runtime.Symbol(67/*statement_without_trailing_substatement*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // statement_without_trailing_substatement ::= IDENTIFIER DOT WRITE LPAREN expression RPAREN SEMICOLON 
            {
              Statement RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new ChannelWriteStat(new NameExpr(new Name(id)), e); 
              CUP$parser$result = new java_cup.runtime.Symbol(67/*statement_without_trailing_substatement*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // statement_without_trailing_substatement ::= stop_statement 
            {
              Statement RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		StopStat s = (StopStat)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = s; 
              CUP$parser$result = new java_cup.runtime.Symbol(67/*statement_without_trailing_substatement*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // statement_without_trailing_substatement ::= skip_statement 
            {
              Statement RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		SkipStat s = (SkipStat)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = s; 
              CUP$parser$result = new java_cup.runtime.Symbol(67/*statement_without_trailing_substatement*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // statement_without_trailing_substatement ::= switch_statement 
            {
              Statement RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		SwitchStat s = (SwitchStat)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = s; 
              CUP$parser$result = new java_cup.runtime.Symbol(67/*statement_without_trailing_substatement*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // statement_without_trailing_substatement ::= return_statement 
            {
              Statement RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		ReturnStat s = (ReturnStat)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = s; 
              CUP$parser$result = new java_cup.runtime.Symbol(67/*statement_without_trailing_substatement*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // statement_without_trailing_substatement ::= continue_statement 
            {
              Statement RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		ContinueStat s = (ContinueStat)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = s; 
              CUP$parser$result = new java_cup.runtime.Symbol(67/*statement_without_trailing_substatement*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // statement_without_trailing_substatement ::= break_statement 
            {
              Statement RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		BreakStat s = (BreakStat)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = s; 
              CUP$parser$result = new java_cup.runtime.Symbol(67/*statement_without_trailing_substatement*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // statement_without_trailing_substatement ::= expression_statement 
            {
              Statement RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		ExprStat s = (ExprStat)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = s; 
              CUP$parser$result = new java_cup.runtime.Symbol(67/*statement_without_trailing_substatement*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // statement_without_trailing_substatement ::= suspend_statement 
            {
              Statement RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		SuspendStat s = (SuspendStat)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = s; 
              CUP$parser$result = new java_cup.runtime.Symbol(67/*statement_without_trailing_substatement*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // statement_without_trailing_substatement ::= SEQ block 
            {
              Statement RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Block s = (Block)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = s; 
              CUP$parser$result = new java_cup.runtime.Symbol(67/*statement_without_trailing_substatement*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // statement_without_trailing_substatement ::= timeout_statement SEMICOLON 
            {
              Statement RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		TimeoutStat s = (TimeoutStat)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = s; 
              CUP$parser$result = new java_cup.runtime.Symbol(67/*statement_without_trailing_substatement*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // statement_without_trailing_substatement ::= barrier_sync_statement 
            {
              Statement RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		SyncStat s = (SyncStat)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = s; 
              CUP$parser$result = new java_cup.runtime.Symbol(67/*statement_without_trailing_substatement*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // statement_without_trailing_substatement ::= do_statement 
            {
              Statement RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		DoStat s = (DoStat)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = s; 
              CUP$parser$result = new java_cup.runtime.Symbol(67/*statement_without_trailing_substatement*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // statement_without_trailing_substatement ::= empty_statement 
            {
              Statement RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = s; 
              CUP$parser$result = new java_cup.runtime.Symbol(67/*statement_without_trailing_substatement*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // statement_without_trailing_substatement ::= par_block 
            {
              Statement RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		ParBlock s = (ParBlock)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = s; 
              CUP$parser$result = new java_cup.runtime.Symbol(67/*statement_without_trailing_substatement*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // statement_without_trailing_substatement ::= block 
            {
              Statement RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Block s = (Block)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = s; 
              CUP$parser$result = new java_cup.runtime.Symbol(67/*statement_without_trailing_substatement*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // statement_no_short_if ::= claim_statement_no_short_if 
            {
              Statement RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		ClaimStat s = (ClaimStat)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = s; 
              CUP$parser$result = new java_cup.runtime.Symbol(66/*statement_no_short_if*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // statement_no_short_if ::= for_statement_no_short_if 
            {
              Statement RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		ForStat s = (ForStat)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = s; 
              CUP$parser$result = new java_cup.runtime.Symbol(66/*statement_no_short_if*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // statement_no_short_if ::= while_statement_no_short_if 
            {
              Statement RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		WhileStat s = (WhileStat)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = s; 
              CUP$parser$result = new java_cup.runtime.Symbol(66/*statement_no_short_if*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // statement_no_short_if ::= if_then_else_statement_no_short_if 
            {
              Statement RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		IfStat s = (IfStat)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = s; 
              CUP$parser$result = new java_cup.runtime.Symbol(66/*statement_no_short_if*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // statement_no_short_if ::= statement_without_trailing_substatement 
            {
              Statement RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = s; 
              CUP$parser$result = new java_cup.runtime.Symbol(66/*statement_no_short_if*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // statement ::= labeled_statement 
            {
              Statement RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = s; 
              CUP$parser$result = new java_cup.runtime.Symbol(65/*statement*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // statement ::= claim_statement 
            {
              Statement RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		ClaimStat s = (ClaimStat)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = s; 
              CUP$parser$result = new java_cup.runtime.Symbol(65/*statement*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // statement ::= for_statement 
            {
              Statement RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		ForStat s = (ForStat)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = s; 
              CUP$parser$result = new java_cup.runtime.Symbol(65/*statement*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // statement ::= while_statement 
            {
              Statement RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		WhileStat s = (WhileStat)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = s; 
              CUP$parser$result = new java_cup.runtime.Symbol(65/*statement*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // statement ::= if_then_else_statement 
            {
              Statement RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		IfStat s = (IfStat)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = s; 
              CUP$parser$result = new java_cup.runtime.Symbol(65/*statement*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // statement ::= if_then_statement 
            {
              Statement RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		IfStat s = (IfStat)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = s; 
              CUP$parser$result = new java_cup.runtime.Symbol(65/*statement*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // statement ::= statement_without_trailing_substatement 
            {
              Statement RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = s; 
              CUP$parser$result = new java_cup.runtime.Symbol(65/*statement*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // local_variable_declaration ::= MOBILE type variable_declarators 
            {
              Sequence RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Sequence v = (Sequence)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 Sequence s = new Sequence<LocalDecl>();
                                                    for (int i=0; i<((Sequence<LocalDecl>)v).size(); i++) 
                                                      s.append(new LocalDecl(t, (Var)v.child(i), false /* it is NOT CONST */));
                                                  RESULT = s; 
                                                
              CUP$parser$result = new java_cup.runtime.Symbol(64/*local_variable_declaration*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // local_variable_declaration ::= type variable_declarators 
            {
              Sequence RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Sequence v = (Sequence)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 Sequence s = new Sequence<LocalDecl>();
                                                    for (int i=0; i<((Sequence<LocalDecl>)v).size(); i++) 
                                                      s.append(new LocalDecl(t, (Var)v.child(i), false /* it is NOT CONST */));
                                                  RESULT = s; 
                                                
              CUP$parser$result = new java_cup.runtime.Symbol(64/*local_variable_declaration*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // local_variable_declaration ::= CONST type variable_declarators 
            {
              Sequence RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Sequence v = (Sequence)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 Sequence<LocalDecl> s = new Sequence<LocalDecl>();
                                                    for (int i=0; i<((Sequence<LocalDecl>)v).size(); i++) 
                                                      s.append(new LocalDecl(t, (Var)v.child(i), true /* it is CONST */));
                                                  RESULT = s; 
                                                
              CUP$parser$result = new java_cup.runtime.Symbol(64/*local_variable_declaration*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // block_statement ::= statement 
            {
              Sequence RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Sequence<Statement>(s); 
              CUP$parser$result = new java_cup.runtime.Symbol(63/*block_statement*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // block_statement ::= local_variable_declaration SEMICOLON 
            {
              Sequence RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Sequence l = (Sequence)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = l; 
              CUP$parser$result = new java_cup.runtime.Symbol(63/*block_statement*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // barriers ::= expression 
            {
              Sequence RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Sequence<Expression>(e); 
              CUP$parser$result = new java_cup.runtime.Symbol(62/*barriers*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // barriers ::= barriers COMMA expression 
            {
              Sequence RESULT = null;
		int lstleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Sequence lst = (Sequence)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = lst.append(e); 
              CUP$parser$result = new java_cup.runtime.Symbol(62/*barriers*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // par_block ::= PAR ENROLL LPAREN barriers RPAREN block 
            {
              ParBlock RESULT = null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Sequence b = (Sequence)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int blleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int blright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Block bl = (Block)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new ParBlock(bl.stats(), b); 
              CUP$parser$result = new java_cup.runtime.Symbol(61/*par_block*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // par_block ::= PAR block 
            {
              ParBlock RESULT = null;
		int blleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int blright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Block bl = (Block)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new ParBlock(bl.stats(), new Sequence<Expression>()); 
              CUP$parser$result = new java_cup.runtime.Symbol(61/*par_block*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // block_statements ::= block_statement 
            {
              Sequence RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Sequence e = (Sequence)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = e; 
              CUP$parser$result = new java_cup.runtime.Symbol(60/*block_statements*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // block_statements ::= block_statements block_statement 
            {
              Sequence RESULT = null;
		int lstleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Sequence lst = (Sequence)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Sequence e = (Sequence)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = lst.merge(e); 
              CUP$parser$result = new java_cup.runtime.Symbol(60/*block_statements*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // block_statements_opt ::= 
            {
              Sequence RESULT = null;
		 RESULT = new Sequence<Statement>(); 
              CUP$parser$result = new java_cup.runtime.Symbol(59/*block_statements_opt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // block_statements_opt ::= block_statements 
            {
              Sequence RESULT = null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Sequence b = (Sequence)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = b; 
              CUP$parser$result = new java_cup.runtime.Symbol(59/*block_statements_opt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // block ::= LBRACE block_statements_opt RBRACE 
            {
              Block RESULT = null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Sequence b = (Sequence)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Block(b); 
              CUP$parser$result = new java_cup.runtime.Symbol(58/*block*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // block_opt ::= 
            {
              Block RESULT = null;
		 RESULT = null; 
              CUP$parser$result = new java_cup.runtime.Symbol(57/*block_opt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // block_opt ::= block 
            {
              Block RESULT = null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Block b = (Block)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = b; 
              CUP$parser$result = new java_cup.runtime.Symbol(57/*block_opt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // variable_initializers ::= variable_initializer 
            {
              Sequence RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Sequence<Expression>(e); 
              CUP$parser$result = new java_cup.runtime.Symbol(56/*variable_initializers*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // variable_initializers ::= variable_initializers COMMA variable_initializer 
            {
              Sequence RESULT = null;
		int lstleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Sequence lst = (Sequence)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = lst.append(e); 
              CUP$parser$result = new java_cup.runtime.Symbol(56/*variable_initializers*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // variable_initializers_opt ::= 
            {
              Sequence RESULT = null;
		 RESULT = new Sequence<Expression>(); 
              CUP$parser$result = new java_cup.runtime.Symbol(55/*variable_initializers_opt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // variable_initializers_opt ::= variable_initializers 
            {
              Sequence RESULT = null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Sequence v = (Sequence)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = v; 
              CUP$parser$result = new java_cup.runtime.Symbol(55/*variable_initializers_opt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // array_initializer ::= LBRACE variable_initializers_opt RBRACE 
            {
              ArrayLiteral RESULT = null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Sequence v = (Sequence)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ArrayLiteral(v); 
              CUP$parser$result = new java_cup.runtime.Symbol(54/*array_initializer*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // variable_initializer ::= expression 
            {
              Expression RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = e; 
              CUP$parser$result = new java_cup.runtime.Symbol(53/*variable_initializer*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // variable_initializer ::= array_initializer 
            {
              Expression RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		ArrayLiteral a = (ArrayLiteral)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = a; 
              CUP$parser$result = new java_cup.runtime.Symbol(53/*variable_initializer*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // variable_declarator_identifier ::= variable_declarator_identifier LBRACK RBRACK 
            {
              Name RESULT = null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Name v = (Name)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 v.setArrayDepth(v.getArrayDepth()+1); RESULT=v; 
              CUP$parser$result = new java_cup.runtime.Symbol(52/*variable_declarator_identifier*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // variable_declarator_identifier ::= IDENTIFIER 
            {
              Name RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Name(id); 
              CUP$parser$result = new java_cup.runtime.Symbol(52/*variable_declarator_identifier*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // variable_declarator ::= variable_declarator_identifier EQ variable_initializer 
            {
              Var RESULT = null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Name v = (Name)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Expression i = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Var(v, i); 
              CUP$parser$result = new java_cup.runtime.Symbol(51/*variable_declarator*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // variable_declarator ::= variable_declarator_identifier 
            {
              Var RESULT = null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Name v = (Name)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Var(v, null); 
              CUP$parser$result = new java_cup.runtime.Symbol(51/*variable_declarator*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // variable_declarators ::= variable_declarator 
            {
              Sequence RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Var e = (Var)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Sequence<Var>(e); 
              CUP$parser$result = new java_cup.runtime.Symbol(50/*variable_declarators*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // variable_declarators ::= variable_declarators COMMA variable_declarator 
            {
              Sequence RESULT = null;
		int lstleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Sequence lst = (Sequence)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Var e = (Var)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = lst.append(e); 
              CUP$parser$result = new java_cup.runtime.Symbol(50/*variable_declarators*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // constant_declarator ::= variable_declarator_identifier 
            {
              Var RESULT = null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Name v = (Name)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Var(v, null); 
              CUP$parser$result = new java_cup.runtime.Symbol(49/*constant_declarator*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // constant_declarator ::= variable_declarator_identifier EQ variable_initializer 
            {
              Var RESULT = null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Name v = (Name)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Expression i = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Var(v, i); 
              CUP$parser$result = new java_cup.runtime.Symbol(49/*constant_declarator*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // constant_declarators ::= constant_declarator 
            {
              Sequence RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Var e = (Var)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Sequence<Var>(e); 
              CUP$parser$result = new java_cup.runtime.Symbol(48/*constant_declarators*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // constant_declarators ::= constant_declarators COMMA constant_declarator 
            {
              Sequence RESULT = null;
		int lstleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Sequence lst = (Sequence)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Var e = (Var)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = lst.append(e); 
              CUP$parser$result = new java_cup.runtime.Symbol(48/*constant_declarators*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // constant_declaration ::= modifiers_opt type constant_declarators SEMICOLON 
            {
              Sequence RESULT = null;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Sequence m = (Sequence)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Sequence c = (Sequence)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 Sequence s = new Sequence<ConstantDecl>();
	                                                             for (Var v : (Sequence<Var>)c) 
                                                                        s.append(new ConstantDecl(m, t, v));
                                                                    RESULT = s; 
                                                                  
              CUP$parser$result = new java_cup.runtime.Symbol(47/*constant_declaration*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // modifier ::= PROTECTED 
            {
              Modifier RESULT = null;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Token m = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Modifier(m, Modifier.PROTECTED); 
              CUP$parser$result = new java_cup.runtime.Symbol(46/*modifier*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // modifier ::= PRIVATE 
            {
              Modifier RESULT = null;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Token m = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Modifier(m, Modifier.PRIVATE); 
              CUP$parser$result = new java_cup.runtime.Symbol(46/*modifier*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // modifier ::= PUBLIC 
            {
              Modifier RESULT = null;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Token m = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Modifier(m, Modifier.PUBLIC); 
              CUP$parser$result = new java_cup.runtime.Symbol(46/*modifier*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // modifier ::= NATIVE 
            {
              Modifier RESULT = null;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Token m = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Modifier(m, Modifier.NATIVE); 
              CUP$parser$result = new java_cup.runtime.Symbol(46/*modifier*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // modifier ::= CONST 
            {
              Modifier RESULT = null;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Token m = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Modifier(m, Modifier.CONST); 
              CUP$parser$result = new java_cup.runtime.Symbol(46/*modifier*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // modifier ::= MOBILE 
            {
              Modifier RESULT = null;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Token m = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Modifier(m, Modifier.MOBILE); 
              CUP$parser$result = new java_cup.runtime.Symbol(46/*modifier*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // modifiers ::= modifier 
            {
              Sequence RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Modifier e = (Modifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Sequence<Modifier>(e); 
              CUP$parser$result = new java_cup.runtime.Symbol(45/*modifiers*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // modifiers ::= modifiers modifier 
            {
              Sequence RESULT = null;
		int lstleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Sequence lst = (Sequence)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Modifier e = (Modifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = lst.append(e); 
              CUP$parser$result = new java_cup.runtime.Symbol(45/*modifiers*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // modifiers_opt ::= 
            {
              Sequence RESULT = null;
		 RESULT = new Sequence<Modifier>(); 
              CUP$parser$result = new java_cup.runtime.Symbol(44/*modifiers_opt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // modifiers_opt ::= modifiers 
            {
              Sequence RESULT = null;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Sequence m = (Sequence)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = m; 
              CUP$parser$result = new java_cup.runtime.Symbol(44/*modifiers_opt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // import_declaration ::= IMPORT package_access DOT MULT SEMICOLON 
            {
              Import RESULT = null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Sequence p = (Sequence)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Token m = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Import(p.append(new Name(m)));  
              CUP$parser$result = new java_cup.runtime.Symbol(43/*import_declaration*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // import_declaration ::= IMPORT package_access SEMICOLON 
            {
              Import RESULT = null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Sequence p = (Sequence)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Import(p); 
              CUP$parser$result = new java_cup.runtime.Symbol(43/*import_declaration*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // import_declarations ::= import_declaration 
            {
              Sequence RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Import e = (Import)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Sequence<Import>(e); 
              CUP$parser$result = new java_cup.runtime.Symbol(42/*import_declarations*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // import_declarations ::= import_declarations import_declaration 
            {
              Sequence RESULT = null;
		int lstleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Sequence lst = (Sequence)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Import e = (Import)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = lst.append(e); 
              CUP$parser$result = new java_cup.runtime.Symbol(42/*import_declarations*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // import_declarations_opt ::= 
            {
              Sequence RESULT = null;
		 RESULT = new Sequence<Import>(); 
              CUP$parser$result = new java_cup.runtime.Symbol(41/*import_declarations_opt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // import_declarations_opt ::= import_declarations 
            {
              Sequence RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Sequence i = (Sequence)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = i; 
              CUP$parser$result = new java_cup.runtime.Symbol(41/*import_declarations_opt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // package_declaration ::= PACKAGE package_access SEMICOLON 
            {
              Sequence RESULT = null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Sequence p = (Sequence)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = p; 
              CUP$parser$result = new java_cup.runtime.Symbol(37/*package_declaration*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // package_declaration_opt ::= 
            {
              Sequence RESULT = null;
		 RESULT = null; 
              CUP$parser$result = new java_cup.runtime.Symbol(36/*package_declaration_opt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // package_declaration_opt ::= package_declaration 
            {
              Sequence RESULT = null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Sequence p = (Sequence)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = p; 
              CUP$parser$result = new java_cup.runtime.Symbol(36/*package_declaration_opt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // pragma ::= PRAGMA IDENTIFIER SEMICOLON 
            {
              Pragma RESULT = null;
		int pnleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pnright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Token pn = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Pragma(new Name(pn), null); 
              CUP$parser$result = new java_cup.runtime.Symbol(40/*pragma*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // pragma ::= PRAGMA IDENTIFIER STRING_LITERAL SEMICOLON 
            {
              Pragma RESULT = null;
		int pnleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int pnright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Token pn = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Token s = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Pragma(new Name(pn), s.lexeme); 
              CUP$parser$result = new java_cup.runtime.Symbol(40/*pragma*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // pragmas ::= pragmas pragma 
            {
              Sequence RESULT = null;
		int psleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int psright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Sequence ps = (Sequence)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Pragma p = (Pragma)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = ps.append(p); 
              CUP$parser$result = new java_cup.runtime.Symbol(39/*pragmas*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // pragmas ::= pragma 
            {
              Sequence RESULT = null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Pragma p = (Pragma)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Sequence<Pragma>(p); 
              CUP$parser$result = new java_cup.runtime.Symbol(39/*pragmas*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // pragmas_opt ::= 
            {
              Sequence RESULT = null;
		 RESULT = new Sequence<Pragma>(); 
              CUP$parser$result = new java_cup.runtime.Symbol(38/*pragmas_opt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // pragmas_opt ::= pragmas 
            {
              Sequence RESULT = null;
		int psleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int psright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Sequence ps = (Sequence)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = ps; 
              CUP$parser$result = new java_cup.runtime.Symbol(38/*pragmas_opt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // compilation_unit ::= pragmas_opt package_declaration_opt import_declarations_opt type_declarations_opt 
            {
              Compilation RESULT = null;
		int prleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int prright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Sequence pr = (Sequence)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Sequence p = (Sequence)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Sequence i = (Sequence)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Sequence t = (Sequence)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Compilation(pr, p, i, t); 
              CUP$parser$result = new java_cup.runtime.Symbol(35/*compilation_unit*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // channel_type ::= SHARED CHAN LT type GT DOT WRITE 
            {
              Type RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		 RESULT = new ChannelEndType(ChannelEndType.SHARED, t, ChannelEndType.WRITE_END); 
              CUP$parser$result = new java_cup.runtime.Symbol(34/*channel_type*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // channel_type ::= SHARED CHAN LT type GT DOT READ 
            {
              Type RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		 RESULT = new ChannelEndType(ChannelEndType.SHARED, t, ChannelEndType.READ_END); 
              CUP$parser$result = new java_cup.runtime.Symbol(34/*channel_type*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // channel_type ::= CHAN LT type GT DOT WRITE 
            {
              Type RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		 RESULT = new ChannelEndType(ChannelEndType.NOT_SHARED, t, ChannelEndType.WRITE_END); 
              CUP$parser$result = new java_cup.runtime.Symbol(34/*channel_type*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // channel_type ::= CHAN LT type GT DOT READ 
            {
              Type RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		 RESULT = new ChannelEndType(ChannelEndType.NOT_SHARED, t, ChannelEndType.READ_END); 
              CUP$parser$result = new java_cup.runtime.Symbol(34/*channel_type*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // channel_type ::= CHAN LT type GT 
            {
              Type RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ChannelType(t, ChannelType.NOT_SHARED); 
              CUP$parser$result = new java_cup.runtime.Symbol(34/*channel_type*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // channel_type ::= SHARED CHAN LT type GT 
            {
              Type RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ChannelType(t, ChannelType.SHARED_READ_WRITE); 
              CUP$parser$result = new java_cup.runtime.Symbol(34/*channel_type*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // channel_type ::= SHARED WRITE CHAN LT type GT 
            {
              Type RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ChannelType(t, ChannelType.SHARED_WRITE); 
              CUP$parser$result = new java_cup.runtime.Symbol(34/*channel_type*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // channel_type ::= SHARED READ CHAN LT type GT 
            {
              Type RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ChannelType(t, ChannelType.SHARED_READ); 
              CUP$parser$result = new java_cup.runtime.Symbol(34/*channel_type*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // array_type ::= primary COLONCOLON IDENTIFIER dims 
            {
              ArrayType RESULT = null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Expression p = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Sequence d = (Sequence)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new ArrayType(new NamedType(new Name(id, primary2PackageAccess(p))), d.size()); 
              CUP$parser$result = new java_cup.runtime.Symbol(33/*array_type*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // array_type ::= IDENTIFIER dims 
            {
              ArrayType RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Sequence d = (Sequence)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new ArrayType(new NamedType(new Name(id)), d.size()); 
              CUP$parser$result = new java_cup.runtime.Symbol(33/*array_type*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // array_type ::= channel_type dims 
            {
              ArrayType RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Sequence d = (Sequence)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new ArrayType(t, d.size()); 
              CUP$parser$result = new java_cup.runtime.Symbol(33/*array_type*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // array_type ::= primitive_type dims 
            {
              ArrayType RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		PrimitiveType t = (PrimitiveType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Sequence d = (Sequence)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new ArrayType(t, d.size()); 
              CUP$parser$result = new java_cup.runtime.Symbol(33/*array_type*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // named_type ::= IDENTIFIER NT$0 package_access COLONCOLON IDENTIFIER 
            {
              NamedType RESULT = null;
              // propagate RESULT from NT$0
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value != null )
                RESULT = (NamedType) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;

              CUP$parser$result = new java_cup.runtime.Symbol(32/*named_type*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // NT$0 ::= 
            {
              Object RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
 RESULT = new NamedType(new Name(id)); 
              CUP$parser$result = new java_cup.runtime.Symbol(154/*NT$0*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // primitive_type ::= TIMER 
            {
              PrimitiveType RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Token t = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new PrimitiveType(t, PrimitiveType.TimerKind); 
              CUP$parser$result = new java_cup.runtime.Symbol(31/*primitive_type*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // primitive_type ::= BARRIER 
            {
              PrimitiveType RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Token t = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new PrimitiveType(t, PrimitiveType.BarrierKind); 
              CUP$parser$result = new java_cup.runtime.Symbol(31/*primitive_type*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // primitive_type ::= STRING 
            {
              PrimitiveType RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Token t = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new PrimitiveType(t, PrimitiveType.StringKind); 
              CUP$parser$result = new java_cup.runtime.Symbol(31/*primitive_type*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // primitive_type ::= DOUBLE 
            {
              PrimitiveType RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Token t = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new PrimitiveType(t, PrimitiveType.DoubleKind); 
              CUP$parser$result = new java_cup.runtime.Symbol(31/*primitive_type*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // primitive_type ::= FLOAT 
            {
              PrimitiveType RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Token t = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new PrimitiveType(t, PrimitiveType.FloatKind); 
              CUP$parser$result = new java_cup.runtime.Symbol(31/*primitive_type*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // primitive_type ::= LONG 
            {
              PrimitiveType RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Token t = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new PrimitiveType(t, PrimitiveType.LongKind); 
              CUP$parser$result = new java_cup.runtime.Symbol(31/*primitive_type*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // primitive_type ::= INT 
            {
              PrimitiveType RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Token t = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new PrimitiveType(t, PrimitiveType.IntKind); 
              CUP$parser$result = new java_cup.runtime.Symbol(31/*primitive_type*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // primitive_type ::= SHORT 
            {
              PrimitiveType RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Token t = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new PrimitiveType(t, PrimitiveType.ShortKind); 
              CUP$parser$result = new java_cup.runtime.Symbol(31/*primitive_type*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // primitive_type ::= BYTE 
            {
              PrimitiveType RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Token t = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new PrimitiveType(t, PrimitiveType.ByteKind); 
              CUP$parser$result = new java_cup.runtime.Symbol(31/*primitive_type*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // primitive_type ::= CHAR 
            {
              PrimitiveType RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Token t = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new PrimitiveType(t, PrimitiveType.CharKind); 
              CUP$parser$result = new java_cup.runtime.Symbol(31/*primitive_type*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // primitive_type ::= BOOLEAN 
            {
              PrimitiveType RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Token t = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new PrimitiveType(t, PrimitiveType.BooleanKind); 
              CUP$parser$result = new java_cup.runtime.Symbol(31/*primitive_type*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // type ::= named_type 
            {
              Type RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		NamedType t = (NamedType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = t; 
              CUP$parser$result = new java_cup.runtime.Symbol(30/*type*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // type ::= channel_type 
            {
              Type RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = t; 
              CUP$parser$result = new java_cup.runtime.Symbol(30/*type*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // type ::= array_type 
            {
              Type RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		ArrayType t = (ArrayType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = t; 
              CUP$parser$result = new java_cup.runtime.Symbol(30/*type*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // type ::= primitive_type 
            {
              Type RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		PrimitiveType t = (PrimitiveType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = t; 
              CUP$parser$result = new java_cup.runtime.Symbol(30/*type*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // record_member_declarator ::= variable_declarator_identifier 
            {
              Name RESULT = null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Name v = (Name)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = v; 
              CUP$parser$result = new java_cup.runtime.Symbol(29/*record_member_declarator*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // record_member_declarators ::= record_member_declarator 
            {
              Sequence RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Name e = (Name)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Sequence<Name>(e); 
              CUP$parser$result = new java_cup.runtime.Symbol(28/*record_member_declarators*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // record_member_declarators ::= record_member_declarators COMMA record_member_declarator 
            {
              Sequence RESULT = null;
		int lstleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Sequence lst = (Sequence)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Name e = (Name)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = lst.append(e); 
              CUP$parser$result = new java_cup.runtime.Symbol(28/*record_member_declarators*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // record_member_declaration ::= type record_member_declarators SEMICOLON 
            {
              Sequence RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Sequence r = (Sequence)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 Sequence s = new Sequence<RecordMember>();
	                                                   for (Name n : (Sequence<Name>)r)
                                                             s.append(new RecordMember(t, n));
                                                           RESULT = s;
                                                         
              CUP$parser$result = new java_cup.runtime.Symbol(27/*record_member_declaration*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // record_member_declarations ::= record_member_declaration 
            {
              Sequence RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Sequence e = (Sequence)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = e; 
              CUP$parser$result = new java_cup.runtime.Symbol(26/*record_member_declarations*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // record_member_declarations ::= record_member_declarations record_member_declaration 
            {
              Sequence RESULT = null;
		int lstleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Sequence lst = (Sequence)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Sequence e = (Sequence)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = lst.merge(e); 
              CUP$parser$result = new java_cup.runtime.Symbol(26/*record_member_declarations*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // record_body ::= LBRACE record_member_declarations RBRACE 
            {
              Sequence RESULT = null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Sequence r = (Sequence)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = r;
              CUP$parser$result = new java_cup.runtime.Symbol(25/*record_body*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // record_type_declaration ::= modifiers_opt RECORD IDENTIFIER extends_opt annotations_opt record_body 
            {
              RecordTypeDecl RESULT = null;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Sequence m = (Sequence)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Sequence e = (Sequence)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Annotations a = (Annotations)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Sequence r = (Sequence)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new RecordTypeDecl(m, new Name(id), e, a, r); 
              CUP$parser$result = new java_cup.runtime.Symbol(24/*record_type_declaration*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // record_body_opt ::= LBRACE RBRACE 
            {
              Sequence RESULT = null;
		 RESULT = new Sequence<RecordMember>(); 
              CUP$parser$result = new java_cup.runtime.Symbol(23/*record_body_opt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // record_body_opt ::= record_body 
            {
              Sequence RESULT = null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Sequence r = (Sequence)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = r; 
              CUP$parser$result = new java_cup.runtime.Symbol(23/*record_body_opt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // protocol_case ::= IDENTIFIER COLON record_body_opt 
            {
              ProtocolCase RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Sequence r = (Sequence)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new ProtocolCase(new Name(id), r); 
              CUP$parser$result = new java_cup.runtime.Symbol(22/*protocol_case*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // protocol_cases ::= protocol_case 
            {
              Sequence RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		ProtocolCase e = (ProtocolCase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Sequence<ProtocolCase>(e); 
              CUP$parser$result = new java_cup.runtime.Symbol(21/*protocol_cases*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // protocol_cases ::= protocol_cases protocol_case 
            {
              Sequence RESULT = null;
		int lstleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Sequence lst = (Sequence)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		ProtocolCase e = (ProtocolCase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = lst.append(e); 
              CUP$parser$result = new java_cup.runtime.Symbol(21/*protocol_cases*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // protocol_body ::= LBRACE protocol_cases RBRACE 
            {
              Sequence RESULT = null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Sequence p = (Sequence)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = p; 
              CUP$parser$result = new java_cup.runtime.Symbol(20/*protocol_body*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // extends_opt ::= 
            {
              Sequence RESULT = null;
		 RESULT = new Sequence<Name>(); 
              CUP$parser$result = new java_cup.runtime.Symbol(19/*extends_opt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // extends_opt ::= EXTENDS type_list 
            {
              Sequence RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Sequence t = (Sequence)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = t; 
              CUP$parser$result = new java_cup.runtime.Symbol(19/*extends_opt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // protocol_type_declaration ::= modifiers_opt PROTOCOL IDENTIFIER extends_opt annotations_opt SEMICOLON 
            {
              ProtocolTypeDecl RESULT = null;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Sequence m = (Sequence)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Sequence e = (Sequence)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Annotations a = (Annotations)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ProtocolTypeDecl(m, new Name(id), e, a, null); 
              CUP$parser$result = new java_cup.runtime.Symbol(18/*protocol_type_declaration*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // protocol_type_declaration ::= modifiers_opt PROTOCOL IDENTIFIER extends_opt annotations_opt protocol_body 
            {
              ProtocolTypeDecl RESULT = null;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Sequence m = (Sequence)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Sequence e = (Sequence)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Annotations a = (Annotations)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Sequence b = (Sequence)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new ProtocolTypeDecl(m, new Name(id), e, a, b); 
              CUP$parser$result = new java_cup.runtime.Symbol(18/*protocol_type_declaration*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // formal_parameter ::= CONST type variable_declarator_identifier 
            {
              ParamDecl RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Name v = (Name)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new ParamDecl(t, v, true); 
              CUP$parser$result = new java_cup.runtime.Symbol(12/*formal_parameter*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // formal_parameter ::= type variable_declarator_identifier 
            {
              ParamDecl RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Name v = (Name)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new ParamDecl(t, v, false); 
              CUP$parser$result = new java_cup.runtime.Symbol(12/*formal_parameter*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // formal_parameter_list ::= formal_parameter 
            {
              Sequence RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		ParamDecl e = (ParamDecl)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Sequence<ParamDecl>(e); 
              CUP$parser$result = new java_cup.runtime.Symbol(11/*formal_parameter_list*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // formal_parameter_list ::= formal_parameter_list COMMA formal_parameter 
            {
              Sequence RESULT = null;
		int lstleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Sequence lst = (Sequence)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		ParamDecl e = (ParamDecl)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = lst.append(e); 
              CUP$parser$result = new java_cup.runtime.Symbol(11/*formal_parameter_list*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // formal_parameter_list_opt ::= 
            {
              Sequence RESULT = null;
		 RESULT = new Sequence<ParamDecl>(); 
              CUP$parser$result = new java_cup.runtime.Symbol(10/*formal_parameter_list_opt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // formal_parameter_list_opt ::= formal_parameter_list 
            {
              Sequence RESULT = null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Sequence f = (Sequence)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = f; 
              CUP$parser$result = new java_cup.runtime.Symbol(10/*formal_parameter_list_opt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // package_access ::= package_access DOT IDENTIFIER 
            {
              Sequence RESULT = null;
		int paleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int paright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Sequence pa = (Sequence)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = pa.append(new Name(id)); 
              CUP$parser$result = new java_cup.runtime.Symbol(13/*package_access*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // package_access ::= IDENTIFIER 
            {
              Sequence RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Sequence<Name>(new Name(id)); 
              CUP$parser$result = new java_cup.runtime.Symbol(13/*package_access*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // type_name ::= package_access COLONCOLON IDENTIFIER 
            {
              Name RESULT = null;
		int paleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int paright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Sequence pa = (Sequence)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Name(id, pa); 
              CUP$parser$result = new java_cup.runtime.Symbol(14/*type_name*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // type_name ::= IDENTIFIER 
            {
              Name RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Name(id); 
              CUP$parser$result = new java_cup.runtime.Symbol(14/*type_name*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // type_list ::= type_name 
            {
              Sequence RESULT = null;
		int tnleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int tnright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Name tn = (Name)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Sequence<Name>(tn); 
              CUP$parser$result = new java_cup.runtime.Symbol(9/*type_list*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // type_list ::= type_list COMMA type_name 
            {
              Sequence RESULT = null;
		int tlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tlright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Sequence tl = (Sequence)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tnleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int tnright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Name tn = (Name)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = tl.append(tn); 
              CUP$parser$result = new java_cup.runtime.Symbol(9/*type_list*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // implements_opt ::= 
            {
              Sequence RESULT = null;
		 RESULT = new Sequence<Name>(); 
              CUP$parser$result = new java_cup.runtime.Symbol(8/*implements_opt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // implements_opt ::= IMPLEMENTS type_list 
            {
              Sequence RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Sequence t = (Sequence)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = t; 
              CUP$parser$result = new java_cup.runtime.Symbol(8/*implements_opt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // body_opt ::= SEMICOLON 
            {
              Block RESULT = null;
		 RESULT = null; 
              CUP$parser$result = new java_cup.runtime.Symbol(7/*body_opt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // body_opt ::= block 
            {
              Block RESULT = null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Block b = (Block)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = b; 
              CUP$parser$result = new java_cup.runtime.Symbol(7/*body_opt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // range ::= IDENTIFIER EQ DOUBLE_LITERAL 
            {
              Annotation RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Token i = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Token v = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Annotation(i.lexeme, v.lexeme); 
              CUP$parser$result = new java_cup.runtime.Symbol(17/*range*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // range ::= IDENTIFIER EQ FLOAT_LITERAL 
            {
              Annotation RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Token i = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Token v = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Annotation(i.lexeme, v.lexeme); 
              CUP$parser$result = new java_cup.runtime.Symbol(17/*range*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // range ::= IDENTIFIER EQ LONG_LITERAL 
            {
              Annotation RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Token i = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Token v = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Annotation(i.lexeme, v.lexeme); 
              CUP$parser$result = new java_cup.runtime.Symbol(17/*range*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // range ::= IDENTIFIER EQ INTEGER_LITERAL 
            {
              Annotation RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Token i = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Token v = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Annotation(i.lexeme, v.lexeme); 
              CUP$parser$result = new java_cup.runtime.Symbol(17/*range*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // range ::= IDENTIFIER EQ BOOLEAN_LITERAL 
            {
              Annotation RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Token i = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Token v = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Annotation(i.lexeme, v.lexeme); 
              CUP$parser$result = new java_cup.runtime.Symbol(17/*range*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // range ::= IDENTIFIER EQ IDENTIFIER 
            {
              Annotation RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Token i = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Token v = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Annotation(i.lexeme, v.lexeme); 
              CUP$parser$result = new java_cup.runtime.Symbol(17/*range*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // annotations ::= annotations COMMA range 
            {
              Sequence RESULT = null;
		int asleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int asright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Sequence as = (Sequence)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Annotation a = (Annotation)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = as.append(a); 
              CUP$parser$result = new java_cup.runtime.Symbol(16/*annotations*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // annotations ::= range 
            {
              Sequence RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Annotation a = (Annotation)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Sequence(a); 
              CUP$parser$result = new java_cup.runtime.Symbol(16/*annotations*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // annotations_opt ::= 
            {
              Annotations RESULT = null;
		 RESULT = new Annotations(); 
              CUP$parser$result = new java_cup.runtime.Symbol(15/*annotations_opt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // annotations_opt ::= LBRACK annotations RBRACK 
            {
              Annotations RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Sequence a = (Sequence)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Annotations(a); 
              CUP$parser$result = new java_cup.runtime.Symbol(15/*annotations_opt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // procedure_type_declaration ::= modifiers_opt PROC VOID IDENTIFIER LPAREN formal_parameter_list_opt RPAREN annotations_opt implements_opt body_opt 
            {
              ProcTypeDecl RESULT = null;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		Sequence m = (Sequence)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Token t = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Sequence f = (Sequence)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Annotations a = (Annotations)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Sequence i = (Sequence)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Block b = (Block)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new ProcTypeDecl(m, new PrimitiveType(t, PrimitiveType.VoidKind), new Name(id), f, i, a, b); 
              CUP$parser$result = new java_cup.runtime.Symbol(6/*procedure_type_declaration*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // procedure_type_declaration ::= modifiers_opt PROC type IDENTIFIER LPAREN formal_parameter_list_opt RPAREN annotations_opt implements_opt body_opt 
            {
              ProcTypeDecl RESULT = null;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		Sequence m = (Sequence)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Sequence f = (Sequence)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Annotations a = (Annotations)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Sequence i = (Sequence)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Block b = (Block)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new ProcTypeDecl(m, t, new Name(id), f, i, a, b); 
              CUP$parser$result = new java_cup.runtime.Symbol(6/*procedure_type_declaration*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // extern_type ::= extern_type DOT IDENTIFIER 
            {
              Name RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Name e = (Name)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Token i = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 e.setName(e.getname() + "." + i.lexeme); RESULT = e; 
              CUP$parser$result = new java_cup.runtime.Symbol(5/*extern_type*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // extern_type ::= IDENTIFIER 
            {
              Name RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Token i = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Name(i); 
              CUP$parser$result = new java_cup.runtime.Symbol(5/*extern_type*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // type_declaration ::= EXTERN extern_type IDENTIFIER 
            {
              Sequence RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Name e = (Name)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Token n = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 e.myPackage = Error.packageName; RESULT = new Sequence<Type>(new NamedType(new Name(n), new ExternType(e))); 
              CUP$parser$result = new java_cup.runtime.Symbol(4/*type_declaration*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // type_declaration ::= constant_declaration 
            {
              Sequence RESULT = null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Sequence c = (Sequence)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 c.myPackage = Error.packageName; RESULT = c; 
              CUP$parser$result = new java_cup.runtime.Symbol(4/*type_declaration*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // type_declaration ::= protocol_type_declaration 
            {
              Sequence RESULT = null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		ProtocolTypeDecl p = (ProtocolTypeDecl)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 p.myPackage = Error.packageName; RESULT = new Sequence<Type>(p); 
              CUP$parser$result = new java_cup.runtime.Symbol(4/*type_declaration*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // type_declaration ::= record_type_declaration 
            {
              Sequence RESULT = null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		RecordTypeDecl r = (RecordTypeDecl)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 r.myPackage = Error.packageName; RESULT = new Sequence<Type>(r); 
              CUP$parser$result = new java_cup.runtime.Symbol(4/*type_declaration*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // type_declaration ::= procedure_type_declaration 
            {
              Sequence RESULT = null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		ProcTypeDecl p = (ProcTypeDecl)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 p.myPackage = Error.packageName; RESULT = new Sequence<Type>(p); 
              CUP$parser$result = new java_cup.runtime.Symbol(4/*type_declaration*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // type_declarations ::= type_declaration 
            {
              Sequence RESULT = null;
		int tdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int tdright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Sequence td = (Sequence)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = td; 
              CUP$parser$result = new java_cup.runtime.Symbol(3/*type_declarations*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // type_declarations ::= type_declarations type_declaration 
            {
              Sequence RESULT = null;
		int tsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Sequence ts = (Sequence)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int tdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int tdright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Sequence td = (Sequence)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = ts.merge(td); 
              CUP$parser$result = new java_cup.runtime.Symbol(3/*type_declarations*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // type_declarations_opt ::= 
            {
              Sequence RESULT = null;
		 RESULT = new Sequence<Type>(); 
              CUP$parser$result = new java_cup.runtime.Symbol(2/*type_declarations_opt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // type_declarations_opt ::= type_declarations 
            {
              Sequence RESULT = null;
		int tsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int tsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Sequence ts = (Sequence)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = ts; 
              CUP$parser$result = new java_cup.runtime.Symbol(2/*type_declarations_opt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // source ::= compilation_unit 
            {
              Compilation RESULT = null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Compilation c = (Compilation)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = c; 
              CUP$parser$result = new java_cup.runtime.Symbol(1/*source*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= source EOF 
            {
              Object RESULT = null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Compilation start_val = (Compilation)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = new java_cup.runtime.Symbol(0/*$START*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

