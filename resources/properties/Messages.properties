# Created by Ben Cisneros
# 10/04/2018
#
# This file contains a list of error messages for the ProcessJ compiler

# -----------------------------------------------------------------------------
# RESOLVE IMPORTS (100-199)

RESOLVE_IMPORTS_100 = \
    No input file(s)

RESOLVE_IMPORTS_101 = \
    Cannot resolve '<arg1>' as local file or library

RESOLVE_IMPORTS_102 = \
    File not found: '<arg1>'

RESOLVE_IMPORTS_103 = \
    Package '<arg1>' does not exist

RESOLVE_IMPORTS_104 = \
    File '<arg1>' does not exists

RESOLVE_IMPORTS_105 = \
    File '<arg1>' not found in package '<arg2>'

# -----------------------------------------------------------------------------
# TOP LEVEL DECLS (200-299)

TOP_LEVEL_DECLS_200 = \
    Type with name '<arg1>' already declared in this scope

TOP_LEVEL_DECLS_201 = \
    Non-procedure type with name '<arg1>' already declared in this scope

TOP_LEVEL_DECLS_202 = \
    Type with name '<arg1>' already declared in this scope

TOP_LEVEL_DECLS_203 = \
    Type with name '<arg1>' already declared in this scope

TOP_LEVEL_DECLS_204 = \
    Something went wrong while trying to parser '<arg1>'

TOP_LEVEL_DECLS_205 = \
    Mobile procedure '<arg1>' must have a void return type

TOP_LEVEL_DECLS_206 = \
    Only one declaration of mobile procedure '<arg1>' may exists

TOP_LEVEL_DECLS_207 = \
    Type with name '<arg1>' already declared in this scope

# -----------------------------------------------------------------------------
# RESOLVE NAMED TYPES (300-399)

# TODO

# -----------------------------------------------------------------------------
# NAME CHECKER (400-499)

NAME_CHECKER_400 = \
    '<arg1>' already declared in this scope

NAME_CHECKER_401 = \
    Symbol '<arg1>' not found

NAME_CHECKER_402 = \
    '<arg1>' already declared in this scope

NAME_CHECKER_403 = \
    Procedure '<arg1>' not found

NAME_CHECKER_404 = \
    Cannot invoke non-procedure '<arg1>'

NAME_CHECKER_405 = \
    Symbol '<arg1>' not found

NAME_CHECKER_406 = \
    Symbol '<arg1>' not found

# -----------------------------------------------------------------------------
# ARRAY TYPE CONSTRUCTOR (500-599)

ARRAY_TYPE_CONSTRUCTOR_500 = \
    Array access index must be of integral type

ARRAY_TYPE_CONSTRUCTOR_501 = \
    Array literal with the keyword 'new'

ARRAY_TYPE_CONSTRUCTOR_502 = \
    Array dimension must be of integral type

ARRAY_TYPE_CONSTRUCTOR_503 = \
    Array initializer is not compatible with '<arg1>'

ARRAY_TYPE_CONSTRUCTOR_504 = \
    Cannot assign non-array to array type '<arg1>'

# -----------------------------------------------------------------------------
# TYPE RESOLUTION (600-699)

TYPE_RESOLUTION_600 = \
    Cannot assign value of type '<arg1>' to variable of type '<arg2>'

TYPE_RESOLUTION_601 = \
    Cannot assign value of type '<arg1>' to variable of type '<arg2>'

TYPE_RESOLUTION_602 = \
    Right hand side operand of operator '<arg1>' must be of numeric type

TYPE_RESOLUTION_603 = \
    Left hand side operand of operator '<arg1>' must be of numeric type

TYPE_RESOLUTION_604 = \
    Left hand side operand of operator '<arg1>' must be of integral type

TYPE_RESOLUTION_605 = \
    Right hand side operand of operator '<arg1>' must be of integral type

TYPE_RESOLUTION_606 = \
    Both right and left-hand side operands of operator '<arg1>' must be of boolean or integral type

TYPE_RESOLUTION_607 = \
    Operator '<arg1>' requires operands of numeric type

TYPE_RESOLUTION_608 = \
    Void type cannot be used here

TYPE_RESOLUTION_609 = \
    Operator '<arg1>' requires operands of the same type

TYPE_RESOLUTION_610 = \
    Operator '<arg1>' requires operands of boolean type

TYPE_RESOLUTION_611 = \
    Operator '<arg1>' requires both operands of either integral or boolean type

TYPE_RESOLUTION_612 = \
    Operator '<arg1>' requires of numeric type or string/boolean, string/numeric, or string/string type

TYPE_RESOLUTION_613 = \
    Operator '<arg1>' requires left operand of integral type

TYPE_RESOLUTION_614 = \
    Operator '<arg1>' requires right operand of integral type

TYPE_RESOLUTION_615 = \
    Unknown Operator '<arg1>'

TYPE_RESOLUTION_616 = \
    Channel end expression requires channel type

TYPE_RESOLUTION_617 = \
    Unknown sharing status for channel and expression

TYPE_RESOLUTION_618 = \
    Channel or Time type required in channel/time read

TYPE_RESOLUTION_619 = \
    Timer read cannot have extended rendez-vous block

TYPE_RESOLUTION_620 = \
    Cannot write to a non-channel end

TYPE_RESOLUTION_621 = \
    Non boolean Expression found as test in do-statement

TYPE_RESOLUTION_622 = \
    Barrier type expected, found '<arg1>'

TYPE_RESOLUTION_623 = \
    Non-boolean expression found in for-statement

TYPE_RESOLUTION_624 = \
    Non-boolean expression found as test in if-statement

TYPE_RESOLUTION_625 = \
    Undefined named type '<arg1>'

TYPE_RESOLUTION_626 = \
    Unknown name expression

TYPE_RESOLUTION_627 = \
    Cannot assign value '<arg1>' to type '<arg2>'

TYPE_RESOLUTION_628 = \
    Incorrect number of expression in protocol literal '<arg1>'

TYPE_RESOLUTION_629 = \
    Cannot assign value of type '<arg1>' to protocol field '<arg2>' of type '<arg3>'

TYPE_RESOLUTION_630 = \
    Left hand side of assignment not assignable

TYPE_RESOLUTION_631 = \
    No suitable procedure found

TYPE_RESOLUTION_632 = \
    Found more than once candidate - cannot chose between them!

TYPE_RESOLUTION_633 = \
    Procedure return type is void; return statement cannot return a value

TYPE_RESOLUTION_634 = \
    Procedure return type is '<arg1>' but procedure return type is void

TYPE_RESOLUTION_635 = \
    Incompatible type in return statement

TYPE_RESOLUTION_636 = \
    Non-mobile procedure cannot suspend

TYPE_RESOLUTION_637 = \
    Switch labels must be of type int or protocol tag

TYPE_RESOLUTION_638 = \
    Switch labels must be constants

TYPE_RESOLUTION_639 = \
    Duplicate default label

TYPE_RESOLUTION_640 = \
    Duplicate case label

TYPE_RESOLUTION_641 = \
    Non-barrier type in sync statement

TYPE_RESOLUTION_642 = \
    Protocol tag '<arg1>' not found in protocol '<arg2>'

TYPE_RESOLUTION_643 = \
    Request for member '<arg1>' in something not a record or protocol type

TYPE_RESOLUTION_644 = \
    Switch statement expects value of type int or protocol tag

TYPE_RESOLUTION_645 = \
    Nested switch statements on the same protocol type is not allowed

TYPE_RESOLUTION_646 = \
    Fall-through cases in protocol switch statement not allowed

TYPE_RESOLUTION_647 = \
    Default case not allowed in protocol switch

TYPE_RESOLUTION_648 = \
    Switch label must be of integer type

TYPE_RESOLUTION_649 = \
    Switch label must be a protocol case name

TYPE_RESOLUTION_650 = \
    Fall-through cases in protocol switch statement not allowed

TYPE_RESOLUTION_651 = \
    Non-boolean Expression found as test in ternary expression

TYPE_RESOLUTION_652 = \
    Both branches of a ternary expression must be of assignment compatible types

TYPE_RESOLUTION_653 = \
    Both branches of a ternary expression must be of assignment compatible types

TYPE_RESOLUTION_654 = \
    Unknown field reference '<arg1>' in protocol tag '<arg2>' in protocol '<arg3>'

# -----------------------------------------------------------------------------
# PARALLEL USAGE CHECKING (700-799)
    
PARALLEL_USAGE_CHECKING_700 = \
    Parallel read and write access to record member '<arg1>' illegal

PARALLEL_USAGE_CHECKING_701 = \
    Parallel read and write access to array member '<arg1>' illegal

PARALLEL_USAGE_CHECKING_702 = \
    Parallel usage checking is not fully implemented for array access

PARALLEL_USAGE_CHECKING_703 = \
    Parallel write access to variable '<arg1>' illegal

PARALLEL_USAGE_CHECKING_704 = \
    Parallel write access to record member '<arg1>' illegal

PARALLEL_USAGE_CHECKING_705 = \
    Parallel write access to array member '<arg1>' illegal

PARALLEL_USAGE_CHECKING_706 = \
    Parallel usage checking is not fully implemented for array access

PARALLEL_USAGE_CHECKING_707 = \
    Parallel read and write access to variable '<arg1>' illegal

PARALLEL_USAGE_CHECKING_708 = \
    Parallel write access to variable '<arg1>' illegal

PARALLEL_USAGE_CHECKING_709 = \
    Parallel write access to record member '<arg1>' illegal

PARALLEL_USAGE_CHECKING_710 = \
    Parallel write access to array member '<arg1>' illegal

PARALLEL_USAGE_CHECKING_711 = \
    Parallel usage checking is not fully implemented for array access

PARALLEL_USAGE_CHECKING_712 = \
    Parallel write access to variable '<arg1>' illegal

PARALLEL_USAGE_CHECKING_713 = \
    Parallel write access to record member '<arg1>' illegal

PARALLEL_USAGE_CHECKING_714 = \
    Parallel write access to array member '<arg1>' illegal

PARALLEL_USAGE_CHECKING_715 = \
    Parallel usage checking is not fully implemented for array access
