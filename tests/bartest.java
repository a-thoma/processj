import java.util.*;
import processj.runtime.*;
import std.*;


/**
 * File generated by the ProcessJ JVM Compiler.
 * Package name 'tests'.
 * Code generation for 'bartest.pj'.
 * Target class 'bartest'.
 * Java code version '1.8.0_66'.
 *
 * @author ProcessJ Group - University of Nevada, Las Vegas
 * @since 1.2
 *
 */
public class bartest {
    public static class _proc$f$I extends PJProcess {
        protected int _pd$i1;

        public _proc$f$I(int _pd$i1) {
            this._pd$i1 = _pd$i1;
        }

        @Override
        public synchronized void run() {
            io.println("f(" + _pd$i1 + ")");
            terminate();
        }
    }

    public static class _proc$b$I extends PJProcess {
        protected int _pd$i1;

        public _proc$b$I(int _pd$i1) {
            this._pd$i1 = _pd$i1;
        }

        @Override
        public synchronized void run() {
            io.println("b(" + _pd$i1 + ")");
            terminate();
        }
    }

    public static class _proc$main$arT extends PJProcess {
        protected String[] _pd$args1;

        protected int _ld$i1;

        public _proc$main$arT(String[] _pd$args1) {
            this._pd$args1 = _pd$args1;
        }

        @Override
        public synchronized void run() {
            switch (this.runLabel) {
                case 0: break;
                case 1: resume(1); break;
                default: break;
            }

            _ld$i1 = 0;
            final PJPar _ld$par1 = new PJPar(2, this);

            (new bartest._proc$f$I(_ld$i1) {
                @Override
                public void finalize() {
                    _ld$par1.decrement();
                }
            }).schedule();

            (new bartest._proc$b$I(_ld$i1 + 1) {
                @Override
                public void finalize() {
                    _ld$par1.decrement();
                }
            }).schedule();

            if (_ld$par1.shouldYield()) {
                this.runLabel = 1;
                yield();
                label(1);
            }

            _ld$i1 = 7;
            terminate();
        }
    }

    public static void main(String[] _pd$args1) {
    	Scheduler scheduler = new Scheduler();
        PJProcess.scheduler = scheduler;
        (new bartest._proc$main$arT(_pd$args1)).schedule();
        PJProcess.scheduler.start();
    }
}