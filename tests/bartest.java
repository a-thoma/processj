import java.util.*;
import processj.runtime.*;
import std.*;


/**
 * File generated by the ProcessJ JVM Compiler.
 * Package name 'tests'.
 * Code generation for 'bartest.pj'.
 * Target class 'bartest'.
 * Java code version '1.8.0_66'.
 *
 * @author ProcessJ Group - University of Nevada, Las Vegas
 * @since 1.2
 *
 */
public class bartest {
    // Temporary dirty fix for unreachable code due to infinite loop
    public static boolean isTrue() { return true; }

    public static class _proc$foo$R$crI$M extends PJProcess {
        protected PJBarrier _pd$b1;
        protected PJOne2OneChannel<Integer> _pd$r2;
        protected PJTimer _pd$t3;

        protected int _ld$d1;
        protected long _ld$time2;

        public _proc$foo$R$crI$M(PJBarrier _pd$b1, PJOne2OneChannel<Integer> _pd$r2, PJTimer _pd$t3) {
            this._pd$b1 = _pd$b1;
            this._pd$r2 = _pd$r2;
            this._pd$t3 = _pd$t3;
        }

        @Override
        public synchronized void run() {
            switch (this.runLabel) {
                case 0: break;
                case 1: resume(1); break;
                case 2: resume(2); break;
                default: break;
            }

            _pd$b1.sync(this);
            this.runLabel = 1;
            yield();
            label(1);
            final PJPar _ld$par1 = new PJPar(4, this);

            new PJProcess() {
                @Override
                public synchronized void run() {
                    switch (this.runLabel) {
                        case 0: break;
                        case 1: resume(1); break;
                        case 2: resume(2); break;
                        default: break;
                    }

                    if (!_pd$r2.isReadyToRead(this)) {
                        this.runLabel = 1;
                        yield();
                    }

                    label(1);
                    _ld$d1 = _pd$r2.read(this);
                    this.runLabel = 2;
                    yield();

                    label(2);
                    terminate();
                }

                @Override
                public void finalize() {
                    _ld$par1.decrement();
                } 
            }.schedule();

            new PJProcess() {
                @Override
                public synchronized void run() {
                    _ld$time2 = PJTimer.read();
                    terminate();
                }

                @Override
                public void finalize() {
                    _ld$par1.decrement();
                } 
            }.schedule();

            new PJProcess() {
                @Override
                public synchronized void run() {
                    switch (this.runLabel) {
                        case 0: break;
                        case 1: resume(1); break;
                        default: break;
                    }

                    _pd$t3 = new PJTimer(this, 1000);
                    try {
                        _pd$t3.start();
                        setNotReady();
                        this.runLabel = 1;
                        yield();
                    } catch (InterruptedException e) {
                        System.out.println("An Interrupted exception occurred for a timer!");
                    }
                    label(1);
                    terminate();
                }

                @Override
                public void finalize() {
                    _ld$par1.decrement();
                } 
            }.schedule();

            new PJProcess() {
                @Override
                public synchronized void run() {
                    io.println("read: " + _ld$d1 + ", time: " + _ld$time2);
                    terminate();
                }

                @Override
                public void finalize() {
                    _ld$par1.decrement();
                } 
            }.schedule();

            if (_ld$par1.shouldYield()) {
                this.runLabel = 2;
                yield();
                label(2);
            }

            terminate();
        }
    }

    public static class _proc$bar$R$cwI extends PJProcess {
        protected PJBarrier _pd$b1;
        protected PJOne2OneChannel<Integer> _pd$w2;

        public _proc$bar$R$cwI(PJBarrier _pd$b1, PJOne2OneChannel<Integer> _pd$w2) {
            this._pd$b1 = _pd$b1;
            this._pd$w2 = _pd$w2;
        }

        @Override
        public synchronized void run() {
            switch (this.runLabel) {
                case 0: break;
                case 1: resume(1); break;
                case 2: resume(2); break;
                default: break;
            }

            _pd$b1.sync(this);
            this.runLabel = 1;
            yield();
            label(1);
            _pd$w2.write(this, 5);
            this.runLabel = 2;
            yield();
            label(2);

            terminate();
        }
    }

    public static class _proc$f$I extends PJProcess {
        protected int _pd$i1;

        public _proc$f$I(int _pd$i1) {
            this._pd$i1 = _pd$i1;
        }

        @Override
        public synchronized void run() {
            io.println("f(" + _pd$i1 + ")");
            terminate();
        }
    }

    public static class _proc$b$I extends PJProcess {
        protected int _pd$i1;

        public _proc$b$I(int _pd$i1) {
            this._pd$i1 = _pd$i1;
        }

        @Override
        public synchronized void run() {
            io.println("b(" + _pd$i1 + ")");
            terminate();
        }
    }

    public static class _proc$main$arT extends PJProcess {
        protected String[] _pd$args1;

        protected PJTimer _ld$t1;
        protected PJBarrier _ld$b2;
        protected PJOne2OneChannel<Integer> _ld$c3;

        public _proc$main$arT(String[] _pd$args1) {
            this._pd$args1 = _pd$args1;
        }

        @Override
        public synchronized void run() {
            switch (this.runLabel) {
                case 0: break;
                case 1: resume(1); break;
                default: break;
            }

            _ld$b2 = new PJBarrier();
            _ld$c3 = new PJOne2OneChannel<Integer>();
            final PJPar _ld$par1 = new PJPar(2, this);
            _ld$b2.enroll(2);

            (new bartest._proc$bar$R$cwI(_ld$b2, _ld$c3) {
                @Override
                public void finalize() {
                    _ld$par1.decrement();
                    _ld$b2.resign();
                }
            }).schedule();

            (new bartest._proc$foo$R$crI$M(_ld$b2, _ld$c3, _ld$t1) {
                @Override
                public void finalize() {
                    _ld$par1.decrement();
                    _ld$b2.resign();
                }
            }).schedule();

            if (_ld$par1.shouldYield()) {
                this.runLabel = 1;
                yield();
                label(1);
            }

            terminate();
        }
    }

    public static void main(String[] _pd$args1) {
    	Scheduler scheduler = new Scheduler();
        PJProcess.scheduler = scheduler;
        (new bartest._proc$main$arT(_pd$args1)).schedule();
        PJProcess.scheduler.start();
    }
}