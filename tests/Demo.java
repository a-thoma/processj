import java.util.*;
import processj.runtime.*;

/**
 * File generated by the ProcessJ JVM Compiler.
 * Package name 'tests'.
 * Code generation for 'Demo'.
 * Target class 'Demo'.
 * Java code version '1.8.0_66'.
 *
 * @author ProcessJ Group
 * @since 1.2
 *
 */
public class Demo {
    static class T implements PJRecord {
        public int a;

        public T(int a) {
            this.a = a;
        }
    }

    static class K implements PJRecord {
        public int z;

        public K(int z) {
            this.z = z;
        }
    }

    static class X implements PJRecord {
        public int a;
        public int p;
        public String b;

        public X(int a, int p, String b) {
            this.a = a;
            this.p = p;
            this.b = b;
        }
    }

    static class P implements PJRecord {
        public int z;
        public int a;
        public int p;
        public String b;
        public int x;
        public int y;

        public P(int z, int a, int p, String b, int x, int y) {
            this.z = z;
            this.a = a;
            this.p = p;
            this.b = b;
            this.x = x;
            this.y = y;
        }
    }

    public static class _proc$writer$cwLK extends PJProcess {
        protected PJOne2OneChannel<K> _pd$out1;

        protected K _ld$k1;

        public _proc$writer$cwLK(PJOne2OneChannel<K> _pd$out1) {
            this._pd$out1 = _pd$out1;
        }

        @Override
        public synchronized void run() {
            switch (this.runLabel) {
                case 0: break;
                case 1: resume(1); break;
                default: break;
            }

            _ld$k1 = new K(3);
            _pd$out1.write(this, ((K) (_ld$k1)));
            this.runLabel = 1;
            yield();
            label(1);

            terminate();
        }
    }


    public static class _proc$reader$crLK extends PJProcess {
        protected PJOne2OneChannel<K> _pd$in1;

        protected K _ld$value1;

        public _proc$reader$crLK(PJOne2OneChannel<K> _pd$in1) {
            this._pd$in1 = _pd$in1;
        }

        @Override
        public synchronized void run() {
            switch (this.runLabel) {
                case 0: break;
                case 1: resume(1); break;
                case 2: resume(2); break;
                default: break;
            }

            if (!_pd$in1.isReadyToRead(this)) {
                this.runLabel = 1;
                yield();
            }

            label(1);
            _ld$value1 = _pd$in1.read(this);
            this.runLabel = 2;
            yield();

            label(2);

            terminate();
        }
    }


    public static class _proc$main$arT extends PJProcess {
        protected String[] _pd$args1;

        protected PJOne2OneChannel<K> _ld$c1;
        protected int _ld$a2;

        public _proc$main$arT(String[] _pd$args1) {
            this._pd$args1 = _pd$args1;
        }

        @Override
        public synchronized void run() {
            switch (this.runLabel) {
                case 0: break;
                case 1: resume(1); break;
                default: break;
            }

            _ld$c1 = new PJOne2OneChannel<K>();
            _ld$a2 = 2;
            final PJPar _ld$par1 = new PJPar(2, this);

            (new Demo._proc$writer$cwLK(_ld$c1) {
                @Override
                public void finalize() {
                    _ld$par1.decrement();
                }
            }).schedule();

            (new Demo._proc$reader$crLK(_ld$c1) {
                @Override
                public void finalize() {
                    _ld$par1.decrement();
                }
            }).schedule();

            setNotReady();
            this.runLabel = 1;
            yield();
            label(1);

            terminate();
        }
    }

    public static void main(String[] _pd$args1) {
    	Scheduler scheduler = new Scheduler();
        PJProcess.scheduler = scheduler;
        (new Demo._proc$main$arT(_pd$args1)).schedule();
        PJProcess.scheduler.start();
    }
}