import java.util.*;
import processj.runtime.*;

/**
 * File generated by the ProcessJ JVM Compiler.
 * Package name 'tests'.
 * Code generation for 'barrierEx.pj'.
 * Target class 'barrierEx'.
 * Java code version '1.8.0_66'.
 *
 * @author ProcessJ Group - University of Nevada, Las Vegas
 * @since 1.2
 *
 */
public class barrierEx {
    // Temporary dirty fix for unreachable code due to infinite loop
    public static boolean isTrue() { return true; }

    public static class _proc$foo$R extends PJProcess {
        protected PJBarrier _pd$b1;

        protected int _ld$a1;

        public _proc$foo$R(PJBarrier _pd$b1) {
            this._pd$b1 = _pd$b1;
        }

        @Override
        public synchronized void run() {
            switch (this.runLabel) {
                case 0: break;
                case 1: resume(1); break;
                default: break;
            }

            _ld$a1 = 5;
            _pd$b1.sync(this);
            this.runLabel = 1;
            yield();
            label(1);
            terminate();
        }
    }

    public static class _proc$bar$R extends PJProcess {
        protected PJBarrier _pd$b1;

        public _proc$bar$R(PJBarrier _pd$b1) {
            this._pd$b1 = _pd$b1;
        }

        @Override
        public synchronized void run() {
            switch (this.runLabel) {
                case 0: break;
                case 1: resume(1); break;
                default: break;
            }

            _pd$b1.sync(this);
            this.runLabel = 1;
            yield();
            label(1);
            terminate();
        }
    }

    public static class _proc$main$arT extends PJProcess {
        protected String[] _pd$args1;

        protected PJBarrier _ld$b1;

        public _proc$main$arT(String[] _pd$args1) {
            this._pd$args1 = _pd$args1;
        }

        @Override
        public synchronized void run() {
            switch (this.runLabel) {
                case 0: break;
                case 1: resume(1); break;
                default: break;
            }

            _ld$b1 = new PJBarrier();
            final PJPar _ld$par1 = new PJPar(2, this);
            _ld$b1.enroll(2);

            (new barrierEx._proc$foo$R(_ld$b1) {
                @Override
                public void finalize() {
                    _ld$par1.decrement();
                    _ld$b1.resign();
                }
            }).schedule();

            (new barrierEx._proc$bar$R(_ld$b1) {
                @Override
                public void finalize() {
                    _ld$par1.decrement();
                    _ld$b1.resign();
                }
            }).schedule();

            if (_ld$par1.shouldYield()) {
                this.runLabel = 1;
                yield();
                label(1);
            }

            terminate();
        }
    }

    public static void main(String[] _pd$args1) {
    	Scheduler scheduler = new Scheduler();
        PJProcess.scheduler = scheduler;
        (new barrierEx._proc$main$arT(_pd$args1)).schedule();
        PJProcess.scheduler.start();
    }
}