import java.util.*;
import processj.runtime.*;
import std.*;


/**
 * File generated by the ProcessJ JVM Compiler.
 * Package name 'tests'.
 * Code generation for 'simple.pj'.
 * Target class 'simple'.
 * Java code version '1.8.0_66'.
 *
 * @author ProcessJ Group - University of Nevada, Las Vegas
 * @since 1.2
 *
 */
public class simple {
    public static class _proc$foo$crI extends PJProcess {
        protected PJOne2OneChannel<Integer> _pd$r1;

        protected int _ld$d1;

        public _proc$foo$crI(PJOne2OneChannel<Integer> _pd$r1) {
            this._pd$r1 = _pd$r1;
        }

        @Override
        public synchronized void run() {
            switch (this.runLabel) {
                case 0: break;
                case 1: resume(1); break;
                case 2: resume(2); break;
                default: break;
            }

            if (!_pd$r1.isReadyToRead(this)) {
                this.runLabel = 1;
                yield();
            }

            label(1);
            _ld$d1 = _pd$r1.read(this);
            this.runLabel = 2;
            yield();

            label(2);

            io.println(" > " + _ld$d1);
            terminate();
        }
    }

    public static class _proc$bar$cwI extends PJProcess {
        protected PJOne2OneChannel<Integer> _pd$w1;

        public _proc$bar$cwI(PJOne2OneChannel<Integer> _pd$w1) {
            this._pd$w1 = _pd$w1;
        }

        @Override
        public synchronized void run() {
            switch (this.runLabel) {
                case 0: break;
                case 1: resume(1); break;
                default: break;
            }

            _pd$w1.write(this, 3);
            this.runLabel = 1;
            yield();
            label(1);

            terminate();
        }
    }

    public static class _proc$main$arT extends PJProcess {
        protected String[] _pd$args1;

        protected PJOne2OneChannel<Integer> _ld$c1;
        protected PJBarrier _ld$b2;
        protected PJBarrier _ld$bb3;
        protected PJBarrier _ld$bbb4;

        public _proc$main$arT(String[] _pd$args1) {
            this._pd$args1 = _pd$args1;
        }

        @Override
        public synchronized void run() {
            switch (this.runLabel) {
                case 0: break;
                case 1: resume(1); break;
                default: break;
            }

            _ld$c1 = new PJOne2OneChannel<Integer>();
            _ld$b2 = new PJBarrier();
            _ld$bb3 = new PJBarrier();
            _ld$bbb4 = new PJBarrier();
            final PJPar _ld$par1 = new PJPar(2, this);
            _ld$b2.enroll(2);
            _ld$bb3.enroll(2);
            _ld$bbb4.enroll(2);

            (new simple._proc$foo$crI(_ld$c1) {
                @Override
                public void finalize() {
                    _ld$par1.decrement();
                    _ld$b2.resign();
                    _ld$bb3.resign();
                    _ld$bbb4.resign();
                }
            }).schedule();

            (new simple._proc$bar$cwI(_ld$c1) {
                @Override
                public void finalize() {
                    _ld$par1.decrement();
                    _ld$b2.resign();
                    _ld$bb3.resign();
                    _ld$bbb4.resign();
                }
            }).schedule();

            setNotReady();
            this.runLabel = 1;
            yield();
            label(1);

            terminate();
        }
    }

    public static void main(String[] _pd$args1) {
    	Scheduler scheduler = new Scheduler();
        PJProcess.scheduler = scheduler;
        (new simple._proc$main$arT(_pd$args1)).schedule();
        PJProcess.scheduler.start();
    }
}