import java.util.*;
import processj.runtime.*;
import std.*;


/**
 * File generated by the ProcessJ JVM Compiler.
 * Package name 'tests'.
 * Code generation for 'NetworkProc.pj'.
 * Target class 'NetworkProc'.
 * Java code version '1.8.0_66'.
 *
 * @author ProcessJ Group - University of Nevada, Las Vegas
 * @since 1.2
 *
 */
public class NetworkProc {
    // Temporary dirty fix for unreachable code due to infinite loop
    public static boolean isTrue() { return true; }

    public static class _proc$integrate$crI$cwI$crZ$cwZ extends PJProcess {
        protected PJChannel<Integer> _pd$in1;
        protected PJChannel<Integer> _pd$out2;
        protected PJChannel<Boolean> _pd$killMe3;
        protected PJChannel<Boolean> _pd$killConsumer4;

        protected int _ld$total1;
        protected boolean _ld$ok2;
        protected boolean _ld$y3;
        protected int _ld$x4;
        protected int _ld$index5;
        protected PJAlt _ld$alt6;

        public _proc$integrate$crI$cwI$crZ$cwZ(PJChannel<Integer> _pd$in1, PJChannel<Integer> _pd$out2, PJChannel<Boolean> _pd$killMe3, PJChannel<Boolean> _pd$killConsumer4) {
            this._pd$in1 = _pd$in1;
            this._pd$out2 = _pd$out2;
            this._pd$killMe3 = _pd$killMe3;
            this._pd$killConsumer4 = _pd$killConsumer4;
        }

        @Override
        public synchronized void run() {
            switch (this.runLabel) {
                case 0: break;
                case 1: resume(1); break;
                case 2: resume(2); break;
                case 3: resume(3); break;
                case 4: resume(4); break;
                case 5: resume(5); break;
                case 6: resume(6); break;
                case 7: resume(7); break;
                default: break;
            }

            _ld$total1 = 0;
            _ld$ok2 = true;
            while (_ld$ok2) {
                _ld$alt6 = new PJAlt(2, this);
                boolean[] booleanGuards = { true, true };
                Object[] objectGuards = { _pd$killMe3, _pd$in1 };
                boolean ready = _ld$alt6.setGuards(booleanGuards, objectGuards);

                if (!ready) {
                    System.out.println("RuntimeError: One of the boolean pre-guards must be true!");
                    System.exit(1);
                }

                this.setNotReady();
                _ld$index5 = _ld$alt6.enable();
                this.runLabel = 7;
                yield();

                label(7);
                int selected = _ld$alt6.disable(_ld$index5);

                switch(selected) {
                    case 0:
                        if (!_pd$killMe3.isReadyToRead(this)) {
                            this.runLabel = 2;
                            yield();
                        }

                        label(2);
                        _ld$y3 = _pd$killMe3.read(this);
                        this.runLabel = 3;
                        yield();

                        label(3);
                        _pd$killConsumer4.write(this, true);
                        this.runLabel = 1;
                        yield();
                        label(1);

                        _ld$ok2 = false;
                        break;
                    case 1:
                        if (!_pd$in1.isReadyToRead(this)) {
                            this.runLabel = 5;
                            yield();
                        }

                        label(5);
                        _ld$x4 = _pd$in1.read(this);
                        this.runLabel = 6;
                        yield();

                        label(6);
                        _ld$total1 = _ld$total1 + _ld$x4;
                        _pd$out2.write(this, _ld$total1);
                        this.runLabel = 4;
                        yield();
                        label(4);

                        break;
                    default:
                        break;
                }
            }
            terminate();
        }
    }

    public static class _proc$produce$cwI$crZ$cwZ extends PJProcess {
        protected PJChannel<Integer> _pd$out1;
        protected PJChannel<Boolean> _pd$killMe2;
        protected PJChannel<Boolean> _pd$killIntegrate3;

        protected int _ld$i1;
        protected boolean _ld$ok2;
        protected boolean _ld$b3;
        protected int _ld$index4;
        protected PJAlt _ld$alt5;

        public _proc$produce$cwI$crZ$cwZ(PJChannel<Integer> _pd$out1, PJChannel<Boolean> _pd$killMe2, PJChannel<Boolean> _pd$killIntegrate3) {
            this._pd$out1 = _pd$out1;
            this._pd$killMe2 = _pd$killMe2;
            this._pd$killIntegrate3 = _pd$killIntegrate3;
        }

        @Override
        public synchronized void run() {
            switch (this.runLabel) {
                case 0: break;
                case 1: resume(1); break;
                case 2: resume(2); break;
                case 3: resume(3); break;
                case 4: resume(4); break;
                case 5: resume(5); break;
                default: break;
            }

            _ld$i1 = 0;
            _ld$ok2 = true;
            while (_ld$ok2) {
                _ld$alt5 = new PJAlt(2, this);
                boolean[] booleanGuards = { true, true };
                Object[] objectGuards = { _pd$killMe2, PJAlt.SKIP };
                boolean ready = _ld$alt5.setGuards(booleanGuards, objectGuards);

                if (!ready) {
                    System.out.println("RuntimeError: One of the boolean pre-guards must be true!");
                    System.exit(1);
                }

                this.setNotReady();
                _ld$index4 = _ld$alt5.enable();
                this.runLabel = 5;
                yield();

                label(5);
                int selected = _ld$alt5.disable(_ld$index4);

                switch(selected) {
                    case 0:
                        if (!_pd$killMe2.isReadyToRead(this)) {
                            this.runLabel = 2;
                            yield();
                        }

                        label(2);
                        _ld$b3 = _pd$killMe2.read(this);
                        this.runLabel = 3;
                        yield();

                        label(3);
                        _ld$ok2 = false;
                        _pd$killIntegrate3.write(this, true);
                        this.runLabel = 1;
                        yield();
                        label(1);

                        break;
                    case 1:
                        _pd$out1.write(this, _ld$i1);
                        this.runLabel = 4;
                        yield();
                        label(4);

                        _ld$i1 = _ld$i1 + 1;
                        break;
                    default:
                        break;
                }
            }
            terminate();
        }
    }

    public static class _proc$consume$crI$crZ extends PJProcess {
        protected PJChannel<Integer> _pd$in1;
        protected PJChannel<Boolean> _pd$killMe2;

        protected boolean _ld$ok1;
        protected int _ld$x2;
        protected boolean _ld$b3;
        protected int _ld$index4;
        protected PJAlt _ld$alt5;

        public _proc$consume$crI$crZ(PJChannel<Integer> _pd$in1, PJChannel<Boolean> _pd$killMe2) {
            this._pd$in1 = _pd$in1;
            this._pd$killMe2 = _pd$killMe2;
        }

        @Override
        public synchronized void run() {
            switch (this.runLabel) {
                case 0: break;
                case 1: resume(1); break;
                case 2: resume(2); break;
                case 3: resume(3); break;
                case 4: resume(4); break;
                case 5: resume(5); break;
                default: break;
            }

            _ld$ok1 = true;
            while (_ld$ok1) {
                _ld$alt5 = new PJAlt(2, this);
                boolean[] booleanGuards = { true, true };
                Object[] objectGuards = { _pd$in1, _pd$killMe2 };
                boolean ready = _ld$alt5.setGuards(booleanGuards, objectGuards);

                if (!ready) {
                    System.out.println("RuntimeError: One of the boolean pre-guards must be true!");
                    System.exit(1);
                }

                this.setNotReady();
                _ld$index4 = _ld$alt5.enable();
                this.runLabel = 5;
                yield();

                label(5);
                int selected = _ld$alt5.disable(_ld$index4);

                switch(selected) {
                    case 0:
                        if (!_pd$in1.isReadyToRead(this)) {
                            this.runLabel = 1;
                            yield();
                        }

                        label(1);
                        _ld$x2 = _pd$in1.read(this);
                        this.runLabel = 2;
                        yield();

                        label(2);
                        io.println(_ld$x2);
                        break;
                    case 1:
                        if (!_pd$killMe2.isReadyToRead(this)) {
                            this.runLabel = 3;
                            yield();
                        }

                        label(3);
                        _ld$b3 = _pd$killMe2.read(this);
                        this.runLabel = 4;
                        yield();

                        label(4);
                        _ld$ok1 = false;
                        break;
                    default:
                        break;
                }
            }
            terminate();
        }
    }

    public static class _proc$killer$cwZ extends PJProcess {
        protected PJChannel<Boolean> _pd$killProduce1;

        protected PJTimer _ld$t1;

        public _proc$killer$cwZ(PJChannel<Boolean> _pd$killProduce1) {
            this._pd$killProduce1 = _pd$killProduce1;
        }

        @Override
        public synchronized void run() {
            switch (this.runLabel) {
                case 0: break;
                case 1: resume(1); break;
                case 2: resume(2); break;
                default: break;
            }

            _ld$t1 = new PJTimer(this, 100);
            try {
                _ld$t1.start();
                setNotReady();
                this.runLabel = 1;
                yield();
            } catch (InterruptedException e) {
                System.out.println("An Interrupted exception occurred for a timer!");
            }
            label(1);
            _pd$killProduce1.write(this, true);
            this.runLabel = 2;
            yield();
            label(2);

            terminate();
        }
    }

    public static class _proc$main$arT extends PJProcess {
        protected String[] _pd$args1;

        protected PJChannel<Integer> _ld$in1;
        protected PJChannel<Integer> _ld$out2;
        protected PJChannel<Boolean> _ld$killProduce3;
        protected PJChannel<Boolean> _ld$killIntegrate4;
        protected PJChannel<Boolean> _ld$killConsume5;

        public _proc$main$arT(String[] _pd$args1) {
            this._pd$args1 = _pd$args1;
        }

        @Override
        public synchronized void run() {
            switch (this.runLabel) {
                case 0: break;
                case 1: resume(1); break;
                default: break;
            }

            _ld$in1 = new PJOne2OneChannel<Integer>();
            _ld$out2 = new PJOne2OneChannel<Integer>();
            _ld$killProduce3 = new PJOne2OneChannel<Boolean>();
            _ld$killIntegrate4 = new PJOne2OneChannel<Boolean>();
            _ld$killConsume5 = new PJOne2OneChannel<Boolean>();
            final PJPar _ld$par1 = new PJPar(4, this);

            (new NetworkProc._proc$produce$cwI$crZ$cwZ(_ld$in1, _ld$killProduce3, _ld$killIntegrate4) {
                @Override
                public void finalize() {
                    _ld$par1.decrement();
                }
            }).schedule();

            (new NetworkProc._proc$integrate$crI$cwI$crZ$cwZ(_ld$in1, _ld$out2, _ld$killIntegrate4, _ld$killConsume5) {
                @Override
                public void finalize() {
                    _ld$par1.decrement();
                }
            }).schedule();

            (new NetworkProc._proc$killer$cwZ(_ld$killProduce3) {
                @Override
                public void finalize() {
                    _ld$par1.decrement();
                }
            }).schedule();

            (new NetworkProc._proc$consume$crI$crZ(_ld$out2, _ld$killConsume5) {
                @Override
                public void finalize() {
                    _ld$par1.decrement();
                }
            }).schedule();

            if (_ld$par1.shouldYield()) {
                this.runLabel = 1;
                yield();
                label(1);
            }

            terminate();
        }
    }

    public static void main(String[] _pd$args1) {
    	Scheduler scheduler = new Scheduler();
        PJProcess.scheduler = scheduler;
        (new NetworkProc._proc$main$arT(_pd$args1)).schedule();
        PJProcess.scheduler.start();
    }
}