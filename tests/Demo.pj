import std.io;

//// BOOK
// Concurrent programming in Java: design principles and patterns (D.lea)
// Concurrent and real-time programming in Java (AJ Weelings)
// Concurrent programming: principles and practice (GR Andrews)

public record T {
    int a;
}

public record K {
    int z;
    T t;
}

protected record X extends T {
    int p;
    string b;
}

protected record P extends K, X, T {
    int x;
    int y;
}

private record L {
    K k;
    string str;
}

public protocol PP {
  request : { int number; double amount; }
  reply : { boolean status; }
}

public protocol P1 extends PP {
  deny : { int code; }
}

public protocol XX {
  accept : { int code; }
}

public proc void writer(chan<L>.write out) {
  K k = new K { z = 3, t = new T { a = 45 } };
  X x = new X { b = "Ben", p = 300, a = 20 };
  L l = new L { k = k, str = "Benjamin" };

  out.write(l);
}

public proc void reader(chan<L>.read in) {
  L value;
  value = in.read();
  switch (value.k.t.a) {
    case 4: println("case 4"); break;
    case 5: println("case 5"); break;
    case 6: println("case 6"); break;
    default: println("some case!"); break;
  }
  println("The value is " + value.k.t.a);
}

public proc void main(string args[]) {
  chan<L> c;
  int a = 2;
  XX xx = new XX { accept : 35 };
  par {
    writer(c.write);
    reader(c.read);
  }
}