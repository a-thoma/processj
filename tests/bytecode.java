import java.util.*;
import processj.runtime.*;

/**
 * File generated by the ProcessJ JVM Compiler.
 * Package name 'tests'.
 * Code generation for 'bytecode.pj'.
 * Target class 'bytecode'.
 * Java code version '1.8.0_66'.
 *
 * @author ProcessJ Group - University of Nevada, Las Vegas
 * @since 1.2
 *
 */
public class bytecode {
    // Temporary dirty fix for unreachable code due to infinite loop
    public static boolean isTrue() { return true; }

    public static class _proc$prefix$I$crI$cwI extends PJProcess {
        protected int _pd$initVal1;
        protected PJChannel<Integer> _pd$in2;
        protected PJChannel<Integer> _pd$out3;

        protected int _ld$x1;

        public _proc$prefix$I$crI$cwI(int _pd$initVal1, PJChannel<Integer> _pd$in2, PJChannel<Integer> _pd$out3) {
            this._pd$initVal1 = _pd$initVal1;
            this._pd$in2 = _pd$in2;
            this._pd$out3 = _pd$out3;
        }

        @Override
        public synchronized void run() {
            switch (this.runLabel) {
                case 0: break;
                case 1: resume(1); break;
                case 2: resume(2); break;
                case 3: resume(3); break;
                case 4: resume(4); break;
                default: break;
            }

            _pd$out3.write(this, _pd$initVal1);
            this.runLabel = 1;
            yield();
            label(1);

            while (isTrue()) {
                if (!_pd$in2.isReadyToRead(this)) {
                    this.runLabel = 2;
                    yield();
                }

                label(2);
                _ld$x1 = _pd$in2.read(this);
                this.runLabel = 3;
                yield();

                label(3);
                _pd$out3.write(this, _ld$x1);
                this.runLabel = 4;
                yield();
                label(4);

            }
            terminate();
        }
    }
}