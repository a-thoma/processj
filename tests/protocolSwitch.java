import java.util.*;
import processj.runtime.*;
import std.*;


/**
 * File generated by the ProcessJ JVM Compiler.
 * Package name 'tests'.
 * Code generation for 'protocolSwitch.pj'.
 * Target class 'protocolSwitch'.
 * Java code version '1.8.0_66'.
 *
 * @author ProcessJ Group - University of Nevada, Las Vegas
 * @since 1.2
 *
 */
public class protocolSwitch {
    // Temporary dirty fix for unreachable code due to infinite loop
    public static boolean isTrue() { return true; }

    public static class P {
        protected static class request extends PJProtocolCase {
            public int number;
            public double amount;

            public request(int number, double amount) {
                this.number = number;
                this.amount = amount;
                this.tag = "request";
            }
        }

        protected static class reply extends PJProtocolCase {
            public boolean status;

            public reply(boolean status) {
                this.status = status;
                this.tag = "reply";
            }
        }
    }

    public static class X {
        protected static class ack extends PJProtocolCase {
            public boolean yes;

            public ack(boolean yes) {
                this.yes = yes;
                this.tag = "ack";
            }
        }
    }

    public static class _proc$main$arT extends PJProcess {
        protected String[] _pd$args1;

        protected PJProtocolCase _ld$p1;

        public _proc$main$arT(String[] _pd$args1) {
            this._pd$args1 = _pd$args1;
        }

        @Override
        public synchronized void run() {
            _ld$p1 = new P.reply(true);
            switch(_ld$p1.tag) {
            case "request":
                io.println("number: " + (((P.request) _ld$p1).number) + ", amount: " + (((P.request) _ld$p1).amount));
                break;
            case "reply":
                io.println("status = " + (((P.reply) _ld$p1).status));
                break;
            }
            terminate();
        }
    }

    public static void main(String[] _pd$args1) {
    	Scheduler scheduler = new Scheduler();
        PJProcess.scheduler = scheduler;
        (new protocolSwitch._proc$main$arT(_pd$args1)).schedule();
        PJProcess.scheduler.start();
    }
}