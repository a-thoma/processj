import java.util.*;
import processj.runtime.*;
import std.*;


/**
 * File generated by the ProcessJ JVM Compiler.
 * Package name 'tests'.
 * Code generation for 'silly.pj'.
 * Target class 'silly'.
 * Java code version '1.8.0_66'.
 *
 * @author ProcessJ Group - University of Nevada, Las Vegas
 * @since 1.2
 *
 */
public class silly {
    // Temporary dirty fix for unreachable code due to infinite loop
    public static boolean isTrue() { return true; }

    public static class _proc$foo$I$crI$crI extends PJProcess {
        protected int _pd$i1;
        protected PJChannel<Integer> _pd$a2;
        protected PJChannel<Integer> _pd$b3;

        protected int _ld$j1;

        public _proc$foo$I$crI$crI(int _pd$i1, PJChannel<Integer> _pd$a2, PJChannel<Integer> _pd$b3) {
            this._pd$i1 = _pd$i1;
            this._pd$a2 = _pd$a2;
            this._pd$b3 = _pd$b3;
        }

        @Override
        public synchronized void run() {
            switch (this.runLabel) {
                case 0: break;
                case 1: resume(1); break;
                case 2: resume(2); break;
                case 3: resume(3); break;
                case 4: resume(4); break;
                default: break;
            }

            for (_ld$j1 = 0;
                 (if (!_pd$a2.isReadyToRead(this)) {
                     this.runLabel = 1
                     yield()
                 }

                 label(1)
                 _pd$a2.read(this)
                 this.runLabel = 2
                 yield()

                 label(2) + if (!_pd$b3.isReadyToRead(this)) {
                     this.runLabel = 3
                     yield()
                 }

                 label(3)
                 _pd$b3.read(this)
                 this.runLabel = 4
                 yield()

                 label(4)) > _ld$j1;
                 ++_ld$j1) {

                 io.println("Blah!");
            }
            terminate();
        }
    }
}