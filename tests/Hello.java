import java.util.*;
import processj.runtime.*;
import std.*;


/**
 * File generated by the ProcessJ JVM Compiler.
 * Package name 'tests'.
 * Code generation for 'Hello.pj'.
 * Target class 'Hello'.
 * Java code version '1.8.0_66'.
 *
 * @author ProcessJ Group - University of Nevada, Las Vegas
 * @since 1.2
 *
 */
public class Hello {
    // Temporary dirty fix for unreachable code due to infinite loop
    public static boolean isTrue() { return true; }

    public static void _method$foo() {
    }

    public static void _method$bar() {
    }

    public static class _proc$main$arT extends PJProcess {
        protected String[] _pd$args1;

        public _proc$main$arT(String[] _pd$args1) {
            this._pd$args1 = _pd$args1;
        }

        @Override
        public synchronized void run() {
            switch (this.runLabel) {
                case 0: break;
                case 1: resume(1); break;
                default: break;
            }

            final PJPar _ld$par1 = new PJPar(3, this);

            new PJProcess() {
                @Override
                public synchronized void run() {
                    io.println("Print from Hello");
                    terminate();
                }

                @Override
                public void finalize() {
                    _ld$par1.decrement();
                } 
            }.schedule();

            new PJProcess() {
                @Override
                public synchronized void run() {
                    Hello._method$foo();
                    terminate();
                }

                @Override
                public void finalize() {
                    _ld$par1.decrement();
                } 
            }.schedule();

            new PJProcess() {
                @Override
                public synchronized void run() {
                    Hello._method$bar();
                    terminate();
                }

                @Override
                public void finalize() {
                    _ld$par1.decrement();
                } 
            }.schedule();

            if (_ld$par1.shouldYield()) {
                this.runLabel = 1;
                yield();
                label(1);
            }

            terminate();
        }
    }

    public static void main(String[] _pd$args1) {
    	Scheduler scheduler = new Scheduler();
        PJProcess.scheduler = scheduler;
        (new Hello._proc$main$arT(_pd$args1)).schedule();
        PJProcess.scheduler.start();
    }
}