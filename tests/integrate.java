import java.util.*;
import processj.runtime.*;
import std.*;


/**
 * File generated by the ProcessJ JVM Compiler.
 * Package name 'tests'.
 * Code generation for 'integrate.pj'.
 * Target class 'integrate'.
 * Java code version '1.8.0_66'.
 *
 * @author ProcessJ Group - University of Nevada, Las Vegas
 * @since 1.2
 *
 */
public class integrate {
    // Temporary dirty fix for unreachable code due to infinite loop
    public static boolean isTrue() { return true; }

    public static class _proc$integrate$crI$cwI extends PJProcess {
        protected PJChannel<Integer> _pd$in1;
        protected PJChannel<Integer> _pd$out2;

        protected int _ld$total1;
        protected int _ld$x2;

        public _proc$integrate$crI$cwI(PJChannel<Integer> _pd$in1, PJChannel<Integer> _pd$out2) {
            this._pd$in1 = _pd$in1;
            this._pd$out2 = _pd$out2;
        }

        @Override
        public synchronized void run() {
            switch (this.runLabel) {
                case 0: break;
                case 1: resume(1); break;
                case 2: resume(2); break;
                case 3: resume(3); break;
                default: break;
            }

            _ld$total1 = 0;
            while (isTrue()) {
                if (!_pd$in1.isReadyToRead(this)) {
                    this.runLabel = 1;
                    yield();
                }

                label(1);
                _ld$x2 = _pd$in1.read(this);
                this.runLabel = 2;
                yield();

                label(2);
                _ld$total1 = _ld$total1 + _ld$x2;
                _pd$out2.write(this, _ld$total1);
                this.runLabel = 3;
                yield();
                label(3);

            }
            terminate();
        }
    }

    public static class _proc$delta$crI$cwI$cwI extends PJProcess {
        protected PJChannel<Integer> _pd$in1;
        protected PJChannel<Integer> _pd$out12;
        protected PJChannel<Integer> _pd$out23;

        protected int _ld$x1;

        public _proc$delta$crI$cwI$cwI(PJChannel<Integer> _pd$in1, PJChannel<Integer> _pd$out12, PJChannel<Integer> _pd$out23) {
            this._pd$in1 = _pd$in1;
            this._pd$out12 = _pd$out12;
            this._pd$out23 = _pd$out23;
        }

        @Override
        public synchronized void run() {
            switch (this.runLabel) {
                case 0: break;
                case 1: resume(1); break;
                case 2: resume(2); break;
                case 3: resume(3); break;
                default: break;
            }

            while (isTrue()) {
                if (!_pd$in1.isReadyToRead(this)) {
                    this.runLabel = 1;
                    yield();
                }

                label(1);
                _ld$x1 = _pd$in1.read(this);
                this.runLabel = 2;
                yield();

                label(2);
                final PJPar _ld$par1 = new PJPar(2, this);

                new PJProcess() {
                    @Override
                    public synchronized void run() {
                        switch (this.runLabel) {
                            case 0: break;
                            case 1: resume(1); break;
                            default: break;
                        }

                        _pd$out12.write(this, _ld$x1);
                        this.runLabel = 1;
                        yield();
                        label(1);

                        terminate();
                    }

                    @Override
                    public void finalize() {
                        _ld$par1.decrement();
                    } 
                }.schedule();

                new PJProcess() {
                    @Override
                    public synchronized void run() {
                        switch (this.runLabel) {
                            case 0: break;
                            case 1: resume(1); break;
                            default: break;
                        }

                        _pd$out23.write(this, _ld$x1);
                        this.runLabel = 1;
                        yield();
                        label(1);

                        terminate();
                    }

                    @Override
                    public void finalize() {
                        _ld$par1.decrement();
                    } 
                }.schedule();

                if (_ld$par1.shouldYield()) {
                    this.runLabel = 3;
                    yield();
                    label(3);
                }

            }
            terminate();
        }
    }

    public static class _proc$plus$crI$crI$cwI extends PJProcess {
        protected PJChannel<Integer> _pd$in11;
        protected PJChannel<Integer> _pd$in22;
        protected PJChannel<Integer> _pd$out3;

        protected int _ld$x11;
        protected int _ld$x22;
        protected int _ld$sum3;

        public _proc$plus$crI$crI$cwI(PJChannel<Integer> _pd$in11, PJChannel<Integer> _pd$in22, PJChannel<Integer> _pd$out3) {
            this._pd$in11 = _pd$in11;
            this._pd$in22 = _pd$in22;
            this._pd$out3 = _pd$out3;
        }

        @Override
        public synchronized void run() {
            switch (this.runLabel) {
                case 0: break;
                case 1: resume(1); break;
                case 2: resume(2); break;
                default: break;
            }

            while (isTrue()) {
                final PJPar _ld$par1 = new PJPar(2, this);

                new PJProcess() {
                    @Override
                    public synchronized void run() {
                        switch (this.runLabel) {
                            case 0: break;
                            case 1: resume(1); break;
                            case 2: resume(2); break;
                            default: break;
                        }

                        if (!_pd$in11.isReadyToRead(this)) {
                            this.runLabel = 1;
                            yield();
                        }

                        label(1);
                        _ld$x11 = _pd$in11.read(this);
                        this.runLabel = 2;
                        yield();

                        label(2);
                        terminate();
                    }

                    @Override
                    public void finalize() {
                        _ld$par1.decrement();
                    } 
                }.schedule();

                new PJProcess() {
                    @Override
                    public synchronized void run() {
                        switch (this.runLabel) {
                            case 0: break;
                            case 1: resume(1); break;
                            case 2: resume(2); break;
                            default: break;
                        }

                        if (!_pd$in22.isReadyToRead(this)) {
                            this.runLabel = 1;
                            yield();
                        }

                        label(1);
                        _ld$x22 = _pd$in22.read(this);
                        this.runLabel = 2;
                        yield();

                        label(2);
                        terminate();
                    }

                    @Override
                    public void finalize() {
                        _ld$par1.decrement();
                    } 
                }.schedule();

                if (_ld$par1.shouldYield()) {
                    this.runLabel = 1;
                    yield();
                    label(1);
                }

                _ld$sum3 = _ld$x11 + _ld$x22;
                _pd$out3.write(this, _ld$sum3);
                this.runLabel = 2;
                yield();
                label(2);

            }
            terminate();
        }
    }

    public static class _proc$prefix$I$crI$cwI extends PJProcess {
        protected int _pd$initVal1;
        protected PJChannel<Integer> _pd$in2;
        protected PJChannel<Integer> _pd$out3;

        protected int _ld$x1;

        public _proc$prefix$I$crI$cwI(int _pd$initVal1, PJChannel<Integer> _pd$in2, PJChannel<Integer> _pd$out3) {
            this._pd$initVal1 = _pd$initVal1;
            this._pd$in2 = _pd$in2;
            this._pd$out3 = _pd$out3;
        }

        @Override
        public synchronized void run() {
            switch (this.runLabel) {
                case 0: break;
                case 1: resume(1); break;
                case 2: resume(2); break;
                case 3: resume(3); break;
                case 4: resume(4); break;
                default: break;
            }

            _pd$out3.write(this, _pd$initVal1);
            this.runLabel = 1;
            yield();
            label(1);

            while (isTrue()) {
                if (!_pd$in2.isReadyToRead(this)) {
                    this.runLabel = 2;
                    yield();
                }

                label(2);
                _ld$x1 = _pd$in2.read(this);
                this.runLabel = 3;
                yield();

                label(3);
                _pd$out3.write(this, _ld$x1);
                this.runLabel = 4;
                yield();
                label(4);

            }
            terminate();
        }
    }

    public static class _proc$integrateParallel$crI$cwI extends PJProcess {
        protected PJChannel<Integer> _pd$in1;
        protected PJChannel<Integer> _pd$out2;

        protected PJChannel<Integer> _ld$a1;
        protected PJChannel<Integer> _ld$b2;
        protected PJChannel<Integer> _ld$c3;

        public _proc$integrateParallel$crI$cwI(PJChannel<Integer> _pd$in1, PJChannel<Integer> _pd$out2) {
            this._pd$in1 = _pd$in1;
            this._pd$out2 = _pd$out2;
        }

        @Override
        public synchronized void run() {
            switch (this.runLabel) {
                case 0: break;
                case 1: resume(1); break;
                default: break;
            }

            _ld$a1 = new PJOne2OneChannel<Integer>();
            _ld$b2 = new PJOne2OneChannel<Integer>();
            _ld$c3 = new PJOne2OneChannel<Integer>();
            final PJPar _ld$par1 = new PJPar(3, this);

            (new integrate._proc$plus$crI$crI$cwI(_pd$in1, _ld$c3, _ld$a1) {
                @Override
                public void finalize() {
                    _ld$par1.decrement();
                }
            }).schedule();

            (new integrate._proc$prefix$I$crI$cwI(0, _ld$b2, _ld$c3) {
                @Override
                public void finalize() {
                    _ld$par1.decrement();
                }
            }).schedule();

            (new integrate._proc$delta$crI$cwI$cwI(_ld$a1, _pd$out2, _ld$b2) {
                @Override
                public void finalize() {
                    _ld$par1.decrement();
                }
            }).schedule();

            if (_ld$par1.shouldYield()) {
                this.runLabel = 1;
                yield();
                label(1);
            }

            terminate();
        }
    }

    public static class _proc$consume$crI extends PJProcess {
        protected PJChannel<Integer> _pd$in1;

        protected int _ld$x1;

        public _proc$consume$crI(PJChannel<Integer> _pd$in1) {
            this._pd$in1 = _pd$in1;
        }

        @Override
        public synchronized void run() {
            switch (this.runLabel) {
                case 0: break;
                case 1: resume(1); break;
                case 2: resume(2); break;
                default: break;
            }

            while (isTrue()) {
                if (!_pd$in1.isReadyToRead(this)) {
                    this.runLabel = 1;
                    yield();
                }

                label(1);
                _ld$x1 = _pd$in1.read(this);
                this.runLabel = 2;
                yield();

                label(2);
                io.println(_ld$x1);
            }
            terminate();
        }
    }

    public static class _proc$produce$cwI extends PJProcess {
        protected PJChannel<Integer> _pd$out1;

        protected int _ld$x1;

        public _proc$produce$cwI(PJChannel<Integer> _pd$out1) {
            this._pd$out1 = _pd$out1;
        }

        @Override
        public synchronized void run() {
            switch (this.runLabel) {
                case 0: break;
                case 1: resume(1); break;
                default: break;
            }

            _ld$x1 = 0;
            while (isTrue()) {
                _pd$out1.write(this, _ld$x1);
                this.runLabel = 1;
                yield();
                label(1);

                _ld$x1++;
            }
            terminate();
        }
    }

    public static class _proc$main$arT extends PJProcess {
        protected String[] _pd$args1;

        protected PJChannel<Integer> _ld$in1;
        protected PJChannel<Integer> _ld$out2;

        public _proc$main$arT(String[] _pd$args1) {
            this._pd$args1 = _pd$args1;
        }

        @Override
        public synchronized void run() {
            switch (this.runLabel) {
                case 0: break;
                case 1: resume(1); break;
                default: break;
            }

            _ld$in1 = new PJOne2OneChannel<Integer>();
            _ld$out2 = new PJOne2OneChannel<Integer>();
            final PJPar _ld$par1 = new PJPar(3, this);

            (new integrate._proc$produce$cwI(_ld$in1) {
                @Override
                public void finalize() {
                    _ld$par1.decrement();
                }
            }).schedule();

            (new integrate._proc$consume$crI(_ld$out2) {
                @Override
                public void finalize() {
                    _ld$par1.decrement();
                }
            }).schedule();

            (new integrate._proc$integrate$crI$cwI(_ld$in1, _ld$out2) {
                @Override
                public void finalize() {
                    _ld$par1.decrement();
                }
            }).schedule();

            if (_ld$par1.shouldYield()) {
                this.runLabel = 1;
                yield();
                label(1);
            }

            terminate();
        }
    }

    public static void main(String[] _pd$args1) {
    	Scheduler scheduler = new Scheduler();
        PJProcess.scheduler = scheduler;
        (new integrate._proc$main$arT(_pd$args1)).schedule();
        PJProcess.scheduler.start();
    }
}