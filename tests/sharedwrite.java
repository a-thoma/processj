import java.util.*;
import processj.runtime.*;
import std.io;


/**
 * File generated by the ProcessJ JVM Compiler.
 * Package name 'tests'.
 * Code generation for 'sharedwrite.pj'.
 * Target class 'sharedwrite'.
 * Java code version '1.8.0_66'.
 *
 * @author ProcessJ Group - University of Nevada, Las Vegas
 * @since 1.2
 *
 */
public class sharedwrite {
    // Temporary dirty fix for unreachable code due to infinite loop
    public static boolean isTrue() { return true; }

    public static class _proc$reader$crI extends PJProcess {
        protected PJOne2OneChannel<Integer> _pd$in1;

        protected int _ld$v1;

        public _proc$reader$crI(PJOne2OneChannel<Integer> _pd$in1) {
            this._pd$in1 = _pd$in1;
        }

        @Override
        public synchronized void run() {
            switch (this.runLabel) {
                case 0: break;
                case 1: resume(1); break;
                case 2: resume(2); break;
                default: break;
            }

            while (isTrue()) {
                if (!_pd$in1.isReadyToRead(this)) {
                    this.runLabel = 1;
                    yield();
                }

                label(1);
                _ld$v1 = _pd$in1.read(this);
                this.runLabel = 2;
                yield();

                label(2);
                io.println("read = " + _ld$v1);
            }
            terminate();
        }
    }

    public static class _proc$writer$I$cwI extends PJProcess {
        protected int _pd$id1;
        protected PJMany2OneChannel<Integer> _pd$out2;

        protected int _ld$v1;

        public _proc$writer$I$cwI(int _pd$id1, PJMany2OneChannel<Integer> _pd$out2) {
            this._pd$id1 = _pd$id1;
            this._pd$out2 = _pd$out2;
        }

        @Override
        public synchronized void run() {
            switch (this.runLabel) {
                case 0: break;
                case 1: resume(1); break;
                case 2: resume(2); break;
                default: break;
            }

            _ld$v1 = 0;
            while (isTrue()) {
                io.println(_pd$id1 + ": " + _ld$v1);
                if (!_pd$out2.claimWrite(this)) {
                    this.runLabel = 1;
                    yield();
                }
                label(1);

                _pd$out2.write(this, _ld$v1);
                this.runLabel = 2;

                yield();
                label(2);

                _pd$out2.unclaimWrite();

                _ld$v1 = _ld$v1 + 1;
            }
            terminate();
        }
    }

    public static class _proc$main$arT extends PJProcess {
        protected String[] _pd$args1;

        protected PJMany2OneChannel<Integer> _ld$c1;
        protected int _ld$a2;

        public _proc$main$arT(String[] _pd$args1) {
            this._pd$args1 = _pd$args1;
        }

        @Override
        public synchronized void run() {
            switch (this.runLabel) {
                case 0: break;
                case 1: resume(1); break;
                default: break;
            }

            _ld$c1 = new PJMany2OneChannel<Integer>();
            _ld$a2 = 129;
            final PJPar _ld$par1 = new PJPar(4, this);

            (new sharedwrite._proc$reader$crI(_ld$c1) {
                @Override
                public void finalize() {
                    _ld$par1.decrement();
                }
            }).schedule();

            (new sharedwrite._proc$writer$I$cwI(1, _ld$c1) {
                @Override
                public void finalize() {
                    _ld$par1.decrement();
                }
            }).schedule();

            (new sharedwrite._proc$writer$I$cwI(2, _ld$c1) {
                @Override
                public void finalize() {
                    _ld$par1.decrement();
                }
            }).schedule();

            (new sharedwrite._proc$writer$I$cwI(3, _ld$c1) {
                @Override
                public void finalize() {
                    _ld$par1.decrement();
                }
            }).schedule();

            if (_ld$par1.shouldYield()) {
                this.runLabel = 1;
                yield();
                label(1);
            }

            terminate();
        }
    }

    public static void main(String[] _pd$args1) {
    	Scheduler scheduler = new Scheduler();
        PJProcess.scheduler = scheduler;
        (new sharedwrite._proc$main$arT(_pd$args1)).schedule();
        PJProcess.scheduler.start();
    }
}