import java.util.*;
import processj.runtime.*;
import std.*;


/**
 * File generated by the ProcessJ JVM Compiler.
 * Package name 'tests'.
 * Code generation for 'Demo_matt.pj'.
 * Target class 'Demo_matt'.
 * Java code version '1.8.0_66'.
 *
 * @author ProcessJ Group - University of Nevada, Las Vegas
 * @since 1.2
 *
 */
public class Demo_matt {
    // Temporary dirty fix for unreachable code due to infinite loop
    public static boolean isTrue() { return true; }

    public static class _proc$main$arT extends PJProcess {
        protected String[] _pd$args1;

        protected PJChannel<Integer> _ld$c1;
        protected int _ld$x2;
        protected int _ld$temp03;

        public _proc$main$arT(String[] _pd$args1) {
            this._pd$args1 = _pd$args1;
        }

        @Override
        public synchronized void run() {
            switch (this.runLabel) {
                case 0: break;
                case 1: resume(1); break;
                default: break;
            }

            _ld$c1 = new PJOne2OneChannel<Integer>();

            final PJPar _ld$par1 = new PJPar(2, this);

            new PJProcess() {
                @Override
                public synchronized void run() {
                    switch (this.runLabel) {
                        case 0: break;
                        case 1: resume(1); break;
                        case 2: resume(2); break;
                        default: break;
                    }

                    if (!_ld$c1.isReadyToRead(this)) {
                        this.runLabel = 1;
                        yield();
                    }

                    label(1);
                    _ld$temp03 = _ld$c1.read(this);
                    this.runLabel = 2;
                    yield();

                    label(2);
                    _ld$x2 = _ld$temp03 + 3;
                    terminate();
                }

                @Override
                public void finalize() {
                    _ld$par1.decrement();
                } 
            }.schedule();

            new PJProcess() {
                @Override
                public synchronized void run() {
                    switch (this.runLabel) {
                        case 0: break;
                        case 1: resume(1); break;
                        default: break;
                    }

                    _ld$c1.write(this, 4);
                    this.runLabel = 1;
                    yield();
                    label(1);

                    terminate();
                }

                @Override
                public void finalize() {
                    _ld$par1.decrement();
                } 
            }.schedule();

            if (_ld$par1.shouldYield()) {
                this.runLabel = 1;
                yield();
                label(1);
            }

            io.println(_ld$x2);
            terminate();
        }
    }

    public static void main(String[] _pd$args1) {
    	Scheduler scheduler = new Scheduler();
        PJProcess.scheduler = scheduler;
        (new Demo_matt._proc$main$arT(_pd$args1)).schedule();
        PJProcess.scheduler.start();
    }
}