import java.util.*;
import processj.runtime.*;
import image.pgm;


/**
 * File generated by the ProcessJ JVM Compiler.
 * Package name 'tests'.
 * Code generation for 'mandelbrot2.pj'.
 * Target class 'mandelbrot2'.
 * Java code version '1.8.0_66'.
 *
 * @author ProcessJ Group - University of Nevada, Las Vegas
 * @since 1.2
 *
 */
public class mandelbrot2 {
    // Temporary dirty fix for unreachable code due to infinite loop
    public static boolean isTrue() { return true; }

    public static int _method$computePixel1139008(double _pd$real1, double _pd$imag2) {
        int _ld$count1;
        int _ld$max2;
        double _ld$zReal3;
        double _ld$zImag4;
        double _ld$tmp5;
        double _ld$len6;

        _ld$count1 = 0;
        _ld$max2 = 256;
        _ld$zReal3 = 0;
        _ld$zImag4 = 0;
        do {
            _ld$tmp5 = _ld$zReal3 * _ld$zReal3 - _ld$zImag4 * _ld$zImag4 + _pd$real1;
            _ld$zImag4 = 2 * _ld$zReal3 * _ld$zImag4 + _pd$imag2;
            _ld$zReal3 = _ld$tmp5;
            _ld$len6 = _ld$zReal3 * _ld$zReal3 + _ld$zImag4 * _ld$zImag4;
            ++_ld$count1;
        } while ((_ld$len6 < 4.0) && (_ld$count1 < _ld$max2));
        return _ld$count1;
    }

    public static class _proc$main1169311 extends PJProcess {
        protected String[] _pd$args1;

        protected int _ld$width1;
        protected int _ld$height2;
        protected int[][] _ld$mandelbrot3;
        protected double _ld$realMin4;
        protected double _ld$realMax5;
        protected double _ld$imagMin6;
        protected double _ld$imagMax7;
        protected double _ld$scaleReal8;
        protected double _ld$scaleImag9;
        protected int _ld$y10;
        protected int _ld$x11;
        protected double _ld$cReal12;
        protected double _ld$cImag13;
        protected double _ld$cReal14;
        protected double _ld$cImag15;
        protected int _ld$x16;
        protected double _ld$cReal17;
        protected double _ld$cImag18;
        protected double _ld$cReal19;
        protected double _ld$cImag20;

        public _proc$main1169311(String[] _pd$args1) {
            this._pd$args1 = _pd$args1;
        }

        @Override
        public synchronized void run() {
            switch (this.runLabel) {
                case 0: break;
                case 1: resume(1); break;
                case 2: resume(2); break;
                default: break;
            }

            _ld$width1 = 4000;
            _ld$height2 = 3000;
            _ld$mandelbrot3 = new int[_ld$height2][_ld$width1];
            _ld$realMin4 = -0.7801785714285;;
            _ld$realMax5 = -0.7676785714285;;
            _ld$imagMin6 = -0.1279296875;;
            _ld$imagMax7 = -0.1181640625;;
            _ld$scaleReal8 = (_ld$realMax5 - _ld$realMin4) / _ld$width1;
            _ld$scaleImag9 = (_ld$imagMax7 - _ld$imagMin6) / _ld$height2;
            final PJPar _ld$par2 = new PJPar(0, this);
            List<PJProcess> processes = new ArrayList<>();
            int count = 0;

            for (_ld$y10 = 0; ; ++_ld$y10) {
                ++count;
                processes.add(
                    new PJProcess() {
                        @Override
                        public synchronized void run() {
                            switch (this.runLabel) {
                                case 0: break;
                                case 1: resume(1); break;
                                default: break;
                            }

                            final PJPar _ld$par3 = new PJPar(0, this);
                            List<PJProcess> processes = new ArrayList<>();
                            int count = 0;

                            for (_ld$x16 = 0; ; ++_ld$x16) {
                                ++count;
                                processes.add(
                                    new PJProcess() {
                                        @Override
                                        public synchronized void run() {
                                            _ld$cReal19 = _ld$realMin4 + (((double) (_ld$x16)) * _ld$scaleReal8);
                                            _ld$cImag20 = _ld$imagMin6 + (((double) (_ld$y10)) * _ld$scaleImag9);
                                            _ld$mandelbrot3[_ld$y10][_ld$x16] = 256 - mandelbrot2._method$computePixel1139008(_ld$cReal19, _ld$cImag20);;
                                            terminate();
                                        }

                                        @Override
                                        public void finalize() {
                                            _ld$par3.decrement();
                                        } 
                                    }
                                );
                            }

                            _ld$par3.setProcessCount(count);

                            for (PJProcess p : processes)
                                p.schedule();

                            this.setNotReady();
                            this.runLabel = 1;
                            yield();
                            label(1);
                            terminate();
                        }

                        @Override
                        public void finalize() {
                            _ld$par2.decrement();
                        } 
                    }
                );
            }

            _ld$par2.setProcessCount(count);

            for (PJProcess p : processes)
                p.schedule();

            this.setNotReady();
            this.runLabel = 2;
            yield();
            label(2);
            pgm.writePGM(_ld$mandelbrot3, "mm.pgm", 256);
            terminate();
        }
    }

    public static void main(String[] _pd$args1) {
    	Scheduler scheduler = new Scheduler();
        PJProcess.scheduler = scheduler;
        (new mandelbrot2._proc$main1169311(_pd$args1)).schedule();
        PJProcess.scheduler.start();
    }
}