import java.util.*;
import processj.runtime.*;
import std.io;


/**
 * File generated by the ProcessJ JVM Compiler.
 * Package name 'tests'.
 * Code generation for 'test22.pj'.
 * Target class 'test22'.
 * Java code version '1.8.0_66'.
 *
 * @author ProcessJ Group - University of Nevada, Las Vegas
 * @since 1.2
 *
 */
public class test22 {
    // Temporary dirty fix for unreachable code due to infinite loop
    public static boolean isTrue() { return true; }

    public static class _proc$prefix$I$crJ$cwJ extends PJProcess {
        protected int _pd$n1;
        protected PJChannel<Long> _pd$in2;
        protected PJChannel<Long> _pd$out3;

        protected long _ld$l1;

        public _proc$prefix$I$crJ$cwJ(int _pd$n1, PJChannel<Long> _pd$in2, PJChannel<Long> _pd$out3) {
            this._pd$n1 = _pd$n1;
            this._pd$in2 = _pd$in2;
            this._pd$out3 = _pd$out3;
        }

        @Override
        public synchronized void run() {
            switch (this.runLabel) {
                case 0: break;
                case 1: resume(1); break;
                case 2: resume(2); break;
                case 3: resume(3); break;
                case 4: resume(4); break;
                default: break;
            }

            _pd$out3.write(this, ((long) (_pd$n1)));
            this.runLabel = 1;
            yield();
            label(1);

            while (isTrue()) {
                if (!_pd$in2.isReadyToRead(this)) {
                    this.runLabel = 2;
                    yield();
                }

                label(2);
                _ld$l1 = _pd$in2.read(this);
                this.runLabel = 3;
                yield();

                label(3);
                _pd$out3.write(this, _ld$l1);
                this.runLabel = 4;
                yield();
                label(4);

            }
            terminate();
        }
    }

    public static class _proc$succ$crJ$cwJ extends PJProcess {
        protected PJChannel<Long> _pd$in1;
        protected PJChannel<Long> _pd$out2;

        protected long _ld$l1;

        public _proc$succ$crJ$cwJ(PJChannel<Long> _pd$in1, PJChannel<Long> _pd$out2) {
            this._pd$in1 = _pd$in1;
            this._pd$out2 = _pd$out2;
        }

        @Override
        public synchronized void run() {
            switch (this.runLabel) {
                case 0: break;
                case 1: resume(1); break;
                case 2: resume(2); break;
                case 3: resume(3); break;
                default: break;
            }

            while (isTrue()) {
                if (!_pd$in1.isReadyToRead(this)) {
                    this.runLabel = 1;
                    yield();
                }

                label(1);
                _ld$l1 = _pd$in1.read(this);
                this.runLabel = 2;
                yield();

                label(2);
                _pd$out2.write(this, _ld$l1 + 1);
                this.runLabel = 3;
                yield();
                label(3);

            }
            terminate();
        }
    }

    public static class _proc$delta$crJ$cwJ$cwJ extends PJProcess {
        protected PJChannel<Long> _pd$in1;
        protected PJChannel<Long> _pd$out12;
        protected PJChannel<Long> _pd$out23;

        protected long _ld$l1;

        public _proc$delta$crJ$cwJ$cwJ(PJChannel<Long> _pd$in1, PJChannel<Long> _pd$out12, PJChannel<Long> _pd$out23) {
            this._pd$in1 = _pd$in1;
            this._pd$out12 = _pd$out12;
            this._pd$out23 = _pd$out23;
        }

        @Override
        public synchronized void run() {
            switch (this.runLabel) {
                case 0: break;
                case 1: resume(1); break;
                case 2: resume(2); break;
                case 3: resume(3); break;
                default: break;
            }

            while (isTrue()) {
                if (!_pd$in1.isReadyToRead(this)) {
                    this.runLabel = 1;
                    yield();
                }

                label(1);
                _ld$l1 = _pd$in1.read(this);
                this.runLabel = 2;
                yield();

                label(2);
                final PJPar _ld$par1 = new PJPar(2, this);

                new PJProcess() {
                    @Override
                    public synchronized void run() {
                        switch (this.runLabel) {
                            case 0: break;
                            case 1: resume(1); break;
                            default: break;
                        }

                        _pd$out12.write(this, _ld$l1);
                        this.runLabel = 1;
                        yield();
                        label(1);

                        terminate();
                    }

                    @Override
                    public void finalize() {
                        _ld$par1.decrement();
                    } 
                }.schedule();

                new PJProcess() {
                    @Override
                    public synchronized void run() {
                        switch (this.runLabel) {
                            case 0: break;
                            case 1: resume(1); break;
                            default: break;
                        }

                        _pd$out23.write(this, _ld$l1);
                        this.runLabel = 1;
                        yield();
                        label(1);

                        terminate();
                    }

                    @Override
                    public void finalize() {
                        _ld$par1.decrement();
                    } 
                }.schedule();

                if (_ld$par1.shouldYield()) {
                    this.runLabel = 3;
                    yield();
                    label(3);
                }

            }
            terminate();
        }
    }

    public static class _proc$consume$crJ extends PJProcess {
        protected PJChannel<Long> _pd$in1;

        protected long _ld$l1;

        public _proc$consume$crJ(PJChannel<Long> _pd$in1) {
            this._pd$in1 = _pd$in1;
        }

        @Override
        public synchronized void run() {
            switch (this.runLabel) {
                case 0: break;
                case 1: resume(1); break;
                case 2: resume(2); break;
                default: break;
            }

            while (isTrue()) {
                if (!_pd$in1.isReadyToRead(this)) {
                    this.runLabel = 1;
                    yield();
                }

                label(1);
                _ld$l1 = _pd$in1.read(this);
                this.runLabel = 2;
                yield();

                label(2);
                io.println(_ld$l1);
            }
            terminate();
        }
    }

    public static class _proc$main$arT extends PJProcess {
        protected String[] _pd$args1;

        protected PJChannel<Long> _ld$a1;
        protected PJChannel<Long> _ld$b2;
        protected PJChannel<Long> _ld$c3;
        protected PJChannel<Long> _ld$d4;

        public _proc$main$arT(String[] _pd$args1) {
            this._pd$args1 = _pd$args1;
        }

        @Override
        public synchronized void run() {
            switch (this.runLabel) {
                case 0: break;
                case 1: resume(1); break;
                default: break;
            }

            _ld$a1 = new PJOne2OneChannel<Long>();
            _ld$b2 = new PJOne2OneChannel<Long>();
            _ld$c3 = new PJOne2OneChannel<Long>();
            _ld$d4 = new PJOne2OneChannel<Long>();
            final PJPar _ld$par1 = new PJPar(4, this);

            (new test22._proc$delta$crJ$cwJ$cwJ(_ld$d4, _ld$a1, _ld$b2) {
                @Override
                public void finalize() {
                    _ld$par1.decrement();
                }
            }).schedule();

            (new test22._proc$succ$crJ$cwJ(_ld$b2, _ld$c3) {
                @Override
                public void finalize() {
                    _ld$par1.decrement();
                }
            }).schedule();

            (new test22._proc$prefix$I$crJ$cwJ(0, _ld$c3, _ld$d4) {
                @Override
                public void finalize() {
                    _ld$par1.decrement();
                }
            }).schedule();

            (new test22._proc$consume$crJ(_ld$a1) {
                @Override
                public void finalize() {
                    _ld$par1.decrement();
                }
            }).schedule();

            if (_ld$par1.shouldYield()) {
                this.runLabel = 1;
                yield();
                label(1);
            }

            terminate();
        }
    }

    public static void main(String[] _pd$args1) {
    	Scheduler scheduler = new Scheduler();
        PJProcess.scheduler = scheduler;
        (new test22._proc$main$arT(_pd$args1)).schedule();
        PJProcess.scheduler.start();
    }
}