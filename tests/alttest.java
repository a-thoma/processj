import java.util.*;
import processj.runtime.*;
import std.*;


/**
 * File generated by the ProcessJ JVM Compiler.
 * Package name 'tests'.
 * Code generation for 'alttest.pj'.
 * Target class 'alttest'.
 * Java code version '1.8.0_66'.
 *
 * @author ProcessJ Group - University of Nevada, Las Vegas
 * @since 1.2
 *
 */
public class alttest {
    // Temporary dirty fix for unreachable code due to infinite loop
    public static boolean isTrue() { return true; }

    public static final int NUMBER = 9;

    public static class _proc$writer11171377 extends PJProcess {
        protected PJChannel<Integer> _pd$out1;

        public _proc$writer11171377(PJChannel<Integer> _pd$out1) {
            this._pd$out1 = _pd$out1;
        }

        @Override
        public synchronized void run() {
            switch (this.runLabel) {
                case 0: break;
                case 1: resume(1); break;
                default: break;
            }

            _pd$out1.write(this, 42);
            this.runLabel = 1;
            yield();
            label(1);

            terminate();
        }
    }

    public static class _proc$writer21171377 extends PJProcess {
        protected PJChannel<Integer> _pd$out1;

        public _proc$writer21171377(PJChannel<Integer> _pd$out1) {
            this._pd$out1 = _pd$out1;
        }

        @Override
        public synchronized void run() {
            switch (this.runLabel) {
                case 0: break;
                case 1: resume(1); break;
                default: break;
            }

            _pd$out1.write(this, 43);
            this.runLabel = 1;
            yield();
            label(1);

            terminate();
        }
    }

    public static class _proc$reader$682474708 extends PJProcess {
        protected PJChannel<Integer> _pd$in11;
        protected PJChannel<Integer> _pd$in22;

        protected int _ld$v1;
        protected int _ld$index2;
        protected PJAlt _ld$alt3;

        public _proc$reader$682474708(PJChannel<Integer> _pd$in11, PJChannel<Integer> _pd$in22) {
            this._pd$in11 = _pd$in11;
            this._pd$in22 = _pd$in22;
        }

        @Override
        public synchronized void run() {
            switch (this.runLabel) {
                case 0: break;
                case 1: resume(1); break;
                case 2: resume(2); break;
                case 3: resume(3); break;
                default: break;
            }

            _ld$alt3 = new PJAlt(2, this);
            boolean[] booleanGuards = { true, true };
            Object[] objectGuards = { _pd$in11, PJAlt.SKIP };
            boolean ready = _ld$alt3.setGuards(booleanGuards, objectGuards);

            if (!ready) {
                System.out.println("RuntimeError: One of the boolean pre-guards must be true!");
                System.exit(1);
            }

            this.setNotReady();
            _ld$index2 = _ld$alt3.enable();
            this.runLabel = 3;
            yield();

            label(3);
            int selected = _ld$alt3.disable(_ld$index2);

            switch(selected) {
                case 0:
                    if (!_pd$in11.isReadyToRead(this)) {
                        this.runLabel = 1;
                        yield();
                    }

                    label(1);
                    _ld$v1 = _pd$in11.read(this);
                    this.runLabel = 2;
                    yield();

                    label(2);
                    io.println("Got " + _ld$v1 + " from writer 1.");
                    break;
                case 1:
                    io.println("in skip");
                    break;
                default:
                    break;
            }
            terminate();
        }
    }

    public static class _proc$main1169311 extends PJProcess {
        protected String[] _pd$args1;

        protected PJChannel<Integer> _ld$c11;
        protected PJChannel<Integer> _ld$c22;

        public _proc$main1169311(String[] _pd$args1) {
            this._pd$args1 = _pd$args1;
        }

        @Override
        public synchronized void run() {
            switch (this.runLabel) {
                case 0: break;
                case 1: resume(1); break;
                default: break;
            }

            _ld$c11 = new PJOne2OneChannel<Integer>();
            _ld$c22 = new PJOne2OneChannel<Integer>();
            final PJPar _ld$par1 = new PJPar(2, this);

            (new alttest._proc$writer11171377(_ld$c11) {
                @Override
                public void finalize() {
                    _ld$par1.decrement();
                }
            }).schedule();

            (new alttest._proc$reader$682474708(_ld$c11, _ld$c22) {
                @Override
                public void finalize() {
                    _ld$par1.decrement();
                }
            }).schedule();

            if (_ld$par1.shouldYield()) {
                this.runLabel = 1;
                yield();
                label(1);
            }

            terminate();
        }
    }

    public static void main(String[] _pd$args1) {
    	Scheduler scheduler = new Scheduler();
        PJProcess.scheduler = scheduler;
        (new alttest._proc$main1169311(_pd$args1)).schedule();
        PJProcess.scheduler.start();
    }
}